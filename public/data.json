[
  {
    "title": "ALERT: Potential Issue with Feed",
    "content": "<p>Dear User,</p>\r\n<p>an error occurred while fetching your feed: 'Could not open JPA EntityManager for transaction'. This may require your attention. Please note, this error will only be reported once per month.</p>\r\n\r\n<p>If you believe this is a bug, maybe related with the new release, here is the stack trace so you can report it.<p>\r\n\r\n<p>---</p>\r\n<p>Feed URL: http://rssproxy.migor.org/api/tf?url=https://fenews.substack.com/feed</p>\r\n<p>corrId: c7Vt</p>\r\n<p>\r\n<pre>\r\norg.springframework.transaction.CannotCreateTransactionException: Could not open JPA EntityManager for transaction\r\n\tat org.springframework.orm.jpa.JpaTransactionManager.doBegin(JpaTransactionManager.java:466)\r\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.startTransaction(AbstractPlatformTransactionManager.java:531)\r\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:405)\r\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.createTransactionIfNecessary(TransactionAspectSupport.java:617)\r\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:386)\r\n\tat org.springframework.transaction.interc\r\n</pre>\r\n</p>",
    "createdAt": "2025-07-17T09:31:11.000+00:00",
    "link": "https://github.com/damoeb/feedless/wiki/Errors#error-potential-issue-with-feed",
    "author": "",
    "site": {
      "id": "1",
      "url": "https://fenews.substack.com/feed",
      "name": "FEnews"
    }
  },
  {
    "title": "전 Waymo 엔지니어들, 건설 자동화를 위해 Bedrock Robotics 설립",
    "content": "<ul>\r\n<li>전 <strong>Waymo</strong> 출신 엔지니어들이 <strong>Bedrock Robotics</strong>를 설립해 건설 현장 자동화에 주력함</li>\r\n<li>이 스타트업은 <strong>기존 건설 차량</strong>에 자율주행 키트 장착을 목표로 하며, <strong>80백만 달러</strong>의 투자 유치 소식을 발표함</li>\r\n<li>Bedrock Robotics는 ...</p>",
    "createdAt": "2025-07-17T08:35:16.000+00:00",
    "link": "https://news.hada.io/topic?id=22035",
    "author": "",
    "site": {
      "id": "2",
      "url": "https://feeds.feedburner.com/geeknews-feed",
      "name": "GeekNews"
    }
  },
  {
    "title": "Builder.io 개발자가 Claude Code를 사용하는 방법 (+ best tips)",
    "content": "<p>예전에는 Cursor 파워 유저였고 <a href=\"https://www.builder.io/blog/cursor-tips\">How I use Cursor (+ my best tips)</a>라는 글로 인기를 끌었던 <a href=\"https://www.builder.io/\">Builder.io</a>의 Steve Swell이 이번에는 좋은 클로드 코드 팁 글을 올려줬길래 번역 + 요약해서 공유드립니다. (블로그 글에는...</p>",
    "createdAt": "2025-07-17T01:59:34.000+00:00",
    "link": "https://news.hada.io/topic?id=22034",
    "author": "",
    "site": {
      "id": "2",
      "url": "https://feeds.feedburner.com/geeknews-feed",
      "name": "GeekNews"
    }
  },
  {
    "title": "Uzu - 애플 실리콘용 고성능 AI 추론 엔진",
    "content": "<ul>\r\n<li>Apple Silicon 환경에서 <strong>AI 모델을 빠르게 실행</strong>하기 위한 <strong>Rust 기반 추론 엔진</strong>\r\n</li>\r\n<li>GPU 커널 또는 <strong>CoreML 하단의 MPSGraph</strong>를 선택적으로 활용하는 <strong>하이브리드 구조</strong>\r\n</li>\r\n<li>자체 포맷 모델을 사용하며, <strong>lalamo 도구를 통...</p>",
    "createdAt": "2025-07-17T01:51:02.000+00:00",
    "link": "https://news.hada.io/topic?id=22033",
    "author": "",
    "site": {
      "id": "2",
      "url": "https://feeds.feedburner.com/geeknews-feed",
      "name": "GeekNews"
    }
  },
  {
    "title": "RAG는 죽지 않았다",
    "content": "<blockquote>\r\n<p>RAG의 미래는 \"<strong>더 큰 컨텍스트 창</strong>이 아니라, <strong>더 나은 검색</strong>에 있다\"</p>\r\n</blockquote>\r\n<ul>\r\n<li>\"RAG Is Dead\"라는 말은 <strong>2023년식 단순 RAG 구현 방식</strong>에만 해당되며, 진짜 문제는 정보 손실이 큰 <strong>단일 벡터 기반 검색...</p>",
    "createdAt": "2025-07-17T01:31:01.000+00:00",
    "link": "https://news.hada.io/topic?id=22032",
    "author": "",
    "site": {
      "id": "2",
      "url": "https://feeds.feedburner.com/geeknews-feed",
      "name": "GeekNews"
    }
  },
  {
    "title": "거의 한 세기만에 발견된 첫 번째 새로운 종류의 자석: Altermagnets",
    "content": "<ul>\r\n<li>\r\n<strong>Libor Šmejkal</strong>은 M. C. Escher의 예술 작품에서 영감을 받아, <strong>완전히 새로운 자성</strong>의 존재를 예측함</li>\r\n<li>인류는 <strong>오랜 세월 동안 자석</strong>을 알고 있었으며, 현대 기술의 핵심 역할을 담당함</li>\r\n<li>100년 동안 <strong>자석의 종류가 두 가지뿐</strong...</p>",
    "createdAt": "2025-07-17T01:28:19.000+00:00",
    "link": "https://news.hada.io/topic?id=22031",
    "author": "",
    "site": {
      "id": "2",
      "url": "https://feeds.feedburner.com/geeknews-feed",
      "name": "GeekNews"
    }
  },
  {
    "title": "Firefox는 앞으로 어디로 갈 것인가?",
    "content": "<ul>\r\n<li>\r\n<strong>Mozilla</strong>는 사용자 의견을 바탕으로 <strong>새로운 기능 개발</strong>을 이어감</li>\r\n<li>\r\n<strong>프로필, 탭 그룹, 세로 탭 등 주요 기능들</strong>이 모두 사용자 요청에 의해 도입됨</li>\r\n<li>Firefox 개발팀은 사용자의 <strong>직접적인 의견 수렴 방식</strong>을 새롭게 시도함</l...</p>",
    "createdAt": "2025-07-17T01:25:17.000+00:00",
    "link": "https://news.hada.io/topic?id=22030",
    "author": "",
    "site": {
      "id": "2",
      "url": "https://feeds.feedburner.com/geeknews-feed",
      "name": "GeekNews"
    }
  },
  {
    "title": "Helix Editor 25.07",
    "content": "<ul>\r\n<li>Helix 25.07은 <strong>핵심 컴포넌트의 대체</strong>와 다수의 신규 기능 추가를 포함함</li>\r\n<li>\r\n<strong>파일 탐색기, LSP 문서 색상 표시, 커맨드 모드 개선</strong> 등 사용성과 워크플로우가 크게 향상됨</li>\r\n<li>문법 하이라이트와 쿼리 최적화를 위해 신규 crate인 <strong>Tree-house</strong>가 ...</p>",
    "createdAt": "2025-07-17T01:22:16.000+00:00",
    "link": "https://news.hada.io/topic?id=22029",
    "author": "",
    "site": {
      "id": "2",
      "url": "https://feeds.feedburner.com/geeknews-feed",
      "name": "GeekNews"
    }
  },
  {
    "title": "파이썬으로 전향하고 실제로 즐기게 된 경험",
    "content": "<ul>\r\n<li>최근 <strong>AI 개발</strong>의 트렌드로 인해 본격적으로 파이썬 학습 및 사용을 시작함</li>\r\n<li>데이터 처리, <strong>생태계 발전</strong>, 성능 향상 등 파이썬 언어와 도구 체계의 급격한 발전을 체감함</li>\r\n<li>uv, ruff, pytest, Pydantic 등 <strong>최신 개발 도구와 라이브러리</strong>를 본인...</p>",
    "createdAt": "2025-07-17T01:19:14.000+00:00",
    "link": "https://news.hada.io/topic?id=22028",
    "author": "",
    "site": {
      "id": "2",
      "url": "https://feeds.feedburner.com/geeknews-feed",
      "name": "GeekNews"
    }
  },
  {
    "title": "Blender 4.5 LTS",
    "content": "<ul>\r\n<li>\r\n<strong>Blender 4.5 LTS</strong>는 장기 지원 버전으로, 오랜 기간 <strong>안정성</strong>과 업데이트를 제공함</li>\r\n<li>이번 릴리스에서는 <strong>강화된 실시간 렌더링 기능</strong>과 UI 개선이 강조됨</li>\r\n<li>\r\n<strong>개발자 및 아티스트</strong>를 위한 다양한 워크플로우 최적화와 성능 향상...</p>",
    "createdAt": "2025-07-17T01:16:13.000+00:00",
    "link": "https://news.hada.io/topic?id=22027",
    "author": "",
    "site": {
      "id": "2",
      "url": "https://feeds.feedburner.com/geeknews-feed",
      "name": "GeekNews"
    }
  },
  {
    "title": "Firefox 141에서 Windows용 WebGPU 출시",
    "content": "<ul>\r\n<li>Firefox 141에서 <strong>Windows 플랫폼</strong> 대상으로 <strong>WebGPU 정식 출시</strong> 소식 발표</li>\r\n<li>WebGPU는 <strong>웹 콘텐츠와 사용자의 그래픽 프로세서</strong>를 연결해 고성능 렌더링과 계산 지원</li>\r\n<li>WebGPU는 이미 <strong>Chrome에서 도입</strong>, 앞으로 Safari와 다른 플...</p>",
    "createdAt": "2025-07-17T01:13:11.000+00:00",
    "link": "https://news.hada.io/topic?id=22026",
    "author": "",
    "site": {
      "id": "2",
      "url": "https://feeds.feedburner.com/geeknews-feed",
      "name": "GeekNews"
    }
  },
  {
    "title": "What I Took From the State of Dev 2025 Survey",
    "content": "<p>State of Devs 2025 survey results are out! While the survey isn’t directly related to the <em>code</em> part of what we do for work, I do love the focus <a href=\"https://2025.stateofdevs.com/en-US/\" rel=\"noopener\">Devographics</a> took <a href=\"https://survey.devographics.com/en-US\" rel=\"noopener\">ever since its inception in 2020</a>. And this year it brought us some rather <em>interesting</em> results through the attendance of 8,717 developers, lots of data, and even more useful insights that I think everyone can look up and learn from.</p>\r\n\r\n\r\n\r\n<p>I decided to look at the survey results with an analytical mindset, but wound up pouring my heart out because, well, I am a developer, and the entire survey affects me in a way. I have some personal opinions, it turns out. So, sit back, relax, and indulge me for a bit as we look at a few choice pieces of the survey.</p>\r\n\r\n\r\n\r\n<p>And it’s worth noting that this is only <em>part one</em> of the survey results. A second data dump will be published later and I’m interested to poke at those numbers, too.</p>\r\n\r\n\r\n\r\n<span id=\"more-387980\"></span>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"an-opportunity-to-connect\">An opportunity to connect</h3>\r\n\r\n\r\n<figure class=\"wp-block-image size-full\"><img data-recalc-dims=\"1\" fetchpriority=\"high\" decoding=\"async\" width=\"1497\" height=\"635\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/devs-01.webp?resize=1497%2C635&ssl=1\" alt=\"Country or Region bar chart. USA is 26%, UK is 9%, Germany is 8%, and France is at 6%.\" class=\"wp-image-388011\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/devs-01.webp?w=1497&ssl=1 1497w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/devs-01.webp?resize=300%2C127&ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/devs-01.webp?resize=1024%2C434&ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/devs-01.webp?resize=768%2C326&ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" /></figure>\r\n\r\n\r\n\r\n<p>One thing I noticed from the Demographics section is how much tech connects us all. The majority of responses come from the U.S. (26%) but many other countries, including Italy, Germany, France, Estonia, Austria, South Africa and many more, account for the remaining 74%.</p>\r\n\r\n\r\n\r\n<p>I mean, I am working and communicating with you right now, all the way from Nigeria! Isn’t that beautiful, to be able to communicate with people around the world through this wonderful place we call CSS-Tricks? And into the bigger community of developers that keeps it so fun?</p>\r\n\r\n\r\n\r\n<p>I think this is a testament to how much we want to connect. More so,  the State of Devs survey gives us an opportunity to express our pain points on issues surrounding our experiences, workplace environments, quality of health, and even what hobbies we have as developers. And while I say <em>developers</em>, the survey makes it clear it’s more than that. Behind anyone’s face is someone encountering life challenges. We’re all people and people are capable of pure emotion. We are all just <em>human.</em></p>\r\n\r\n\r\n\r\n<blockquote class=\"wp-block-quote is-layout-flow wp-block-quote-is-layout-flow\">\r\n<p>It’s also one of the reasons <a href=\"https://bsky.app/profile/sunkanmifafowora.bsky.social\" rel=\"noopener\">I decided to open a Bluesky account</a>: to <em>connect</em> with more developers.</p>\r\n</blockquote>\r\n\r\n\r\n\r\n<p>I think this survey offers insights into how much we care about ourselves in tech, and how eager we are to solve issues rarely talked about. And the fact that it’s global in nature illustrates how much in common we all have.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"more-women-participated-this-year\">More women participated this year</h3>\r\n\r\n\r\n<figure class=\"wp-block-image size-full\"><img data-recalc-dims=\"1\" decoding=\"async\" width=\"1489\" height=\"550\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/devs-02.webp?resize=1489%2C550&ssl=1\" alt=\"Bar chart breaking down developers by gender. Males are 82%, female are 15%, non-binary and hotlists do not have percentages, but represent 20 of the responses out of more than 7,000.\" class=\"wp-image-388012\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/devs-02.webp?w=1489&ssl=1 1489w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/devs-02.webp?resize=300%2C111&ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/devs-02.webp?resize=1024%2C378&ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/devs-02.webp?resize=768%2C284&ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" /></figure>\r\n\r\n\r\n\r\n<p>From what I noticed, fewer women participated in the 2024 State of JavaScript and State of CSS fewer women (around 6%), while women represented a bigger share in this year’s State of Devs survey. I’d say 15% is still far too low to fairly “represent” an entire key segment of people, but it is certainly encouraging to see a greater slice in this particular survey. We need more women in this male-dominated industry.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"experience-over-talent-on-pay\">Experience over talent</h3>\r\n\r\n\r\n<figure class=\"wp-block-image size-full\"><img data-recalc-dims=\"1\" decoding=\"async\" width=\"1475\" height=\"776\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/devs-03.webp?resize=1475%2C776&ssl=1\" alt=\"Bar chart showing income ranges based on years of experience.\" class=\"wp-image-388013\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/devs-03.webp?w=1475&ssl=1 1475w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/devs-03.webp?resize=300%2C158&ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/devs-03.webp?resize=1024%2C539&ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/devs-03.webp?resize=768%2C404&ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" /></figure>\r\n\r\n\r\n\r\n<p>Contrary to popular opinion, <a href=\"https://hbr.org/2021/02/youre-not-paid-based-on-your-performance\" rel=\"noopener\">personal performance does not usually equate to higher pay</a>, and this is reflected in the results of this survey. It’s more like, the more experienced you are, the more you’re paid. But even that’s not the full story. If you’re new to the field, you still have to do some personal marketing, find and keep a mentor, and a whole bunch of stuff. Cassidy shares some nice insights on this in <a href=\"https://youtu.be/zhFQtbWJFO4\" rel=\"noopener\">a video interview tracing her development career</a>. You should check it out, especially if you’re just starting out.</p>\r\n\r\n\r\n\r\n<p>Notice that the average income for those with 10-14 of experience ($115,833) is on par with those with between 15-29 years of experience ($118,000) and not far from those with 30+ years ($120,401). Experience appears to influence income, but perhaps not to the extent you would think, or else we’d see a wider gap between those with 15 years versus those with more than double the service time.</p>\r\n\r\n\r\n\r\n<p>More than that, notice how income for the most experienced developers (30+ years) is larger on <em>average</em> but the range of how much they make is lower than than those with 10-29 years under their belts. I’m curious what causes that decline. Is it a lack of keeping up with what’s new? Is it ageism? I’m sure there are lots of explanations.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"lessons-i-learned-from-the-stats\">Salary, workplace, and job hunting</h3>\r\n\r\n\r\n<p>I prefer not drill into each and every report. I’m interested in very specific areas that are covered in the survey. And what I take away from the survey is bound to be different than your takeaways, despite numbers being what they are. So, here are a few highlights of what stood out to me personally as I combed through the results.</p>\r\n\r\n\r\n\r\n<p><strong>Your experience, employment status, and company’s employer count <a href=\"https://2025.stateofdevs.com/en-US/career/#years_of_experience\" rel=\"noopener\">seem to directly affect pay</a>. </strong>For example, full-timers report higher salaries than freelancers. I suppose that makes sense, but I doubt it provides the full picture because freelancers freelance for a number of reasons, whether its flexible hours, having more choice to choose their projects, or having personal constraints that limit how much they can work. In some ways, <a href=\"https://ludic.mataroa.blog/blog/ludics-guide-to-getting-software-engineering-jobs/\" rel=\"noopener\">freelancers are able to command higher pay while working less</a>.</p>\r\n\r\n\r\n\r\n<p><strong><a href=\"https://2025.stateofdevs.com/en-US/career/#career_issues\" rel=\"noopener\">Bad management and burnout seem to be the most talked-about</a> issues in the workplace.</strong> Be on guard during interviews, look up reviews about the company you’re about to work for, and make sure there are far fewer complaints than accolades. Make sure you’re not being too worked up during work hours; <a href=\"https://www.ciphr.com/blog/regular-breaks-at-work#:~:text=According%20to%20The%20Wellbeing%20Thesis,a%20more%20sustainable%20work%20routine.\" rel=\"noopener\">breaks are essential for a boost in productivity</a>.</p>\r\n\r\n\r\n\r\n<p><strong><a href=\"https://2025.stateofdevs.com/en-US/career/#discrimination_issues\" rel=\"noopener\">Seventy percent of folks reported <em>no</em> discrimination in the workplace</a>,</strong> which means we’re perhaps doing something right. That said, it’s still disheartening that 30% experience some form of discrimination and lowering that figure is something we ought to aim for. I’m hoping companies — particularly the tech giants in our space — take note of this and enforce laws and policies surrounding this. Still, we can always call out discriminatory behavior and make corrections where necessary. And who’s to say that everyone who answered the survey felt safe sharing that sort of thing? <a href=\"https://www.linkedin.com/pulse/combating-workplace-challenges-silence-enemy-sylvia-lafair-ereuf/\" rel=\"noopener\">Silence can be the enemy of progress.</a></p>\r\n\r\n\r\n\r\n<p><strong>Never get too comfortable in your job.</strong> Although <a href=\"https://2025.stateofdevs.com/en-US/career/#laid_off\" rel=\"noopener\">69% report having never been laid off</a>, I still think that job security is brittle in this space. Always learn, build, and if possible, try to look for other sources of income. Layoffs are <em>still</em> happening, and looking at the news, it’s likely to continue for the foreseeable future, with the <a href=\"https://2025.stateofdevs.com/en-US/career/#laid_off\" rel=\"noopener\">U.S., Australia, and U.K. being leading the way</a>.</p>\r\n\r\n\r\n\r\n<p><strong>One number that jumped off the page for me is that <a href=\"https://2025.stateofdevs.com/en-US/workplace/#job_finding_application_count\" rel=\"noopener\">it takes an average of four applications for most developers to find a new job</a>.</strong> This bamboozles me. I’m looking for a full-time role (yes, I’m available!), and I regularly apply for more than four jobs in a given day. Perhaps I’m doing something wrong, but that’s also not consistent with those in my social and professional circles. I know and see plenty of people who are working hard to find work, and the number of jobs they apply for has to bring that number up. Four applications seems way low, though I don’t have the quantitative proof for it.</p>\r\n\r\n\r\n\r\n<p><strong>Your personal network is still the best way to find a job.</strong> We will always and forever be <em>social animals,</em> and I think that’s why most survey participants say that coworker relationships are the greatest perk of a job. I find this to be true with my work here at CSS-Tricks. I get to collaborate with other like-minded CSS and front-end enthusiasts far and wide. I’ve developed close relationships with the editors and other writers, and that’s something I value more than any other benefits I could get somewhere else.</p>\r\n\r\n\r\n\r\n<p><strong>Compensation is still a top workplace challenge.</strong> JavaScript is still the king of programming (bias alert), taking the top spot as the most popular programming language. I know you’re interested, that CSS came in at third.</p>\r\n\r\n\r\n\r\n<p>To my surprise, <strong>Bluesky is more popular amongst developers than X</strong>. I didn’t realize how much toxicity I’ve been exposed to at X until <a href=\"https://bsky.app/profile/sunkanmifafowora.bsky.social\" rel=\"noopener\">I opened a Bluesky account</a>. I hate saying that the “engagement” is better, or some buzz-worthy thing like that, but I do experience more actual discussions over at Bluesky than I have for a long time at X. And many of you report the same. I hasten to say that Bluesky is a direct replacement for what X (let’s face it, Twitter) used to be, but it seems we at least have a better alternative.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"health-is-wealth\">Health issues</h3>\r\n\r\n\r\n<figure class=\"wp-block-image size-full\"><img data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"1542\" height=\"755\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/devs-04.webp?resize=1542%2C755&ssl=1\" alt=\"Bar chart showing health issues. Poor sleep is 42%, weight is 31%, mental health is 30%, and back pain is 28%.\" class=\"wp-image-388014\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/devs-04.webp?w=1542&ssl=1 1542w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/devs-04.webp?resize=300%2C147&ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/devs-04.webp?resize=1024%2C501&ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/devs-04.webp?resize=768%2C376&ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/devs-04.webp?resize=1536%2C752&ssl=1 1536w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\" /></figure>\r\n\r\n\r\n\r\n<blockquote class=\"wp-block-quote is-layout-flow wp-block-quote-is-layout-flow\">\r\n<p>Without our health, we are nothing. Embrace your body for what it is: your temple. It’s a symbiotic relationship. </p>\r\n\r\n\r\n\r\n<p>— <a href=\"https://www.nnlightsbookheaven.com/post/2018/11/08/without-good-health-youve-got-nothing-going-on-thursdaythoughts-inspiration-health\" rel=\"noopener\"><em>Mrs. N.</em></a></p>\r\n</blockquote>\r\n\r\n\r\n\r\n<p>I’m looking closer at the survey’s results on health because of the sheer number of responses that report health issues. I struggle with issues, like back pains, and that forced me to upgrade my work environment with a proper desk and chair. I tend to code on my bed, and well, <em>it worked</em>. But perhaps it wasn’t the best thing for my physical health.</p>\r\n\r\n\r\n\r\n<p>I know we can fall into the stereotype of people who spend 8-12 hours staring at two big monitors, sitting in a plush gaming chair, while frantically typing away at a mechanical keyboard. You know, the <em><a href=\"https://www.imdb.com/title/tt0113243/\" rel=\"noopener\">Hackers</a></em> stereotype. I know that isn’t an accurate portrayal of who we are, but it’s easy to become that because of how people look at and understand our work.</p>\r\n\r\n\r\n\r\n<p>And if you feel a great deal of pressure to keep up with that image, I think it’s worth getting into a more healthy mindset, one that gets more than a few hours of sleep, prioritizes exercise, maintains a balanced diet, and all those things we know are ultimately good for us. Even though 20% of folks say they have no health issues at all, a whopping 80% struggle with health issues ranging from sleep deprivation to keeping a healthy weight. <strong>You are important and deserve to feel healthy.</strong></p>\r\n\r\n\r\n\r\n<p>Think about your health the way you think about the UI/UX of the websites you design and build. It makes up <em>a part</em> of the design, but <a href=\"https://www.interaction-design.org/literature/article/micro-interactions-ux?srsltid=AfmBOorSVn_A8Vm9_NtDe7YPy6BBOw2VJxG1cMqJzRguxm4Rw3jsNKUE\" rel=\"noopener\">has the crucial role of turning ordinary tasks into enjoyable experiences</a>, which in turn, transforms into an overall beautiful experience for the user.</p>\r\n\r\n\r\n\r\n<p>Your health is the same. Those small parts often overlooked can and will affect the great machine that is your body. <a href=\"https://medium.com/@mikael_55667/how-i-try-to-stay-healthy-as-a-developer-8076f3ff0cde\" rel=\"noopener\">Here’s a small list of life improvements you can make right now</a>.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"closing-thoughts\">Closing thoughts</h3>\r\n\r\n\r\n<p>Diversity, representation, experience, income, and health. That’s what stood out to me in the 2025 State of Devs survey results. I see positive trends in the numbers, but also a huge amount of opportunity to be better, particularly when it comes being more inclusive of women, providing ample chances for upward mobility based on experience, and how we treat ourselves.</p>\r\n\r\n\r\n\r\n<p><a href=\"https://2025.stateofdevs.com/en-US/\" rel=\"noopener\">Please check out the results</a> and see what stands out to you. What do you notice? Is there anything you are able to take away from the survey that you can use in your own work or life? I’d love to know!</p>\r\n<hr />\r\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/what-i-took-from-the-state-of-dev-2025-survey/\">What I Took From the State of Dev 2025 Survey</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&utm_source=css-tricks.com&utm_campaign=family_&utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
    "createdAt": "2025-07-16T12:54:14.000+00:00",
    "link": "https://css-tricks.com/what-i-took-from-the-state-of-dev-2025-survey/",
    "author": "",
    "site": {
      "id": "4",
      "url": "https://css-tricks.com/category/articles/feed",
      "name": "cssTrick"
    }
  },
  {
    "title": "What I Took From the State of Dev 2025 Survey",
    "content": "<p>State of Devs 2025 survey results are out! While the survey isn’t directly related to the <em>code</em> part of what we do for work, I do love the focus <a href=\"https://2025.stateofdevs.com/en-US/\" rel=\"noopener\">Devographics</a> took <a href=\"https://survey.devographics.com/en-US\" rel=\"noopener\">ever since its inception in 2020</a>. And this year it brought us some rather <em>interesting</em> results through the attendance of 8,717 developers, lots of data, and even more useful insights that I think everyone can look up and learn from.</p>\r\n\r\n\r\n\r\n<p>I decided to look at the survey results with an analytical mindset, but wound up pouring my heart out because, well, I am a developer, and the entire survey affects me in a way. I have some personal opinions, it turns out. So, sit back, relax, and indulge me for a bit as we look at a few choice pieces of the survey.</p>\r\n\r\n\r\n\r\n<p>And it’s worth noting that this is only <em>part one</em> of the survey results. A second data dump will be published later and I’m interested to poke at those numbers, too.</p>\r\n\r\n\r\n\r\n<span id=\"more-387980\"></span>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"an-opportunity-to-connect\">An opportunity to connect</h3>\r\n\r\n\r\n<figure class=\"wp-block-image size-full\"><img data-recalc-dims=\"1\" fetchpriority=\"high\" decoding=\"async\" width=\"1497\" height=\"635\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/devs-01.webp?resize=1497%2C635&ssl=1\" alt=\"Country or Region bar chart. USA is 26%, UK is 9%, Germany is 8%, and France is at 6%.\" class=\"wp-image-388011\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/devs-01.webp?w=1497&ssl=1 1497w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/devs-01.webp?resize=300%2C127&ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/devs-01.webp?resize=1024%2C434&ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/devs-01.webp?resize=768%2C326&ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" /></figure>\r\n\r\n\r\n\r\n<p>One thing I noticed from the Demographics section is how much tech connects us all. The majority of responses come from the U.S. (26%) but many other countries, including Italy, Germany, France, Estonia, Austria, South Africa and many more, account for the remaining 74%.</p>\r\n\r\n\r\n\r\n<p>I mean, I am working and communicating with you right now, all the way from Nigeria! Isn’t that beautiful, to be able to communicate with people around the world through this wonderful place we call CSS-Tricks? And into the bigger community of developers that keeps it so fun?</p>\r\n\r\n\r\n\r\n<p>I think this is a testament to how much we want to connect. More so,  the State of Devs survey gives us an opportunity to express our pain points on issues surrounding our experiences, workplace environments, quality of health, and even what hobbies we have as developers. And while I say <em>developers</em>, the survey makes it clear it’s more than that. Behind anyone’s face is someone encountering life challenges. We’re all people and people are capable of pure emotion. We are all just <em>human.</em></p>\r\n\r\n\r\n\r\n<blockquote class=\"wp-block-quote is-layout-flow wp-block-quote-is-layout-flow\">\r\n<p>It’s also one of the reasons <a href=\"https://bsky.app/profile/sunkanmifafowora.bsky.social\" rel=\"noopener\">I decided to open a Bluesky account</a>: to <em>connect</em> with more developers.</p>\r\n</blockquote>\r\n\r\n\r\n\r\n<p>I think this survey offers insights into how much we care about ourselves in tech, and how eager we are to solve issues rarely talked about. And the fact that it’s global in nature illustrates how much in common we all have.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"more-women-participated-this-year\">More women participated this year</h3>\r\n\r\n\r\n<figure class=\"wp-block-image size-full\"><img data-recalc-dims=\"1\" decoding=\"async\" width=\"1489\" height=\"550\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/devs-02.webp?resize=1489%2C550&ssl=1\" alt=\"Bar chart breaking down developers by gender. Males are 82%, female are 15%, non-binary and hotlists do not have percentages, but represent 20 of the responses out of more than 7,000.\" class=\"wp-image-388012\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/devs-02.webp?w=1489&ssl=1 1489w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/devs-02.webp?resize=300%2C111&ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/devs-02.webp?resize=1024%2C378&ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/devs-02.webp?resize=768%2C284&ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" /></figure>\r\n\r\n\r\n\r\n<p>From what I noticed, fewer women participated in the 2024 State of JavaScript and State of CSS fewer women (around 6%), while women represented a bigger share in this year’s State of Devs survey. I’d say 15% is still far too low to fairly “represent” an entire key segment of people, but it is certainly encouraging to see a greater slice in this particular survey. We need more women in this male-dominated industry.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"experience-over-talent-on-pay\">Experience over talent</h3>\r\n\r\n\r\n<figure class=\"wp-block-image size-full\"><img data-recalc-dims=\"1\" decoding=\"async\" width=\"1475\" height=\"776\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/devs-03.webp?resize=1475%2C776&ssl=1\" alt=\"Bar chart showing income ranges based on years of experience.\" class=\"wp-image-388013\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/devs-03.webp?w=1475&ssl=1 1475w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/devs-03.webp?resize=300%2C158&ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/devs-03.webp?resize=1024%2C539&ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/devs-03.webp?resize=768%2C404&ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" /></figure>\r\n\r\n\r\n\r\n<p>Contrary to popular opinion, <a href=\"https://hbr.org/2021/02/youre-not-paid-based-on-your-performance\" rel=\"noopener\">personal performance does not usually equate to higher pay</a>, and this is reflected in the results of this survey. It’s more like, the more experienced you are, the more you’re paid. But even that’s not the full story. If you’re new to the field, you still have to do some personal marketing, find and keep a mentor, and a whole bunch of stuff. Cassidy shares some nice insights on this in <a href=\"https://youtu.be/zhFQtbWJFO4\" rel=\"noopener\">a video interview tracing her development career</a>. You should check it out, especially if you’re just starting out.</p>\r\n\r\n\r\n\r\n<p>Notice that the average income for those with 10-14 of experience ($115,833) is on par with those with between 15-29 years of experience ($118,000) and not far from those with 30+ years ($120,401). Experience appears to influence income, but perhaps not to the extent you would think, or else we’d see a wider gap between those with 15 years versus those with more than double the service time.</p>\r\n\r\n\r\n\r\n<p>More than that, notice how income for the most experienced developers (30+ years) is larger on <em>average</em> but the range of how much they make is lower than than those with 10-29 years under their belts. I’m curious what causes that decline. Is it a lack of keeping up with what’s new? Is it ageism? I’m sure there are lots of explanations.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"lessons-i-learned-from-the-stats\">Salary, workplace, and job hunting</h3>\r\n\r\n\r\n<p>I prefer not drill into each and every report. I’m interested in very specific areas that are covered in the survey. And what I take away from the survey is bound to be different than your takeaways, despite numbers being what they are. So, here are a few highlights of what stood out to me personally as I combed through the results.</p>\r\n\r\n\r\n\r\n<p><strong>Your experience, employment status, and company’s employer count <a href=\"https://2025.stateofdevs.com/en-US/career/#years_of_experience\" rel=\"noopener\">seem to directly affect pay</a>. </strong>For example, full-timers report higher salaries than freelancers. I suppose that makes sense, but I doubt it provides the full picture because freelancers freelance for a number of reasons, whether its flexible hours, having more choice to choose their projects, or having personal constraints that limit how much they can work. In some ways, <a href=\"https://ludic.mataroa.blog/blog/ludics-guide-to-getting-software-engineering-jobs/\" rel=\"noopener\">freelancers are able to command higher pay while working less</a>.</p>\r\n\r\n\r\n\r\n<p><strong><a href=\"https://2025.stateofdevs.com/en-US/career/#career_issues\" rel=\"noopener\">Bad management and burnout seem to be the most talked-about</a> issues in the workplace.</strong> Be on guard during interviews, look up reviews about the company you’re about to work for, and make sure there are far fewer complaints than accolades. Make sure you’re not being too worked up during work hours; <a href=\"https://www.ciphr.com/blog/regular-breaks-at-work#:~:text=According%20to%20The%20Wellbeing%20Thesis,a%20more%20sustainable%20work%20routine.\" rel=\"noopener\">breaks are essential for a boost in productivity</a>.</p>\r\n\r\n\r\n\r\n<p><strong><a href=\"https://2025.stateofdevs.com/en-US/career/#discrimination_issues\" rel=\"noopener\">Seventy percent of folks reported <em>no</em> discrimination in the workplace</a>,</strong> which means we’re perhaps doing something right. That said, it’s still disheartening that 30% experience some form of discrimination and lowering that figure is something we ought to aim for. I’m hoping companies — particularly the tech giants in our space — take note of this and enforce laws and policies surrounding this. Still, we can always call out discriminatory behavior and make corrections where necessary. And who’s to say that everyone who answered the survey felt safe sharing that sort of thing? <a href=\"https://www.linkedin.com/pulse/combating-workplace-challenges-silence-enemy-sylvia-lafair-ereuf/\" rel=\"noopener\">Silence can be the enemy of progress.</a></p>\r\n\r\n\r\n\r\n<p><strong>Never get too comfortable in your job.</strong> Although <a href=\"https://2025.stateofdevs.com/en-US/career/#laid_off\" rel=\"noopener\">69% report having never been laid off</a>, I still think that job security is brittle in this space. Always learn, build, and if possible, try to look for other sources of income. Layoffs are <em>still</em> happening, and looking at the news, it’s likely to continue for the foreseeable future, with the <a href=\"https://2025.stateofdevs.com/en-US/career/#laid_off\" rel=\"noopener\">U.S., Australia, and U.K. being leading the way</a>.</p>\r\n\r\n\r\n\r\n<p><strong>One number that jumped off the page for me is that <a href=\"https://2025.stateofdevs.com/en-US/workplace/#job_finding_application_count\" rel=\"noopener\">it takes an average of four applications for most developers to find a new job</a>.</strong> This bamboozles me. I’m looking for a full-time role (yes, I’m available!), and I regularly apply for more than four jobs in a given day. Perhaps I’m doing something wrong, but that’s also not consistent with those in my social and professional circles. I know and see plenty of people who are working hard to find work, and the number of jobs they apply for has to bring that number up. Four applications seems way low, though I don’t have the quantitative proof for it.</p>\r\n\r\n\r\n\r\n<p><strong>Your personal network is still the best way to find a job.</strong> We will always and forever be <em>social animals,</em> and I think that’s why most survey participants say that coworker relationships are the greatest perk of a job. I find this to be true with my work here at CSS-Tricks. I get to collaborate with other like-minded CSS and front-end enthusiasts far and wide. I’ve developed close relationships with the editors and other writers, and that’s something I value more than any other benefits I could get somewhere else.</p>\r\n\r\n\r\n\r\n<p><strong>Compensation is still a top workplace challenge.</strong> JavaScript is still the king of programming (bias alert), taking the top spot as the most popular programming language. I know you’re interested, that CSS came in at third.</p>\r\n\r\n\r\n\r\n<p>To my surprise, <strong>Bluesky is more popular amongst developers than X</strong>. I didn’t realize how much toxicity I’ve been exposed to at X until <a href=\"https://bsky.app/profile/sunkanmifafowora.bsky.social\" rel=\"noopener\">I opened a Bluesky account</a>. I hate saying that the “engagement” is better, or some buzz-worthy thing like that, but I do experience more actual discussions over at Bluesky than I have for a long time at X. And many of you report the same. I hasten to say that Bluesky is a direct replacement for what X (let’s face it, Twitter) used to be, but it seems we at least have a better alternative.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"health-is-wealth\">Health issues</h3>\r\n\r\n\r\n<figure class=\"wp-block-image size-full\"><img data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"1542\" height=\"755\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/devs-04.webp?resize=1542%2C755&ssl=1\" alt=\"Bar chart showing health issues. Poor sleep is 42%, weight is 31%, mental health is 30%, and back pain is 28%.\" class=\"wp-image-388014\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/devs-04.webp?w=1542&ssl=1 1542w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/devs-04.webp?resize=300%2C147&ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/devs-04.webp?resize=1024%2C501&ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/devs-04.webp?resize=768%2C376&ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/devs-04.webp?resize=1536%2C752&ssl=1 1536w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\" /></figure>\r\n\r\n\r\n\r\n<blockquote class=\"wp-block-quote is-layout-flow wp-block-quote-is-layout-flow\">\r\n<p>Without our health, we are nothing. Embrace your body for what it is: your temple. It’s a symbiotic relationship. </p>\r\n\r\n\r\n\r\n<p>— <a href=\"https://www.nnlightsbookheaven.com/post/2018/11/08/without-good-health-youve-got-nothing-going-on-thursdaythoughts-inspiration-health\" rel=\"noopener\"><em>Mrs. N.</em></a></p>\r\n</blockquote>\r\n\r\n\r\n\r\n<p>I’m looking closer at the survey’s results on health because of the sheer number of responses that report health issues. I struggle with issues, like back pains, and that forced me to upgrade my work environment with a proper desk and chair. I tend to code on my bed, and well, <em>it worked</em>. But perhaps it wasn’t the best thing for my physical health.</p>\r\n\r\n\r\n\r\n<p>I know we can fall into the stereotype of people who spend 8-12 hours staring at two big monitors, sitting in a plush gaming chair, while frantically typing away at a mechanical keyboard. You know, the <em><a href=\"https://www.imdb.com/title/tt0113243/\" rel=\"noopener\">Hackers</a></em> stereotype. I know that isn’t an accurate portrayal of who we are, but it’s easy to become that because of how people look at and understand our work.</p>\r\n\r\n\r\n\r\n<p>And if you feel a great deal of pressure to keep up with that image, I think it’s worth getting into a more healthy mindset, one that gets more than a few hours of sleep, prioritizes exercise, maintains a balanced diet, and all those things we know are ultimately good for us. Even though 20% of folks say they have no health issues at all, a whopping 80% struggle with health issues ranging from sleep deprivation to keeping a healthy weight. <strong>You are important and deserve to feel healthy.</strong></p>\r\n\r\n\r\n\r\n<p>Think about your health the way you think about the UI/UX of the websites you design and build. It makes up <em>a part</em> of the design, but <a href=\"https://www.interaction-design.org/literature/article/micro-interactions-ux?srsltid=AfmBOorSVn_A8Vm9_NtDe7YPy6BBOw2VJxG1cMqJzRguxm4Rw3jsNKUE\" rel=\"noopener\">has the crucial role of turning ordinary tasks into enjoyable experiences</a>, which in turn, transforms into an overall beautiful experience for the user.</p>\r\n\r\n\r\n\r\n<p>Your health is the same. Those small parts often overlooked can and will affect the great machine that is your body. <a href=\"https://medium.com/@mikael_55667/how-i-try-to-stay-healthy-as-a-developer-8076f3ff0cde\" rel=\"noopener\">Here’s a small list of life improvements you can make right now</a>.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"closing-thoughts\">Closing thoughts</h3>\r\n\r\n\r\n<p>Diversity, representation, experience, income, and health. That’s what stood out to me in the 2025 State of Devs survey results. I see positive trends in the numbers, but also a huge amount of opportunity to be better, particularly when it comes being more inclusive of women, providing ample chances for upward mobility based on experience, and how we treat ourselves.</p>\r\n\r\n\r\n\r\n<p><a href=\"https://2025.stateofdevs.com/en-US/\" rel=\"noopener\">Please check out the results</a> and see what stands out to you. What do you notice? Is there anything you are able to take away from the survey that you can use in your own work or life? I’d love to know!</p>\r\n<hr />\r\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/what-i-took-from-the-state-of-dev-2025-survey/\">What I Took From the State of Dev 2025 Survey</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&utm_source=css-tricks.com&utm_campaign=family_&utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
    "createdAt": "2025-07-16T12:54:14.000+00:00",
    "link": "https://css-tricks.com/what-i-took-from-the-state-of-dev-2025-survey/",
    "author": "",
    "site": {
      "id": "5",
      "url": "https://css-tricks.com/category/articles/feed",
      "name": "cssTrick"
    }
  },
  {
    "title": "간략한 자바스크립트 역사",
    "content": "<blockquote><p>글 링크: <a href=\"https://roy-jung.github.io/250701-history-of-js/\">https://roy-jung.github.io/250701-history-of-js</a></p><div class=\"captioned-image-container\"><figure><a class=\"image-link image2 is-viewable-img\" target=\"_blank\" href=\"https://substackcdn.com/image/fetch/$s_!o_s_!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F114c73ac-3254-4818-877e-bf1e32048e37_1200x900.png\" data-component-name=\"Image2ToDOM\"><div class=\"image2-inset\"><picture><source type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/$s_!o_s_!,w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F114c73ac-3254-4818-877e-bf1e32048e37_1200x900.png 424w, https://substackcdn.com/image/fetch/$s_!o_s_!,w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F114c73ac-3254-4818-877e-bf1e32048e37_1200x900.png 848w, https://substackcdn.com/image/fetch/$s_!o_s_!,w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F114c73ac-3254-4818-877e-bf1e32048e37_1200x900.png 1272w, https://substackcdn.com/image/fetch/$s_!o_s_!,w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F114c73ac-3254-4818-877e-bf1e32048e37_1200x900.png 1456w\" sizes=\"100vw\"><img src=\"https://substackcdn.com/image/fetch/$s_!o_s_!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F114c73ac-3254-4818-877e-bf1e32048e37_1200x900.png\" width=\"1200\" height=\"900\" data-attrs=\"{\"src\":\"https://substack-post-media.s3.amazonaws.com/public/images/114c73ac-3254-4818-877e-bf1e32048e37_1200x900.png\",\"srcNoWatermark\":null,\"fullscreen\":null,\"imageSize\":null,\"height\":900,\"width\":1200,\"resizeWidth\":null,\"bytes\":617332,\"alt\":null,\"title\":null,\"type\":\"image/png\",\"href\":null,\"belowTheFold\":false,\"topImage\":true,\"internalRedirect\":\"https://kofearticle.substack.com/i/168133574?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F114c73ac-3254-4818-877e-bf1e32048e37_1200x900.png\",\"isProcessing\":false,\"align\":null,\"offset\":false}\" class=\"sizing-normal\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/$s_!o_s_!,w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F114c73ac-3254-4818-877e-bf1e32048e37_1200x900.png 424w, https://substackcdn.com/image/fetch/$s_!o_s_!,w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F114c73ac-3254-4818-877e-bf1e32048e37_1200x900.png 848w, https://substackcdn.com/image/fetch/$s_!o_s_!,w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F114c73ac-3254-4818-877e-bf1e32048e37_1200x900.png 1272w, https://substackcdn.com/image/fetch/$s_!o_s_!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F114c73ac-3254-4818-877e-bf1e32048e37_1200x900.png 1456w\" sizes=\"100vw\" fetchpriority=\"high\"></picture><div class=\"image-link-expand\"><div class=\"pencraft pc-display-flex pc-gap-8 pc-reset\"><div class=\"pencraft pc-reset icon-container restack-image\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-refresh-cw\"><path d=\"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\"></path><path d=\"M21 3v5h-5\"></path><path d=\"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\"></path><path d=\"M8 16H3v5\"></path></svg></div><div class=\"pencraft pc-reset icon-container view-image\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-maximize2\"><polyline points=\"15 3 21 3 21 9\"></polyline><polyline points=\"9 21 3 21 3 15\"></polyline><line x1=\"21\" x2=\"14\" y1=\"3\" y2=\"10\"></line><line x1=\"3\" x2=\"10\" y1=\"21\" y2=\"14\"></line></svg></div></div></div></div></a></figure></div></blockquote><h2>소개</h2><p>이번에 소개해드릴 글은 자바스크립트의 30년 역사를 한눈에 볼 수 있는 특별한 콘텐츠입니다. 1995년 Brendan Eich가 단 10일 만에 만들어낸 '이상한 스크립트 언어'가 어떻게 오늘날 세계에서 가장 인기 있는 프로그래밍 언어로 성장했는지, 그 여정을 1995년부터 2025년까지 시간순으로 따라가 보실 수 있습니다. Netscape Navigator의 등장부터 React, Node.js의 탄생, 그리고 최근 Deno 2.0 출시까지, 웹 개발 생태계를 뒤흔든 주요 사건들이 생생하게 펼쳐집니다.</p><p>특히 이 글에서는 단순한 연대기를 넘어서 각 시대의 맥락과 의미를 깊이 있게 다루고 있습니다. 브라우저 전쟁의 치열했던 순간들, jQuery가 개발자들의 삶을 어떻게 바꿨는지, 그리고 SpaceX가 우주선에 자바스크립트를 사용한 이야기까지 - 자바스크립트 개발자라면 분명 재미있게 읽으실 수 있는 흥미진진한 에피소드들로 가득합니다. 자바스크립트가 걸어온 길을 통해 앞으로의 웹 개발 트렌드까지 엿볼 수 있는 인사이트를 얻으실 수 있을 것입니다.</p>",
    "createdAt": "2025-07-15T00:30:23.000+00:00",
    "link": "https://kofearticle.substack.com/p/12d",
    "author": "",
    "site": {
      "id": "3",
      "url": "https://kofearticle.substack.com/feed",
      "name": "kofearticle"
    }
  },
  {
    "title": "Setting Line Length in CSS (and Fitting Text to a Container)",
    "content": "<p>First, what is line length? <dfn>Line length</dfn> is the length of a container that holds a body of multi-line text. “Multi-line” is the key part here, because text becomes less readable if the beginning of a line of text is too far away from the end of the prior line of text. This causes users to reread lines by mistake, and generally get lost while reading.</p>\r\n\r\n\r\n\r\n<p>Luckily, the Web Content Accessibility Guidelines (WCAG) gives us a pretty hard rule to follow: <a href=\"https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-visual-presentation\" rel=\"noopener\">no more than 80 characters on a line</a> (40 if the language is Chinese, Japanese, or Korean), which is super easy to implement using character (<code>ch</code>) units:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">width: 80ch;</code></pre>\r\n\r\n\r\n\r\n<p>The width of <code>1ch</code> is equal to the width of the number <code>0</code> in your chosen font, so the exact width depends on the font.</p>\r\n\r\n\r\n\r\n<span id=\"more-387679\"></span>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"setting-the-optimal-line-length\">Setting the <em>optimal</em> line length</h3>\r\n\r\n\r\n<p>Just because you’re allowed up to 80 characters on a line, it doesn’t mean that you <em>have</em> to aim for that number. A study by the <a href=\"https://baymard.com/blog/line-length-readability\" rel=\"noopener\">Baymard Institute</a> revealed that a line length of 50-75 characters is the optimal length — this takes into consideration that smaller line lengths mean more lines and, therefore, more opportunities for users to make reading mistakes.</p>\r\n\r\n\r\n\r\n<p>That being said, we also have responsive design to think about, so setting a minimum width (e.g., <code>min-width: 50ch</code>) isn’t a good idea because you’re unlikely to fit 50 characters on a line with, for example, a screen/window size that is 320 pixels wide. So, there’s a bit of nuance involved, and the best way to handle that is by combining the <a href=\"https://css-tricks.com/almanac/functions/c/clamp/\"><code>clamp()</code></a> and <a href=\"https://css-tricks.com/almanac/functions/m/min/\"><code>min()</code></a> functions:</p>\r\n\r\n\r\n\r\n<ul class=\"wp-block-list\">\r\n<li><strong><code>clamp()</code>:</strong> Set a fluid value that’s relative to a container using percentage, viewport, or container query units, but with minimum and maximum constraints.</li>\r\n\r\n\r\n\r\n<li><strong><code>min()</code>:</strong> Set the smallest value from a list of comma-separated values.</li>\r\n</ul>\r\n\r\n\r\n\r\n<p>Let’s start with <code>min()</code>. One of the arguments is <code>93.75vw</code>. Assuming that the container extends across the whole viewport, this’d equal <code>300px</code> when the viewport width is <code>320px</code> (allowing for <code>20px</code> of spacing to be distributed as you see fit) and <code>1350px</code> when the viewport width is <code>1440px</code>. However, for as long as the other argument (<code>50ch</code>) is the smallest of the two values, that’s the value that <code>min()</code> will resolve to.</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">min(93.75vw, 50ch);</code></pre>\r\n\r\n\r\n\r\n<p>Next is <code>clamp()</code>, which accepts three arguments in the following order: the minimum, preferred, and maximum values. This is how we’ll set the line length.</p>\r\n\r\n\r\n\r\n<p>For the minimum, you’d plug in your <code>min()</code> function, which sets the <code>50ch</code> line length but only conditionally. For the maximum, I suggest <code>75ch</code>, as mentioned before. The preferred value is totally up to you — this will be the width of your container when not hitting the minimum or maximum.</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">width: clamp(min(93.75vw, 50ch), 70vw, 75ch);</code></pre>\r\n\r\n\r\n\r\n<p>In addition, you can use <a href=\"https://css-tricks.com/almanac/functions/m/min/\"><code>min()</code></a>, <a href=\"https://css-tricks.com/almanac/functions/m/max/\"><code>max()</code></a>, and <a href=\"https://css-tricks.com/a-complete-guide-to-calc-in-css/\"><code>calc()</code></a> in any of those arguments to add further nuance.</p>\r\n\r\n\r\n\r\n<p>If the container feels too narrow, then the <a href=\"https://css-tricks.com/almanac/properties/f/font-size/\"><code>font-size</code></a> might be too large. If it feels too wide, then the <code>font-size</code> might be too small.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"fit-text-to-container-with-javascript-\">Fit text to container (with JavaScript)</h3>\r\n\r\n\r\n<p>You know that design trend where text is made to fit the width of a container? Typically, to utilize as much of the available space as possible? You’ll often see it applied to headings on marketing pages and blog posts. Well, <a href=\"https://css-tricks.com/fitting-text-to-a-container/\">Chris wrote about it</a> back in 2018, rounding up several ways to achieve the effect with JavaScript or jQuery, unfortunately with limitations. However, the ending reveals that you can just use SVG as long as you know the <code>viewBox</code> values, and I actually have a trick for getting them.</p>\r\n\r\n\r\n\r\n<p>Although it still requires 3-5 lines of JavaScript, it’s the shortest method I’ve found. It also slides into HTML and CSS perfectly, particularly since the SVG inherits many CSS properties (including the color, thanks to <code>fill: currentColor</code>):</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_XJbYjpJ\" src=\"//codepen.io/anon/embed/preview/XJbYjpJ?height=450&theme-id=1&slug-hash=XJbYjpJ&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed XJbYjpJ\" title=\"CodePen Embed XJbYjpJ\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\"><h1 class=\"container\">\r\n  <svg>\r\n    <text>Fit text to container</text>\r\n  </svg>\r\n</h1></code></pre>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">h1.container {\r\n  /* Container size */\r\n  width: 100%;\r\n\r\n  /* Type styles (<text> will inherit most of them) */\r\n  font: 900 1em system-ui;\r\n  color: hsl(43 74% 3%);\r\n\r\n  text {\r\n    /*\r\n      We have to use fill: instead of color: here\r\n      But we can use currentColor to inherit the color\r\n    */\r\n    fill: currentColor;\r\n  }\r\n}</code></pre>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">/* Select all SVGs */\r\nconst svg = document.querySelectorAll(\"svg\");\r\n\r\n/* Loop all SVGs */\r\nsvg.forEach(element => {\r\n  /* Get bounding box of <text> element */\r\n  const bbox = element.querySelector(\"text\").getBBox();\r\n  /* Apply bounding box values to SVG element as viewBox */\r\n  element.setAttribute(\"viewBox\", [bbox.x, bbox.y, bbox.width, bbox.height].join(\" \"));\r\n});</code></pre>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"fit-text-to-container-pure-css-\">Fit text to container (pure CSS)</h3>\r\n\r\n\r\n<p>If you’re hell-bent on a pure-CSS method, you <em>are</em> in luck. However, despite the insane things that we can do with CSS these days, <a href=\"https://kizu.dev/fit-to-width/\" rel=\"noopener\">Roman Komarov’s fit-to-width hack</a> is a bit complicated (albeit rather impressive). Here’s the gist of it:</p>\r\n\r\n\r\n\r\n<ul class=\"wp-block-list\">\r\n<li>The text is duplicated a couple of times (although hidden accessibly with <code>aria-hidden</code> and hidden literally with <code>visibility: hidden</code>) so that we can do math with the hidden ones, and then apply the result to the visible one.</li>\r\n\r\n\r\n\r\n<li>Using container queries/container query units, the math involves dividing the inline size of the text by the inline size of the container to get a scaling factor, which we then use on the visible text’s <code>font-size</code> to make it grow or shrink.</li>\r\n\r\n\r\n\r\n<li>To make the scaling factor unitless, we use the <a href=\"https://dev.to/janeori/css-type-casting-to-numeric-tanatan2-scalars-582j\" rel=\"noopener\"><code>tan(atan2())</code> type-casting trick</a>.</li>\r\n\r\n\r\n\r\n<li>Certain custom properties must be registered using the <a href=\"https://css-tricks.com/almanac/rules/p/property/\"><code>@property</code></a> at-rule (otherwise they don’t work as intended).</li>\r\n\r\n\r\n\r\n<li>The final <code>font-size</code> value utilizes <code>clamp()</code> to set minimum and maximum font sizes, but these are optional.</li>\r\n</ul>\r\n\r\n\r\n\r\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\"><span class=\"text-fit\">\r\n  <span>\r\n    <span class=\"text-fit\">\r\n      <span><span>fit-to-width text</span></span>\r\n      <span aria-hidden=\"true\">fit-to-width text</span>\r\n    </span>\r\n  </span>\r\n  <span aria-hidden=\"true\">fit-to-width text</span>\r\n</span></code></pre>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.text-fit {\r\n  display: flex;\r\n  container-type: inline-size;\r\n\r\n  --captured-length: initial;\r\n  --support-sentinel: var(--captured-length, 9999px);\r\n\r\n  & > [aria-hidden] {\r\n    visibility: hidden;\r\n  }\r\n\r\n  & > :not([aria-hidden]) {\r\n    flex-grow: 1;\r\n    container-type: inline-size;\r\n\r\n    --captured-length: 100cqi;\r\n    --available-space: var(--captured-length);\r\n\r\n    & > * {\r\n      --support-sentinel: inherit;\r\n      --captured-length: 100cqi;\r\n      --ratio: tan(\r\n        atan2(\r\n          var(--available-space),\r\n          var(--available-space) - var(--captured-length)\r\n        )\r\n      );\r\n      --font-size: clamp(\r\n        1em,\r\n        1em * var(--ratio),\r\n        var(--max-font-size, infinity * 1px) - var(--support-sentinel)\r\n      );\r\n      inline-size: var(--available-space);\r\n\r\n      &:not(.text-fit) {\r\n        display: block;\r\n        font-size: var(--font-size);\r\n\r\n        @container (inline-size > 0) {\r\n          white-space: nowrap;\r\n        }\r\n      }\r\n\r\n      /* Necessary for variable fonts that use optical sizing */\r\n      &.text-fit {\r\n        --captured-length2: var(--font-size);\r\n        font-variation-settings: \"opsz\" tan(atan2(var(--captured-length2), 1px));\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@property --captured-length {\r\n  syntax: \"<length>\";\r\n  initial-value: 0px;\r\n  inherits: true;\r\n}\r\n\r\n@property --captured-length2 {\r\n  syntax: \"<length>\";\r\n  initial-value: 0px;\r\n  inherits: true;\r\n}</code></pre>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_GgJPVWa\" src=\"//codepen.io/anon/embed/preview/GgJPVWa?height=450&theme-id=1&slug-hash=GgJPVWa&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed GgJPVWa\" title=\"CodePen Embed GgJPVWa\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n<h4 class=\"wp-block-heading\" id=\"watch-for-new-text-grow-text-shrink-properties\">Watch for new <code>text-grow</code>/<code>text-shrink</code> properties</h4>\r\n\r\n\r\n<p>To make fitting text to a container possible in just <em>one</em> line of CSS, <a href=\"https://github.com/w3c/csswg-drafts/issues/2528\" rel=\"noopener\">a number of solutions have been discussed</a>. The favored solution seems to be two new <a href=\"https://github.com/explainers-by-googlers/css-fit-text/blob/main/README.md#potential-solution\" rel=\"noopener\"><code>text-grow</code> and <code>text-shrink</code> properties</a>. Personally, I don’t think we need two different properties. In fact, I prefer the simpler alternative, <a href=\"https://github.com/explainers-by-googlers/css-fit-text/blob/main/README.md#considered-alternatives\" rel=\"noopener\"><code>font-size: fit-width</code></a>, but since <code>text-grow</code> and <code>text-shrink</code> are already on the table (<a href=\"https://groups.google.com/a/chromium.org/g/blink-dev/c/I3aG24t4bwI/m/xLBLyAJKDwAJ\" rel=\"noopener\">Chrome intends to prototype</a> and you can <a href=\"https://chromestatus.com/feature/5104141688635392?gate=5084590997504000\" rel=\"noopener\">track it</a>), let’s take a look at how they could work.</p>\r\n\r\n\r\n\r\n<p>The first thing that you need to know is that, as proposed, the <code>text-grow</code> and <code>text-shrink</code> properties can apply to multiple lines of wrapped text within a container, and that’s huge because we can’t do that with my JavaScript technique or Roman’s CSS technique (where each line needs to have its own container).</p>\r\n\r\n\r\n\r\n<p>Both have the same syntax, and you’ll need to use both if you want to allow both growing <em>and</em> shrinking:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">text-grow: <fit-target> <fit-method>? <length>?;\r\ntext-shrink: <fit-target> <fit-method>? <length>?;</code></pre>\r\n\r\n\r\n\r\n<ul class=\"wp-block-list\">\r\n<li><strong><code><fit-target></code></strong>\r\n<ul class=\"wp-block-list\">\r\n<li><code>per-line</code>: For <code>text-grow</code>, lines of text shorter than the container will grow to fit it. For <code>text-shrink</code>, lines of text <em>longer</em> than the container will <em>shrink</em> to fit it.</li>\r\n\r\n\r\n\r\n<li><code>consistent</code>: For <code>text-grow</code>, the shortest line will grow to fit the container while all other lines grow by the same scaling factor. For <code>text-shrink</code>, the <em>longest</em> line will <em>shrink</em> to fit the container while all other lines shrink by the same scaling factor.</li>\r\n</ul>\r\n</li>\r\n\r\n\r\n\r\n<li><strong><code><fit-method></code></strong> (optional)\r\n<ul class=\"wp-block-list\">\r\n<li><code>scale</code>: Scale the glyphs instead of changing the <code>font-size</code>.</li>\r\n\r\n\r\n\r\n<li><code>scale-inline</code>: Scale the glyphs instead of changing the <code>font-size</code>, but only horizontally.</li>\r\n\r\n\r\n\r\n<li><code>font-size</code>: Grow or shrink the font size accordingly. (I don’t know what the default value would be, but I imagine this would be it.)</li>\r\n\r\n\r\n\r\n<li><code>letter-spacing</code>: The letter spacing will grow/shrink instead of the <code>font-size</code>.</li>\r\n</ul>\r\n</li>\r\n\r\n\r\n\r\n<li><strong><code><length></code></strong> (optional): The maximum font size for <code>text-grow</code> or minimum font size for <code>text-shrink</code>.</li>\r\n</ul>\r\n\r\n\r\n\r\n<p>Again, I think I prefer the <code>font-size: fit-width</code> approach as this would grow and shrink all lines to fit the container in just one line of CSS. The above proposal does way more than I want it to, and there are already <a href=\"https://github.com/explainers-by-googlers/css-fit-text/blob/main/README.md#detailed-design-discussion\" rel=\"noopener\">a number of roadblocks</a> to overcome (many of which are accessibility-related). That’s just me, though, and I’d be curious to know your thoughts in the comments.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"conclusion\">Conclusion</h3>\r\n\r\n\r\n<p>It’s easier to set line length with CSS now than it was a few years ago. Now we have character units, <code>clamp()</code> and <code>min()</code> (and <code>max()</code> and <code>calc()</code> if you wanted to throw those in too), and wacky things that we can do with SVGs and CSS to fit text to a container. It does look like <code>text-grow</code> and <code>text-shrink</code> (or an equivalent solution) are what we truly need though, at least in some scenarios.</p>\r\n\r\n\r\n\r\n<p>Until we get there, this is a good time to weigh-in, which you can do by adding your feedback, tests, and use-cases to the <a href=\"https://github.com/w3c/csswg-drafts/issues/2528\" rel=\"noopener\">GitHub issue</a>.</p>\r\n<hr />\r\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/setting-line-length-in-css-and-fitting-text-to-a-container/\">Setting Line Length in CSS (and Fitting Text to a Container)</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&utm_source=css-tricks.com&utm_campaign=family_&utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
    "createdAt": "2025-07-14T12:38:23.000+00:00",
    "link": "https://css-tricks.com/setting-line-length-in-css-and-fitting-text-to-a-container/",
    "author": "",
    "site": {
      "id": "4",
      "url": "https://css-tricks.com/category/articles/feed",
      "name": "cssTrick"
    }
  },
  {
    "title": "Setting Line Length in CSS (and Fitting Text to a Container)",
    "content": "<p>First, what is line length? <dfn>Line length</dfn> is the length of a container that holds a body of multi-line text. “Multi-line” is the key part here, because text becomes less readable if the beginning of a line of text is too far away from the end of the prior line of text. This causes users to reread lines by mistake, and generally get lost while reading.</p>\r\n\r\n\r\n\r\n<p>Luckily, the Web Content Accessibility Guidelines (WCAG) gives us a pretty hard rule to follow: <a href=\"https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-visual-presentation\" rel=\"noopener\">no more than 80 characters on a line</a> (40 if the language is Chinese, Japanese, or Korean), which is super easy to implement using character (<code>ch</code>) units:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">width: 80ch;</code></pre>\r\n\r\n\r\n\r\n<p>The width of <code>1ch</code> is equal to the width of the number <code>0</code> in your chosen font, so the exact width depends on the font.</p>\r\n\r\n\r\n\r\n<span id=\"more-387679\"></span>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"setting-the-optimal-line-length\">Setting the <em>optimal</em> line length</h3>\r\n\r\n\r\n<p>Just because you’re allowed up to 80 characters on a line, it doesn’t mean that you <em>have</em> to aim for that number. A study by the <a href=\"https://baymard.com/blog/line-length-readability\" rel=\"noopener\">Baymard Institute</a> revealed that a line length of 50-75 characters is the optimal length — this takes into consideration that smaller line lengths mean more lines and, therefore, more opportunities for users to make reading mistakes.</p>\r\n\r\n\r\n\r\n<p>That being said, we also have responsive design to think about, so setting a minimum width (e.g., <code>min-width: 50ch</code>) isn’t a good idea because you’re unlikely to fit 50 characters on a line with, for example, a screen/window size that is 320 pixels wide. So, there’s a bit of nuance involved, and the best way to handle that is by combining the <a href=\"https://css-tricks.com/almanac/functions/c/clamp/\"><code>clamp()</code></a> and <a href=\"https://css-tricks.com/almanac/functions/m/min/\"><code>min()</code></a> functions:</p>\r\n\r\n\r\n\r\n<ul class=\"wp-block-list\">\r\n<li><strong><code>clamp()</code>:</strong> Set a fluid value that’s relative to a container using percentage, viewport, or container query units, but with minimum and maximum constraints.</li>\r\n\r\n\r\n\r\n<li><strong><code>min()</code>:</strong> Set the smallest value from a list of comma-separated values.</li>\r\n</ul>\r\n\r\n\r\n\r\n<p>Let’s start with <code>min()</code>. One of the arguments is <code>93.75vw</code>. Assuming that the container extends across the whole viewport, this’d equal <code>300px</code> when the viewport width is <code>320px</code> (allowing for <code>20px</code> of spacing to be distributed as you see fit) and <code>1350px</code> when the viewport width is <code>1440px</code>. However, for as long as the other argument (<code>50ch</code>) is the smallest of the two values, that’s the value that <code>min()</code> will resolve to.</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">min(93.75vw, 50ch);</code></pre>\r\n\r\n\r\n\r\n<p>Next is <code>clamp()</code>, which accepts three arguments in the following order: the minimum, preferred, and maximum values. This is how we’ll set the line length.</p>\r\n\r\n\r\n\r\n<p>For the minimum, you’d plug in your <code>min()</code> function, which sets the <code>50ch</code> line length but only conditionally. For the maximum, I suggest <code>75ch</code>, as mentioned before. The preferred value is totally up to you — this will be the width of your container when not hitting the minimum or maximum.</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">width: clamp(min(93.75vw, 50ch), 70vw, 75ch);</code></pre>\r\n\r\n\r\n\r\n<p>In addition, you can use <a href=\"https://css-tricks.com/almanac/functions/m/min/\"><code>min()</code></a>, <a href=\"https://css-tricks.com/almanac/functions/m/max/\"><code>max()</code></a>, and <a href=\"https://css-tricks.com/a-complete-guide-to-calc-in-css/\"><code>calc()</code></a> in any of those arguments to add further nuance.</p>\r\n\r\n\r\n\r\n<p>If the container feels too narrow, then the <a href=\"https://css-tricks.com/almanac/properties/f/font-size/\"><code>font-size</code></a> might be too large. If it feels too wide, then the <code>font-size</code> might be too small.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"fit-text-to-container-with-javascript-\">Fit text to container (with JavaScript)</h3>\r\n\r\n\r\n<p>You know that design trend where text is made to fit the width of a container? Typically, to utilize as much of the available space as possible? You’ll often see it applied to headings on marketing pages and blog posts. Well, <a href=\"https://css-tricks.com/fitting-text-to-a-container/\">Chris wrote about it</a> back in 2018, rounding up several ways to achieve the effect with JavaScript or jQuery, unfortunately with limitations. However, the ending reveals that you can just use SVG as long as you know the <code>viewBox</code> values, and I actually have a trick for getting them.</p>\r\n\r\n\r\n\r\n<p>Although it still requires 3-5 lines of JavaScript, it’s the shortest method I’ve found. It also slides into HTML and CSS perfectly, particularly since the SVG inherits many CSS properties (including the color, thanks to <code>fill: currentColor</code>):</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_XJbYjpJ\" src=\"//codepen.io/anon/embed/preview/XJbYjpJ?height=450&theme-id=1&slug-hash=XJbYjpJ&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed XJbYjpJ\" title=\"CodePen Embed XJbYjpJ\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\"><h1 class=\"container\">\r\n  <svg>\r\n    <text>Fit text to container</text>\r\n  </svg>\r\n</h1></code></pre>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">h1.container {\r\n  /* Container size */\r\n  width: 100%;\r\n\r\n  /* Type styles (<text> will inherit most of them) */\r\n  font: 900 1em system-ui;\r\n  color: hsl(43 74% 3%);\r\n\r\n  text {\r\n    /*\r\n      We have to use fill: instead of color: here\r\n      But we can use currentColor to inherit the color\r\n    */\r\n    fill: currentColor;\r\n  }\r\n}</code></pre>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">/* Select all SVGs */\r\nconst svg = document.querySelectorAll(\"svg\");\r\n\r\n/* Loop all SVGs */\r\nsvg.forEach(element => {\r\n  /* Get bounding box of <text> element */\r\n  const bbox = element.querySelector(\"text\").getBBox();\r\n  /* Apply bounding box values to SVG element as viewBox */\r\n  element.setAttribute(\"viewBox\", [bbox.x, bbox.y, bbox.width, bbox.height].join(\" \"));\r\n});</code></pre>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"fit-text-to-container-pure-css-\">Fit text to container (pure CSS)</h3>\r\n\r\n\r\n<p>If you’re hell-bent on a pure-CSS method, you <em>are</em> in luck. However, despite the insane things that we can do with CSS these days, <a href=\"https://kizu.dev/fit-to-width/\" rel=\"noopener\">Roman Komarov’s fit-to-width hack</a> is a bit complicated (albeit rather impressive). Here’s the gist of it:</p>\r\n\r\n\r\n\r\n<ul class=\"wp-block-list\">\r\n<li>The text is duplicated a couple of times (although hidden accessibly with <code>aria-hidden</code> and hidden literally with <code>visibility: hidden</code>) so that we can do math with the hidden ones, and then apply the result to the visible one.</li>\r\n\r\n\r\n\r\n<li>Using container queries/container query units, the math involves dividing the inline size of the text by the inline size of the container to get a scaling factor, which we then use on the visible text’s <code>font-size</code> to make it grow or shrink.</li>\r\n\r\n\r\n\r\n<li>To make the scaling factor unitless, we use the <a href=\"https://dev.to/janeori/css-type-casting-to-numeric-tanatan2-scalars-582j\" rel=\"noopener\"><code>tan(atan2())</code> type-casting trick</a>.</li>\r\n\r\n\r\n\r\n<li>Certain custom properties must be registered using the <a href=\"https://css-tricks.com/almanac/rules/p/property/\"><code>@property</code></a> at-rule (otherwise they don’t work as intended).</li>\r\n\r\n\r\n\r\n<li>The final <code>font-size</code> value utilizes <code>clamp()</code> to set minimum and maximum font sizes, but these are optional.</li>\r\n</ul>\r\n\r\n\r\n\r\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\"><span class=\"text-fit\">\r\n  <span>\r\n    <span class=\"text-fit\">\r\n      <span><span>fit-to-width text</span></span>\r\n      <span aria-hidden=\"true\">fit-to-width text</span>\r\n    </span>\r\n  </span>\r\n  <span aria-hidden=\"true\">fit-to-width text</span>\r\n</span></code></pre>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.text-fit {\r\n  display: flex;\r\n  container-type: inline-size;\r\n\r\n  --captured-length: initial;\r\n  --support-sentinel: var(--captured-length, 9999px);\r\n\r\n  & > [aria-hidden] {\r\n    visibility: hidden;\r\n  }\r\n\r\n  & > :not([aria-hidden]) {\r\n    flex-grow: 1;\r\n    container-type: inline-size;\r\n\r\n    --captured-length: 100cqi;\r\n    --available-space: var(--captured-length);\r\n\r\n    & > * {\r\n      --support-sentinel: inherit;\r\n      --captured-length: 100cqi;\r\n      --ratio: tan(\r\n        atan2(\r\n          var(--available-space),\r\n          var(--available-space) - var(--captured-length)\r\n        )\r\n      );\r\n      --font-size: clamp(\r\n        1em,\r\n        1em * var(--ratio),\r\n        var(--max-font-size, infinity * 1px) - var(--support-sentinel)\r\n      );\r\n      inline-size: var(--available-space);\r\n\r\n      &:not(.text-fit) {\r\n        display: block;\r\n        font-size: var(--font-size);\r\n\r\n        @container (inline-size > 0) {\r\n          white-space: nowrap;\r\n        }\r\n      }\r\n\r\n      /* Necessary for variable fonts that use optical sizing */\r\n      &.text-fit {\r\n        --captured-length2: var(--font-size);\r\n        font-variation-settings: \"opsz\" tan(atan2(var(--captured-length2), 1px));\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@property --captured-length {\r\n  syntax: \"<length>\";\r\n  initial-value: 0px;\r\n  inherits: true;\r\n}\r\n\r\n@property --captured-length2 {\r\n  syntax: \"<length>\";\r\n  initial-value: 0px;\r\n  inherits: true;\r\n}</code></pre>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_GgJPVWa\" src=\"//codepen.io/anon/embed/preview/GgJPVWa?height=450&theme-id=1&slug-hash=GgJPVWa&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed GgJPVWa\" title=\"CodePen Embed GgJPVWa\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n<h4 class=\"wp-block-heading\" id=\"watch-for-new-text-grow-text-shrink-properties\">Watch for new <code>text-grow</code>/<code>text-shrink</code> properties</h4>\r\n\r\n\r\n<p>To make fitting text to a container possible in just <em>one</em> line of CSS, <a href=\"https://github.com/w3c/csswg-drafts/issues/2528\" rel=\"noopener\">a number of solutions have been discussed</a>. The favored solution seems to be two new <a href=\"https://github.com/explainers-by-googlers/css-fit-text/blob/main/README.md#potential-solution\" rel=\"noopener\"><code>text-grow</code> and <code>text-shrink</code> properties</a>. Personally, I don’t think we need two different properties. In fact, I prefer the simpler alternative, <a href=\"https://github.com/explainers-by-googlers/css-fit-text/blob/main/README.md#considered-alternatives\" rel=\"noopener\"><code>font-size: fit-width</code></a>, but since <code>text-grow</code> and <code>text-shrink</code> are already on the table (<a href=\"https://groups.google.com/a/chromium.org/g/blink-dev/c/I3aG24t4bwI/m/xLBLyAJKDwAJ\" rel=\"noopener\">Chrome intends to prototype</a> and you can <a href=\"https://chromestatus.com/feature/5104141688635392?gate=5084590997504000\" rel=\"noopener\">track it</a>), let’s take a look at how they could work.</p>\r\n\r\n\r\n\r\n<p>The first thing that you need to know is that, as proposed, the <code>text-grow</code> and <code>text-shrink</code> properties can apply to multiple lines of wrapped text within a container, and that’s huge because we can’t do that with my JavaScript technique or Roman’s CSS technique (where each line needs to have its own container).</p>\r\n\r\n\r\n\r\n<p>Both have the same syntax, and you’ll need to use both if you want to allow both growing <em>and</em> shrinking:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">text-grow: <fit-target> <fit-method>? <length>?;\r\ntext-shrink: <fit-target> <fit-method>? <length>?;</code></pre>\r\n\r\n\r\n\r\n<ul class=\"wp-block-list\">\r\n<li><strong><code><fit-target></code></strong>\r\n<ul class=\"wp-block-list\">\r\n<li><code>per-line</code>: For <code>text-grow</code>, lines of text shorter than the container will grow to fit it. For <code>text-shrink</code>, lines of text <em>longer</em> than the container will <em>shrink</em> to fit it.</li>\r\n\r\n\r\n\r\n<li><code>consistent</code>: For <code>text-grow</code>, the shortest line will grow to fit the container while all other lines grow by the same scaling factor. For <code>text-shrink</code>, the <em>longest</em> line will <em>shrink</em> to fit the container while all other lines shrink by the same scaling factor.</li>\r\n</ul>\r\n</li>\r\n\r\n\r\n\r\n<li><strong><code><fit-method></code></strong> (optional)\r\n<ul class=\"wp-block-list\">\r\n<li><code>scale</code>: Scale the glyphs instead of changing the <code>font-size</code>.</li>\r\n\r\n\r\n\r\n<li><code>scale-inline</code>: Scale the glyphs instead of changing the <code>font-size</code>, but only horizontally.</li>\r\n\r\n\r\n\r\n<li><code>font-size</code>: Grow or shrink the font size accordingly. (I don’t know what the default value would be, but I imagine this would be it.)</li>\r\n\r\n\r\n\r\n<li><code>letter-spacing</code>: The letter spacing will grow/shrink instead of the <code>font-size</code>.</li>\r\n</ul>\r\n</li>\r\n\r\n\r\n\r\n<li><strong><code><length></code></strong> (optional): The maximum font size for <code>text-grow</code> or minimum font size for <code>text-shrink</code>.</li>\r\n</ul>\r\n\r\n\r\n\r\n<p>Again, I think I prefer the <code>font-size: fit-width</code> approach as this would grow and shrink all lines to fit the container in just one line of CSS. The above proposal does way more than I want it to, and there are already <a href=\"https://github.com/explainers-by-googlers/css-fit-text/blob/main/README.md#detailed-design-discussion\" rel=\"noopener\">a number of roadblocks</a> to overcome (many of which are accessibility-related). That’s just me, though, and I’d be curious to know your thoughts in the comments.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"conclusion\">Conclusion</h3>\r\n\r\n\r\n<p>It’s easier to set line length with CSS now than it was a few years ago. Now we have character units, <code>clamp()</code> and <code>min()</code> (and <code>max()</code> and <code>calc()</code> if you wanted to throw those in too), and wacky things that we can do with SVGs and CSS to fit text to a container. It does look like <code>text-grow</code> and <code>text-shrink</code> (or an equivalent solution) are what we truly need though, at least in some scenarios.</p>\r\n\r\n\r\n\r\n<p>Until we get there, this is a good time to weigh-in, which you can do by adding your feedback, tests, and use-cases to the <a href=\"https://github.com/w3c/csswg-drafts/issues/2528\" rel=\"noopener\">GitHub issue</a>.</p>\r\n<hr />\r\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/setting-line-length-in-css-and-fitting-text-to-a-container/\">Setting Line Length in CSS (and Fitting Text to a Container)</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&utm_source=css-tricks.com&utm_campaign=family_&utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
    "createdAt": "2025-07-14T12:38:23.000+00:00",
    "link": "https://css-tricks.com/setting-line-length-in-css-and-fitting-text-to-a-container/",
    "author": "",
    "site": {
      "id": "5",
      "url": "https://css-tricks.com/category/articles/feed",
      "name": "cssTrick"
    }
  },
  {
    "title": "[Korean FE Article] <h1> 요소의 기본 스타일이 변경됩니다",
    "content": "<div class=\"captioned-image-container\"><figure><a class=\"image-link image2 is-viewable-img\" target=\"_blank\" href=\"https://substackcdn.com/image/fetch/$s_!roK0!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F71348a19-839d-445a-8ada-7aeb17ae766e_1200x630.png\" data-component-name=\"Image2ToDOM\"><div class=\"image2-inset\"><picture><source type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/$s_!roK0!,w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F71348a19-839d-445a-8ada-7aeb17ae766e_1200x630.png 424w, https://substackcdn.com/image/fetch/$s_!roK0!,w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F71348a19-839d-445a-8ada-7aeb17ae766e_1200x630.png 848w, https://substackcdn.com/image/fetch/$s_!roK0!,w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F71348a19-839d-445a-8ada-7aeb17ae766e_1200x630.png 1272w, https://substackcdn.com/image/fetch/$s_!roK0!,w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F71348a19-839d-445a-8ada-7aeb17ae766e_1200x630.png 1456w\" sizes=\"100vw\"><img src=\"https://substackcdn.com/image/fetch/$s_!roK0!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F71348a19-839d-445a-8ada-7aeb17ae766e_1200x630.png\" width=\"1200\" height=\"630\" data-attrs=\"{\"src\":\"https://substack-post-media.s3.amazonaws.com/public/images/71348a19-839d-445a-8ada-7aeb17ae766e_1200x630.png\",\"srcNoWatermark\":null,\"fullscreen\":null,\"imageSize\":null,\"height\":630,\"width\":1200,\"resizeWidth\":null,\"bytes\":77758,\"alt\":null,\"title\":null,\"type\":\"image/png\",\"href\":null,\"belowTheFold\":false,\"topImage\":true,\"internalRedirect\":\"https://kofearticle.substack.com/i/167687062?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F71348a19-839d-445a-8ada-7aeb17ae766e_1200x630.png\",\"isProcessing\":false,\"align\":null,\"offset\":false}\" class=\"sizing-normal\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/$s_!roK0!,w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F71348a19-839d-445a-8ada-7aeb17ae766e_1200x630.png 424w, https://substackcdn.com/image/fetch/$s_!roK0!,w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F71348a19-839d-445a-8ada-7aeb17ae766e_1200x630.png 848w, https://substackcdn.com/image/fetch/$s_!roK0!,w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F71348a19-839d-445a-8ada-7aeb17ae766e_1200x630.png 1272w, https://substackcdn.com/image/fetch/$s_!roK0!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F71348a19-839d-445a-8ada-7aeb17ae766e_1200x630.png 1456w\" sizes=\"100vw\" fetchpriority=\"high\"></picture><div class=\"image-link-expand\"><div class=\"pencraft pc-display-flex pc-gap-8 pc-reset\"><div class=\"pencraft pc-reset icon-container restack-image\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-refresh-cw\"><path d=\"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\"></path><path d=\"M21 3v5h-5\"></path><path d=\"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\"></path><path d=\"M8 16H3v5\"></path></svg></div><div class=\"pencraft pc-reset icon-container view-image\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-maximize2\"><polyline points=\"15 3 21 3 21 9\"></polyline><polyline points=\"9 21 3 21 3 15\"></polyline><line x1=\"21\" x2=\"14\" y1=\"3\" y2=\"10\"></line><line x1=\"3\" x2=\"10\" y1=\"21\" y2=\"14\"></line></svg></div></div></div></div></a></figure></div><blockquote><p>글 링크: <a href=\"https://velog.io/@typo/default-styles-for-h1-elements-are-changing\">https://velog.io/@typo/default-styles-for-h1-elements-are-changing</a></p></blockquote><h2>소개</h2><p><code><h1></code> 요소는 아웃라인 알고리즘 개념에 의해 암묵적으로 계층 수준을 부여받았습니다. 이 수준은 섹셔닝 요소 안에 얼마나 깊게 중첩되어 있는지에 따라 정해졌습니다. 그러나 개발자가 쉽게 예측할 수 없고 접근성을 완전히 보장하지 못한다는 단점이 있었는데요. </p><p>다행히도 최신 브라우저 버전부터 이러한 기능에 변경사항이 생깁니다. 구체적으로 어떤 변화가 있는지, 기존 웹에 어떤 영향이 있는지 한번 확인해보시길 바랍니다.</p><h2>목차</h2><ul><li><p>변경 사항</p></li><li><p>변경 목적과 시기</p></li><li><p>라이트하우스 경고 수정하기</p></li><li><p>요약</p></li><li><p>더 알아보기</p></li></ul>",
    "createdAt": "2025-07-14T00:30:48.000+00:00",
    "link": "https://kofearticle.substack.com/p/korean-fe-article-h1",
    "author": "",
    "site": {
      "id": "3",
      "url": "https://kofearticle.substack.com/feed",
      "name": "kofearticle"
    }
  },
  {
    "title": "Scroll-Driven Sticky Heading",
    "content": "<p>Scroll-driven animations are great! They’re a powerful tool that lets developers tie the movement and transformation of elements directly to the user’s scroll position. This technique opens up new ways to create interactive experiences, cuing images to appear, text to glide across the stage, and backgrounds to subtly shift. Used thoughtfully, scroll-driven animations (SDA) can make your website feel more dynamic, engaging, and responsive.</p>\r\n\r\n\r\n\r\n<p>A few weeks back, I was playing around with scroll-driven animations, just searching for all sorts of random things you could do with it. That’s when I came up with the idea to animate the text of the main heading (<code>h1</code>) and, using SDA, change the heading itself based on the user’s scroll position on the page. In this article, we’re going to break down that idea and rebuild it step by step. This is the general direction we’ll be heading in, which looks better <a href=\"https://codepen.io/amit_sheen/full/jEPRPXG/8f961cc6db1cac0c976bec7bd4bdd57f\" rel=\"noopener\">in full screen</a> and viewed in a Chromium browser:</p>\r\n\r\n\r\n\r\n<span id=\"more-387748\"></span>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_jEPRPXG/8f961cc6db1cac0c976bec7bd4bdd57f\" src=\"//codepen.io/anon/embed/jEPRPXG/8f961cc6db1cac0c976bec7bd4bdd57f?height=550&theme-id=1&slug-hash=jEPRPXG/8f961cc6db1cac0c976bec7bd4bdd57f&default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed jEPRPXG/8f961cc6db1cac0c976bec7bd4bdd57f\" title=\"CodePen Embed jEPRPXG/8f961cc6db1cac0c976bec7bd4bdd57f\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>It’s important to note that the effect in this example only works in browsers that support scroll-driven animations. Where SDA isn’t supported, there’s a proper fallback to static headings. From an accessibility perspective, if the browser has reduced motion enabled or if the page is being accessed with assistive technology, the effect is disabled and the user gets all the content in a fully semantic and accessible way.</p>\r\n\r\n\r\n\r\n\r\n<baseline-status class=\"wp-block-css-tricks-baseline-status\" featureId=\"scroll-driven-animations\"></baseline-status>\r\n\r\n\r\n\r\n<p class=\"is-style-explanation\"><strong>Just a quick note:</strong> this approach does rely on a few <a href=\"https://css-tricks.com/magic-numbers-in-css/\">“magic numbers”</a> for the keyframes, which we’ll talk about later on. While they’re surprisingly responsive, this method is really best suited for static content, and it’s not ideal for highly dynamic websites.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"closer-look-at-the-animation\">Closer Look at the Animation</h3>\r\n\r\n\r\n<p>Before we dive into scroll-driven animations, let’s take a minute to look at the text animation itself, and how it actually works. This is based on an idea I had a few years back when I wanted to create a typewriter effect. At the time, most of the methods I found involved animating the element’s width, required using a monospace font, or a solid color background. None of which really worked for me. So I looked for a way to animate the content itself, and the solution was, as it often is, in pseudo-elements.</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_YzZYoMV\" src=\"//codepen.io/anon/embed/preview/YzZYoMV?height=450&theme-id=1&slug-hash=YzZYoMV&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed YzZYoMV\" title=\"CodePen Embed YzZYoMV\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>Pseudo-elements have a <a href=\"https://css-tricks.com/almanac/properties/c/content/\"><code>content</code></a> property, and you can (kind of) animate that text. It’s not exactly animation, but you can change the content dynamically. The cool part is that the only thing that changes is the text itself, no other tricks required.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"start-with-a-solid-foundation\">Start With a Solid Foundation</h3>\r\n\r\n\r\n<p>Now that you know the trick behind the text animation, let’s see how to combine it with a scroll-driven animation, and make sure we have a solid, accessible fallback as well.</p>\r\n\r\n\r\n\r\n<p>We’ll start with some basic semantic markup. I’ll wrap everything in a <code>main</code> element, with individual sections inside. Each <code>section</code> gets its own heading and content, like text and images. For this example, I’ve set up four sections, each with a bit of text and some images, all about Primary Colors.</p>\r\n\r\n\r\n\r\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\"><main>\r\n  <section>\r\n    <h1>Primary Colors</h1>\r\n    <p>The three primary colors (red, blue, and yellow) form the basis of all other colors on the color wheel. Mixing them in different combinations produces a wide array of hues.</p>\r\n    <img src=\"./colors.jpg\" alt=\"...image description\">\r\n  </section>\r\n  \r\n  <section>\r\n    <h2>Red Power</h2>\r\n    <p>Red is a bold and vibrant color, symbolizing energy, passion, and warmth. It easily attracts attention and is often linked with strong emotions.</p>\r\n    <img src=\"./red.jpg\" alt=\"...image description\">\r\n  </section>\r\n  \r\n  <section>\r\n    <h2>Blue Calm</h2>\r\n    <p>Blue is a calm and cool color, representing tranquility, stability, and trust. It evokes images of the sky and sea, creating a peaceful mood.</p>\r\n    <img src=\"./blue.jpg\" alt=\"...image description\">\r\n  </section>\r\n  \r\n  <section>\r\n    <h2>Yellow Joy</h2>\r\n    <p>Yellow is a bright and cheerful color, standing for light, optimism, and creativity. It is highly visible and brings a sense of happiness and hope.</p>\r\n    <img src=\"./yellow.jpg\" alt=\"...image description\">\r\n  </section>\r\n</main></code></pre>\r\n\r\n\r\n\r\n<p>As for the styling, I’m not doing anything special at this stage, just the basics. I changed the font and adjusted the text and heading sizes, set up the <code>display</code> for the <code>main</code> and the <code>section</code>s, and fixed the image sizes with <a href=\"https://css-tricks.com/almanac/properties/o/object-fit/\"><code>object-fit</code></a>.</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_jEPJpae/e3738ab413075fe51fb3cf9fde711f37\" src=\"//codepen.io/anon/embed/preview/jEPJpae/e3738ab413075fe51fb3cf9fde711f37?height=550&theme-id=1&slug-hash=jEPJpae/e3738ab413075fe51fb3cf9fde711f37&default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed jEPJpae/e3738ab413075fe51fb3cf9fde711f37\" title=\"CodePen Embed jEPJpae/e3738ab413075fe51fb3cf9fde711f37\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>So, at this point, we have a simple site with static, semantic, and accessible content, which is great. Now the goal is to make sure it stays that way as we start adding our effect.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"the-second-first-heading\">The Second First Heading</h3>\r\n\r\n\r\n<p>We’ll start by adding another <code>h1</code> element at the top of the <code>main</code>. This new element will serve as the placeholder for our animated text, updating according to the user’s scroll position. And yes, I know there’s already an <code>h1</code> in the first <code>section</code>; that’s fine and we’ll address it in a moment so that only one is accessible at a time.</p>\r\n\r\n\r\n\r\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\"><h1 class=\"scrollDrivenHeading\" aria-hidden=\"true\">Primary Colors</h1></code></pre>\r\n\r\n\r\n\r\n<p>Notice that I’ve added <code>aria-hidden=\"true\"</code> to this heading, so it won’t be picked up by screen readers. Now I can add a class specifically for screen readers, <code>.srOnly</code>, to all the other headings. This way, anyone viewing the content “normally” will see only the animated heading, while assistive technology users will get the regular, static semantic headings.</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_YPXgjLV/1efdda6b4f7f38b0a20f63fc1dc85de1\" src=\"//codepen.io/anon/embed/preview/YPXgjLV/1efdda6b4f7f38b0a20f63fc1dc85de1?height=550&theme-id=1&slug-hash=YPXgjLV/1efdda6b4f7f38b0a20f63fc1dc85de1&default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed YPXgjLV/1efdda6b4f7f38b0a20f63fc1dc85de1\" title=\"CodePen Embed YPXgjLV/1efdda6b4f7f38b0a20f63fc1dc85de1\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p class=\"is-style-explanation\"><strong>Note:</strong> The style for the <code>.srOnly</code> class is based on <a href=\"https://www.scottohara.me/blog/2017/04/14/inclusively-hidden.html\" rel=\"noopener\">“Inclusively Hidden”</a> by Scott O’Hara.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"handling-support\">Handling Support</h3>\r\n\r\n\r\n<p>As much as accessibility matters, there’s another concern we need to keep in mind: support. CSS Scroll-Driven Animations are fantastic, but they’re still not fully supported everywhere. That’s why it’s important to provide the static version for browsers that don’t support SDA.</p>\r\n\r\n\r\n\r\n<p>The first step is to hide the animated heading we just added using <code>display: none</code>. Then, we’ll add a new <code>@supports</code> block to check for SDA support. Inside that block, where SDA is supported, we can change back the display for the heading.</p>\r\n\r\n\r\n\r\n<p>The <code>.srOnly</code> class should also move into the <a href=\"https://css-tricks.com/almanac/rules/s/supports/\"><code>@supports</code></a> block, since we only want it to apply when the effect is active, not when it’s not supported. This way, just like with assistive technology, anyone visiting the page in a browser without SDA support will still get the static content.</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.scrollDrivenHeading {\r\n  display: none;\r\n}\r\n\r\n@supports (animation-timeline: scroll()) {\r\n  .scrollDrivenHeading {\r\n    display: block;\r\n  }\r\n  \r\n  /* Screen Readers Only */\r\n  .srOnly {\r\n    clip: rect(0 0 0 0); \r\n    clip-path: inset(50%);\r\n    height: 1px;\r\n    overflow: hidden;\r\n    position: absolute;\r\n    white-space: nowrap; \r\n    width: 1px;\r\n  }\r\n}</code></pre>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"get-sticky\">Get Sticky</h3>\r\n\r\n\r\n<p>The next thing we need to do is handle the stickiness of the heading. To make sure the heading always stays on screen, we’ll set its <code>position</code> to <code>sticky</code> with <code>top: 0</code> so it sticks to the top of the viewport.</p>\r\n\r\n\r\n\r\n<p>While we’re at it, let’s add some basic styling, including a background so the text doesn’t blend with whatever’s behind the heading, a bit of <code>padding</code> for spacing, and <code>white-space: nowrap</code> to keep the heading on a single line.</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* inside the @supports block */\r\n.scrollDrivenHeading {\r\n  display: block;\r\n  position: sticky;\r\n  top: 0;\r\n  background-image: linear-gradient(0deg, transparent, black 1em);\r\n  padding: 0.5em 0.25em;\r\n  white-space: nowrap;\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>Now everything’s set up: in normal conditions, we’ll see a single sticky heading at the top of the page. And if someone uses assistive technology or a browser that doesn’t support SDA, they’ll still get the regular static content.</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_raVRrXO/57d0bf10192daf4d22eeadd50290c09f\" src=\"//codepen.io/anon/embed/preview/raVRrXO/57d0bf10192daf4d22eeadd50290c09f?height=550&theme-id=1&slug-hash=raVRrXO/57d0bf10192daf4d22eeadd50290c09f&default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed raVRrXO/57d0bf10192daf4d22eeadd50290c09f\" title=\"CodePen Embed raVRrXO/57d0bf10192daf4d22eeadd50290c09f\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>Now we’re ready to start animating the text. <em>Almost…</em></p>\r\n\r\n\r\n<h2 class=\"wp-block-heading\" id=\"the-magic-numbers\">The Magic Numbers</h2>\r\n\r\n\r\n<p>To build the text animation, we need to know exactly where the text should change. With SDA, scrolling basically becomes our timeline, and we have to determine the exact points on that timeline to trigger the animation.</p>\r\n\r\n\r\n\r\n<p>To make this easier, and to help you pinpoint those positions, I’ve prepared the following script:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@property --scroll-position {\r\n  syntax: \"<number>\";\r\n  inherits: false;\r\n  initial-value: 0;\r\n}\r\n\r\nbody::after {\r\n  counter-reset: sp var(--scroll-position);\r\n  content: counter(sp) \"%\";\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  padding: 1em;\r\n  background-color: maroon;\r\n  animation: scrollPosition steps(100);\r\n  animation-timeline: scroll();\r\n}\r\n\r\n@keyframes scrollPosition {\r\n  0% { --scroll-position: 0; }\r\n  100% { --scroll-position: 100; }\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>I don’t want to get too deep into this code, but the idea is to take the same scroll timeline we’ll use next to animate the text, and use it to animate a custom property (<code>--scroll-position</code>) from <code>0</code> to <code>100</code> based on the scroll progress, and display that value in the content.</p>\r\n\r\n\r\n\r\n<p>If we’ll add this at the start of our code, we’ll see a small red square in the top-left corner of the screen, showing the current scroll position as a percentage (to match the keyframes). This way, you can scroll to any section you want and easily mark the percentage where each heading should begin.</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_MYwxqvy/e8b735e3d6bb7e94ff8cf192b07745c8\" src=\"//codepen.io/anon/embed/preview/MYwxqvy/e8b735e3d6bb7e94ff8cf192b07745c8?height=550&theme-id=1&slug-hash=MYwxqvy/e8b735e3d6bb7e94ff8cf192b07745c8&default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed MYwxqvy/e8b735e3d6bb7e94ff8cf192b07745c8\" title=\"CodePen Embed MYwxqvy/e8b735e3d6bb7e94ff8cf192b07745c8\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>With this method and a bit of trial and error, I found that I want the headings to change at 30%, 60%, and 90%. So, how do we actually do it? Let’s start animating.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"animating-text\">Animating Text</h3>\r\n\r\n\r\n<p>First, we’ll clear out the content inside the <code>.scrollDrivenHeading</code> element so it’s empty and ready for dynamic content. In the CSS, I’ll add a pseudo-element to the heading, which we’ll use to animate the text. We’ll give it empty <code>content</code>, set up the <code>animation-name</code>, and of course, assign the <a href=\"https://css-tricks.com/almanac/properties/a/animation-timeline/\"><code>animation-timeline</code></a> to <code>scroll()</code>.</p>\r\n\r\n\r\n\r\n<p>And since I’m animating the <code>content</code> property, which is a discrete type, it doesn’t transition smoothly between values. It just jumps from one to the next. By setting the <code>animation-timing-function</code> property to <code>step-end</code>, I make sure each change happens exactly at the keyframe I define, so the text switches precisely where I want it to, instead of somewhere in between.</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.scrollDrivenHeading {\r\n  /* style */\r\n\r\n  &::after {\r\n    content: '';\r\n    animation-name: headingContent;\r\n    animation-timing-function: step-end;\r\n    animation-timeline: scroll();\r\n  }\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>As for the keyframes, this part is pretty straightforward (for now). We’ll set the first frame (<code>0%</code>) to the first heading, and assign the other headings to the percentages we found earlier.</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@keyframes headingContent {\r\n  0% { content: 'Primary Colors'}\r\n  30% { content: 'Red Power'}\r\n  60% { content: 'Blue Calm'}\r\n  90%, 100% { content: 'Yellow Joy'}\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>So, now we’ve got a site with a sticky heading that updates as you scroll.</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_QwboVVb/cc46fc3a918fe0abb888a2c8e5b07f4f\" src=\"//codepen.io/anon/embed/preview/QwboVVb/cc46fc3a918fe0abb888a2c8e5b07f4f?height=550&theme-id=1&slug-hash=QwboVVb/cc46fc3a918fe0abb888a2c8e5b07f4f&default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed QwboVVb/cc46fc3a918fe0abb888a2c8e5b07f4f\" title=\"CodePen Embed QwboVVb/cc46fc3a918fe0abb888a2c8e5b07f4f\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>But wait, right now it just switches instantly. Where’s the animation?! Here’s where it gets interesting. Since we’re not using JavaScript or any string manipulation, we have to write the keyframes ourselves. The best approach is to start from the target heading you want to reach, and build backwards. So, if you want to animate between the first and second heading, it would look like this:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@keyframes headingContent {\r\n  0% { content: 'Primary Colors'}\r\n  \r\n  9% { content: 'Primary Color'}\r\n  10% { content: 'Primary Colo'}\r\n  11% { content: 'Primary Col'}\r\n  12% { content: 'Primary Co'}\r\n  13% { content: 'Primary C'}\r\n  14% { content: 'Primary '}\r\n  15% { content: 'Primary'}\r\n  16% { content: 'Primar'}\r\n  17% { content: 'Prima'}\r\n  18% { content: 'Prim'}\r\n  19% { content: 'Pri'}\r\n  20% { content: 'Pr'}\r\n  21% { content: 'P'}\r\n  \r\n  22% { content: 'R'}\r\n  23% { content: 'Re'}\r\n  24% { content: 'Red'}\r\n  25% { content: 'Red '}\r\n  26% { content: 'Red P'}\r\n  27% { content: 'Red Po'}\r\n  28%{ content: 'Red Pow'}\r\n  29% { content: 'Red Powe'}\r\n  \r\n  30% { content: 'Red Power'}\r\n  60% { content: 'Blue Calm'}\r\n  90%, 100% { content: 'Yellow Joy'}\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>I simply went back by 1% each time, removing or adding a letter as needed. Note that in other cases, you might want to use a different step size, and not always 1%. For example, on longer headings with more words, you’ll probably want smaller steps.</p>\r\n\r\n\r\n\r\n<p>If we repeat this process for all the other headings, we’ll end up with a fully animated heading.</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_xbGBQjw/082c77f0af7e46ce7fb8791bc4a35664\" src=\"//codepen.io/anon/embed/preview/xbGBQjw/082c77f0af7e46ce7fb8791bc4a35664?height=550&theme-id=1&slug-hash=xbGBQjw/082c77f0af7e46ce7fb8791bc4a35664&default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed xbGBQjw/082c77f0af7e46ce7fb8791bc4a35664\" title=\"CodePen Embed xbGBQjw/082c77f0af7e46ce7fb8791bc4a35664\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"user-preferences\">User Preferences</h3>\r\n\r\n\r\n<p>We talked before about accessibility and making sure the content works well with assistive technology, but there’s one more thing you should keep in mind: <a href=\"https://css-tricks.com/almanac/rules/m/media/prefers-reduced-motion/\"><code>prefers-reduced-motion</code></a>. Even though this isn’t a strict WCAG requirement for this kind of animation, it can make a big difference for people with vestibular sensitivities, so it’s a good idea to offer a way to show the content without animations.</p>\r\n\r\n\r\n\r\n<p>If you want to provide a non-animated alternative, all you need to do is wrap your <code>@supports</code> block with a <code>prefers-reduced-motion</code> query:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@media screen and (prefers-reduced-motion: no-preference) {\r\n  @supports (animation-timeline: scroll()) {\r\n    /* style */\r\n  }\r\n}</code></pre>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"leveling-up\">Leveling Up</h3>\r\n\r\n\r\n<p>Let’s talk about variations. In the previous example, we animated the entire heading text, but we don’t have to do that. You can animate just the part you want, and use additional animations to enhance the effect and make things more interesting. For example, here I kept the text “Primary Color” fixed, and added a <code>span</code> after it that handles the animated text.</p>\r\n\r\n\r\n\r\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\"><h1 class=\"scrollDrivenHeading\" aria-hidden=\"true\">\r\n  Primary Color<span></span>\r\n</h1></code></pre>\r\n\r\n\r\n\r\n<p>And since I now have a separate <code>span</code>, I can also animate its color to match each value.</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_jEPJdQa/2cd985ecfaafb73261b071d33d425970\" src=\"//codepen.io/anon/embed/preview/jEPJdQa/2cd985ecfaafb73261b071d33d425970?height=550&theme-id=1&slug-hash=jEPJdQa/2cd985ecfaafb73261b071d33d425970&default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed jEPJdQa/2cd985ecfaafb73261b071d33d425970\" title=\"CodePen Embed jEPJdQa/2cd985ecfaafb73261b071d33d425970\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>In the next example, I kept the text animation on the <code>span</code>, but instead of changing the text color, I added another scroll-driven animation on the heading itself to change its background color. This way, you can add as many animations as you want and change whatever you like.</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_XJbQbyP/11cd48be7ff3c71f77a2883b129a121b\" src=\"//codepen.io/anon/embed/preview/XJbQbyP/11cd48be7ff3c71f77a2883b129a121b?height=550&theme-id=1&slug-hash=XJbQbyP/11cd48be7ff3c71f77a2883b129a121b&default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed XJbQbyP/11cd48be7ff3c71f77a2883b129a121b\" title=\"CodePen Embed XJbQbyP/11cd48be7ff3c71f77a2883b129a121b\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n<h2 class=\"wp-block-heading\" id=\"your-turn-\">Your Turn!</h2>\r\n\r\n\r\n<p>CSS Scroll-Driven Animations are more than just a cool trick; they’re a game-changer that opens the door to a whole new world of web design. With just a bit of creativity, you can turn even the most ordinary pages into something interactive, memorable, and truly engaging. The possibilities really are endless, from subtle effects that enhance the user experience, to wild, animated transitions that make your site stand out.</p>\r\n\r\n\r\n\r\n<p>So, what would you build with scroll-driven animations? What would you create with this new superpower? Try it out, experiment, and if you come up with something cool, have some ideas, wild experiments, or even weird failures, I’d love to hear about them. I’m always excited to see what others come up with, so feel free to share your work, questions, or feedback below.</p>\r\n\r\n\r\n\r\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\r\n\r\n\r\n\r\n<p>Special thanks to <a href=\"https://bsky.app/profile/itscrisdiaz.com\" rel=\"noopener\">Cristian Díaz</a> for reviewing the examples, making sure everything is accessible, and contributing valuable advice and improvements.</p>\r\n<hr />\r\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/scroll-driven-sticky-heading/\">Scroll-Driven Sticky Heading</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&utm_source=css-tricks.com&utm_campaign=family_&utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
    "createdAt": "2025-07-11T17:11:00.000+00:00",
    "link": "https://css-tricks.com/scroll-driven-sticky-heading/",
    "author": "",
    "site": {
      "id": "4",
      "url": "https://css-tricks.com/category/articles/feed",
      "name": "cssTrick"
    }
  },
  {
    "title": "Scroll-Driven Sticky Heading",
    "content": "<p>Scroll-driven animations are great! They’re a powerful tool that lets developers tie the movement and transformation of elements directly to the user’s scroll position. This technique opens up new ways to create interactive experiences, cuing images to appear, text to glide across the stage, and backgrounds to subtly shift. Used thoughtfully, scroll-driven animations (SDA) can make your website feel more dynamic, engaging, and responsive.</p>\r\n\r\n\r\n\r\n<p>A few weeks back, I was playing around with scroll-driven animations, just searching for all sorts of random things you could do with it. That’s when I came up with the idea to animate the text of the main heading (<code>h1</code>) and, using SDA, change the heading itself based on the user’s scroll position on the page. In this article, we’re going to break down that idea and rebuild it step by step. This is the general direction we’ll be heading in, which looks better <a href=\"https://codepen.io/amit_sheen/full/jEPRPXG/8f961cc6db1cac0c976bec7bd4bdd57f\" rel=\"noopener\">in full screen</a> and viewed in a Chromium browser:</p>\r\n\r\n\r\n\r\n<span id=\"more-387748\"></span>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_jEPRPXG/8f961cc6db1cac0c976bec7bd4bdd57f\" src=\"//codepen.io/anon/embed/jEPRPXG/8f961cc6db1cac0c976bec7bd4bdd57f?height=550&theme-id=1&slug-hash=jEPRPXG/8f961cc6db1cac0c976bec7bd4bdd57f&default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed jEPRPXG/8f961cc6db1cac0c976bec7bd4bdd57f\" title=\"CodePen Embed jEPRPXG/8f961cc6db1cac0c976bec7bd4bdd57f\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>It’s important to note that the effect in this example only works in browsers that support scroll-driven animations. Where SDA isn’t supported, there’s a proper fallback to static headings. From an accessibility perspective, if the browser has reduced motion enabled or if the page is being accessed with assistive technology, the effect is disabled and the user gets all the content in a fully semantic and accessible way.</p>\r\n\r\n\r\n\r\n\r\n<baseline-status class=\"wp-block-css-tricks-baseline-status\" featureId=\"scroll-driven-animations\"></baseline-status>\r\n\r\n\r\n\r\n<p class=\"is-style-explanation\"><strong>Just a quick note:</strong> this approach does rely on a few <a href=\"https://css-tricks.com/magic-numbers-in-css/\">“magic numbers”</a> for the keyframes, which we’ll talk about later on. While they’re surprisingly responsive, this method is really best suited for static content, and it’s not ideal for highly dynamic websites.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"closer-look-at-the-animation\">Closer Look at the Animation</h3>\r\n\r\n\r\n<p>Before we dive into scroll-driven animations, let’s take a minute to look at the text animation itself, and how it actually works. This is based on an idea I had a few years back when I wanted to create a typewriter effect. At the time, most of the methods I found involved animating the element’s width, required using a monospace font, or a solid color background. None of which really worked for me. So I looked for a way to animate the content itself, and the solution was, as it often is, in pseudo-elements.</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_YzZYoMV\" src=\"//codepen.io/anon/embed/preview/YzZYoMV?height=450&theme-id=1&slug-hash=YzZYoMV&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed YzZYoMV\" title=\"CodePen Embed YzZYoMV\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>Pseudo-elements have a <a href=\"https://css-tricks.com/almanac/properties/c/content/\"><code>content</code></a> property, and you can (kind of) animate that text. It’s not exactly animation, but you can change the content dynamically. The cool part is that the only thing that changes is the text itself, no other tricks required.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"start-with-a-solid-foundation\">Start With a Solid Foundation</h3>\r\n\r\n\r\n<p>Now that you know the trick behind the text animation, let’s see how to combine it with a scroll-driven animation, and make sure we have a solid, accessible fallback as well.</p>\r\n\r\n\r\n\r\n<p>We’ll start with some basic semantic markup. I’ll wrap everything in a <code>main</code> element, with individual sections inside. Each <code>section</code> gets its own heading and content, like text and images. For this example, I’ve set up four sections, each with a bit of text and some images, all about Primary Colors.</p>\r\n\r\n\r\n\r\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\"><main>\r\n  <section>\r\n    <h1>Primary Colors</h1>\r\n    <p>The three primary colors (red, blue, and yellow) form the basis of all other colors on the color wheel. Mixing them in different combinations produces a wide array of hues.</p>\r\n    <img src=\"./colors.jpg\" alt=\"...image description\">\r\n  </section>\r\n  \r\n  <section>\r\n    <h2>Red Power</h2>\r\n    <p>Red is a bold and vibrant color, symbolizing energy, passion, and warmth. It easily attracts attention and is often linked with strong emotions.</p>\r\n    <img src=\"./red.jpg\" alt=\"...image description\">\r\n  </section>\r\n  \r\n  <section>\r\n    <h2>Blue Calm</h2>\r\n    <p>Blue is a calm and cool color, representing tranquility, stability, and trust. It evokes images of the sky and sea, creating a peaceful mood.</p>\r\n    <img src=\"./blue.jpg\" alt=\"...image description\">\r\n  </section>\r\n  \r\n  <section>\r\n    <h2>Yellow Joy</h2>\r\n    <p>Yellow is a bright and cheerful color, standing for light, optimism, and creativity. It is highly visible and brings a sense of happiness and hope.</p>\r\n    <img src=\"./yellow.jpg\" alt=\"...image description\">\r\n  </section>\r\n</main></code></pre>\r\n\r\n\r\n\r\n<p>As for the styling, I’m not doing anything special at this stage, just the basics. I changed the font and adjusted the text and heading sizes, set up the <code>display</code> for the <code>main</code> and the <code>section</code>s, and fixed the image sizes with <a href=\"https://css-tricks.com/almanac/properties/o/object-fit/\"><code>object-fit</code></a>.</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_jEPJpae/e3738ab413075fe51fb3cf9fde711f37\" src=\"//codepen.io/anon/embed/preview/jEPJpae/e3738ab413075fe51fb3cf9fde711f37?height=550&theme-id=1&slug-hash=jEPJpae/e3738ab413075fe51fb3cf9fde711f37&default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed jEPJpae/e3738ab413075fe51fb3cf9fde711f37\" title=\"CodePen Embed jEPJpae/e3738ab413075fe51fb3cf9fde711f37\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>So, at this point, we have a simple site with static, semantic, and accessible content, which is great. Now the goal is to make sure it stays that way as we start adding our effect.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"the-second-first-heading\">The Second First Heading</h3>\r\n\r\n\r\n<p>We’ll start by adding another <code>h1</code> element at the top of the <code>main</code>. This new element will serve as the placeholder for our animated text, updating according to the user’s scroll position. And yes, I know there’s already an <code>h1</code> in the first <code>section</code>; that’s fine and we’ll address it in a moment so that only one is accessible at a time.</p>\r\n\r\n\r\n\r\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\"><h1 class=\"scrollDrivenHeading\" aria-hidden=\"true\">Primary Colors</h1></code></pre>\r\n\r\n\r\n\r\n<p>Notice that I’ve added <code>aria-hidden=\"true\"</code> to this heading, so it won’t be picked up by screen readers. Now I can add a class specifically for screen readers, <code>.srOnly</code>, to all the other headings. This way, anyone viewing the content “normally” will see only the animated heading, while assistive technology users will get the regular, static semantic headings.</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_YPXgjLV/1efdda6b4f7f38b0a20f63fc1dc85de1\" src=\"//codepen.io/anon/embed/preview/YPXgjLV/1efdda6b4f7f38b0a20f63fc1dc85de1?height=550&theme-id=1&slug-hash=YPXgjLV/1efdda6b4f7f38b0a20f63fc1dc85de1&default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed YPXgjLV/1efdda6b4f7f38b0a20f63fc1dc85de1\" title=\"CodePen Embed YPXgjLV/1efdda6b4f7f38b0a20f63fc1dc85de1\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p class=\"is-style-explanation\"><strong>Note:</strong> The style for the <code>.srOnly</code> class is based on <a href=\"https://www.scottohara.me/blog/2017/04/14/inclusively-hidden.html\" rel=\"noopener\">“Inclusively Hidden”</a> by Scott O’Hara.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"handling-support\">Handling Support</h3>\r\n\r\n\r\n<p>As much as accessibility matters, there’s another concern we need to keep in mind: support. CSS Scroll-Driven Animations are fantastic, but they’re still not fully supported everywhere. That’s why it’s important to provide the static version for browsers that don’t support SDA.</p>\r\n\r\n\r\n\r\n<p>The first step is to hide the animated heading we just added using <code>display: none</code>. Then, we’ll add a new <code>@supports</code> block to check for SDA support. Inside that block, where SDA is supported, we can change back the display for the heading.</p>\r\n\r\n\r\n\r\n<p>The <code>.srOnly</code> class should also move into the <a href=\"https://css-tricks.com/almanac/rules/s/supports/\"><code>@supports</code></a> block, since we only want it to apply when the effect is active, not when it’s not supported. This way, just like with assistive technology, anyone visiting the page in a browser without SDA support will still get the static content.</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.scrollDrivenHeading {\r\n  display: none;\r\n}\r\n\r\n@supports (animation-timeline: scroll()) {\r\n  .scrollDrivenHeading {\r\n    display: block;\r\n  }\r\n  \r\n  /* Screen Readers Only */\r\n  .srOnly {\r\n    clip: rect(0 0 0 0); \r\n    clip-path: inset(50%);\r\n    height: 1px;\r\n    overflow: hidden;\r\n    position: absolute;\r\n    white-space: nowrap; \r\n    width: 1px;\r\n  }\r\n}</code></pre>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"get-sticky\">Get Sticky</h3>\r\n\r\n\r\n<p>The next thing we need to do is handle the stickiness of the heading. To make sure the heading always stays on screen, we’ll set its <code>position</code> to <code>sticky</code> with <code>top: 0</code> so it sticks to the top of the viewport.</p>\r\n\r\n\r\n\r\n<p>While we’re at it, let’s add some basic styling, including a background so the text doesn’t blend with whatever’s behind the heading, a bit of <code>padding</code> for spacing, and <code>white-space: nowrap</code> to keep the heading on a single line.</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* inside the @supports block */\r\n.scrollDrivenHeading {\r\n  display: block;\r\n  position: sticky;\r\n  top: 0;\r\n  background-image: linear-gradient(0deg, transparent, black 1em);\r\n  padding: 0.5em 0.25em;\r\n  white-space: nowrap;\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>Now everything’s set up: in normal conditions, we’ll see a single sticky heading at the top of the page. And if someone uses assistive technology or a browser that doesn’t support SDA, they’ll still get the regular static content.</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_raVRrXO/57d0bf10192daf4d22eeadd50290c09f\" src=\"//codepen.io/anon/embed/preview/raVRrXO/57d0bf10192daf4d22eeadd50290c09f?height=550&theme-id=1&slug-hash=raVRrXO/57d0bf10192daf4d22eeadd50290c09f&default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed raVRrXO/57d0bf10192daf4d22eeadd50290c09f\" title=\"CodePen Embed raVRrXO/57d0bf10192daf4d22eeadd50290c09f\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>Now we’re ready to start animating the text. <em>Almost…</em></p>\r\n\r\n\r\n<h2 class=\"wp-block-heading\" id=\"the-magic-numbers\">The Magic Numbers</h2>\r\n\r\n\r\n<p>To build the text animation, we need to know exactly where the text should change. With SDA, scrolling basically becomes our timeline, and we have to determine the exact points on that timeline to trigger the animation.</p>\r\n\r\n\r\n\r\n<p>To make this easier, and to help you pinpoint those positions, I’ve prepared the following script:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@property --scroll-position {\r\n  syntax: \"<number>\";\r\n  inherits: false;\r\n  initial-value: 0;\r\n}\r\n\r\nbody::after {\r\n  counter-reset: sp var(--scroll-position);\r\n  content: counter(sp) \"%\";\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  padding: 1em;\r\n  background-color: maroon;\r\n  animation: scrollPosition steps(100);\r\n  animation-timeline: scroll();\r\n}\r\n\r\n@keyframes scrollPosition {\r\n  0% { --scroll-position: 0; }\r\n  100% { --scroll-position: 100; }\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>I don’t want to get too deep into this code, but the idea is to take the same scroll timeline we’ll use next to animate the text, and use it to animate a custom property (<code>--scroll-position</code>) from <code>0</code> to <code>100</code> based on the scroll progress, and display that value in the content.</p>\r\n\r\n\r\n\r\n<p>If we’ll add this at the start of our code, we’ll see a small red square in the top-left corner of the screen, showing the current scroll position as a percentage (to match the keyframes). This way, you can scroll to any section you want and easily mark the percentage where each heading should begin.</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_MYwxqvy/e8b735e3d6bb7e94ff8cf192b07745c8\" src=\"//codepen.io/anon/embed/preview/MYwxqvy/e8b735e3d6bb7e94ff8cf192b07745c8?height=550&theme-id=1&slug-hash=MYwxqvy/e8b735e3d6bb7e94ff8cf192b07745c8&default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed MYwxqvy/e8b735e3d6bb7e94ff8cf192b07745c8\" title=\"CodePen Embed MYwxqvy/e8b735e3d6bb7e94ff8cf192b07745c8\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>With this method and a bit of trial and error, I found that I want the headings to change at 30%, 60%, and 90%. So, how do we actually do it? Let’s start animating.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"animating-text\">Animating Text</h3>\r\n\r\n\r\n<p>First, we’ll clear out the content inside the <code>.scrollDrivenHeading</code> element so it’s empty and ready for dynamic content. In the CSS, I’ll add a pseudo-element to the heading, which we’ll use to animate the text. We’ll give it empty <code>content</code>, set up the <code>animation-name</code>, and of course, assign the <a href=\"https://css-tricks.com/almanac/properties/a/animation-timeline/\"><code>animation-timeline</code></a> to <code>scroll()</code>.</p>\r\n\r\n\r\n\r\n<p>And since I’m animating the <code>content</code> property, which is a discrete type, it doesn’t transition smoothly between values. It just jumps from one to the next. By setting the <code>animation-timing-function</code> property to <code>step-end</code>, I make sure each change happens exactly at the keyframe I define, so the text switches precisely where I want it to, instead of somewhere in between.</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.scrollDrivenHeading {\r\n  /* style */\r\n\r\n  &::after {\r\n    content: '';\r\n    animation-name: headingContent;\r\n    animation-timing-function: step-end;\r\n    animation-timeline: scroll();\r\n  }\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>As for the keyframes, this part is pretty straightforward (for now). We’ll set the first frame (<code>0%</code>) to the first heading, and assign the other headings to the percentages we found earlier.</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@keyframes headingContent {\r\n  0% { content: 'Primary Colors'}\r\n  30% { content: 'Red Power'}\r\n  60% { content: 'Blue Calm'}\r\n  90%, 100% { content: 'Yellow Joy'}\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>So, now we’ve got a site with a sticky heading that updates as you scroll.</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_QwboVVb/cc46fc3a918fe0abb888a2c8e5b07f4f\" src=\"//codepen.io/anon/embed/preview/QwboVVb/cc46fc3a918fe0abb888a2c8e5b07f4f?height=550&theme-id=1&slug-hash=QwboVVb/cc46fc3a918fe0abb888a2c8e5b07f4f&default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed QwboVVb/cc46fc3a918fe0abb888a2c8e5b07f4f\" title=\"CodePen Embed QwboVVb/cc46fc3a918fe0abb888a2c8e5b07f4f\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>But wait, right now it just switches instantly. Where’s the animation?! Here’s where it gets interesting. Since we’re not using JavaScript or any string manipulation, we have to write the keyframes ourselves. The best approach is to start from the target heading you want to reach, and build backwards. So, if you want to animate between the first and second heading, it would look like this:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@keyframes headingContent {\r\n  0% { content: 'Primary Colors'}\r\n  \r\n  9% { content: 'Primary Color'}\r\n  10% { content: 'Primary Colo'}\r\n  11% { content: 'Primary Col'}\r\n  12% { content: 'Primary Co'}\r\n  13% { content: 'Primary C'}\r\n  14% { content: 'Primary '}\r\n  15% { content: 'Primary'}\r\n  16% { content: 'Primar'}\r\n  17% { content: 'Prima'}\r\n  18% { content: 'Prim'}\r\n  19% { content: 'Pri'}\r\n  20% { content: 'Pr'}\r\n  21% { content: 'P'}\r\n  \r\n  22% { content: 'R'}\r\n  23% { content: 'Re'}\r\n  24% { content: 'Red'}\r\n  25% { content: 'Red '}\r\n  26% { content: 'Red P'}\r\n  27% { content: 'Red Po'}\r\n  28%{ content: 'Red Pow'}\r\n  29% { content: 'Red Powe'}\r\n  \r\n  30% { content: 'Red Power'}\r\n  60% { content: 'Blue Calm'}\r\n  90%, 100% { content: 'Yellow Joy'}\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>I simply went back by 1% each time, removing or adding a letter as needed. Note that in other cases, you might want to use a different step size, and not always 1%. For example, on longer headings with more words, you’ll probably want smaller steps.</p>\r\n\r\n\r\n\r\n<p>If we repeat this process for all the other headings, we’ll end up with a fully animated heading.</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_xbGBQjw/082c77f0af7e46ce7fb8791bc4a35664\" src=\"//codepen.io/anon/embed/preview/xbGBQjw/082c77f0af7e46ce7fb8791bc4a35664?height=550&theme-id=1&slug-hash=xbGBQjw/082c77f0af7e46ce7fb8791bc4a35664&default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed xbGBQjw/082c77f0af7e46ce7fb8791bc4a35664\" title=\"CodePen Embed xbGBQjw/082c77f0af7e46ce7fb8791bc4a35664\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"user-preferences\">User Preferences</h3>\r\n\r\n\r\n<p>We talked before about accessibility and making sure the content works well with assistive technology, but there’s one more thing you should keep in mind: <a href=\"https://css-tricks.com/almanac/rules/m/media/prefers-reduced-motion/\"><code>prefers-reduced-motion</code></a>. Even though this isn’t a strict WCAG requirement for this kind of animation, it can make a big difference for people with vestibular sensitivities, so it’s a good idea to offer a way to show the content without animations.</p>\r\n\r\n\r\n\r\n<p>If you want to provide a non-animated alternative, all you need to do is wrap your <code>@supports</code> block with a <code>prefers-reduced-motion</code> query:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@media screen and (prefers-reduced-motion: no-preference) {\r\n  @supports (animation-timeline: scroll()) {\r\n    /* style */\r\n  }\r\n}</code></pre>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"leveling-up\">Leveling Up</h3>\r\n\r\n\r\n<p>Let’s talk about variations. In the previous example, we animated the entire heading text, but we don’t have to do that. You can animate just the part you want, and use additional animations to enhance the effect and make things more interesting. For example, here I kept the text “Primary Color” fixed, and added a <code>span</code> after it that handles the animated text.</p>\r\n\r\n\r\n\r\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\"><h1 class=\"scrollDrivenHeading\" aria-hidden=\"true\">\r\n  Primary Color<span></span>\r\n</h1></code></pre>\r\n\r\n\r\n\r\n<p>And since I now have a separate <code>span</code>, I can also animate its color to match each value.</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_jEPJdQa/2cd985ecfaafb73261b071d33d425970\" src=\"//codepen.io/anon/embed/preview/jEPJdQa/2cd985ecfaafb73261b071d33d425970?height=550&theme-id=1&slug-hash=jEPJdQa/2cd985ecfaafb73261b071d33d425970&default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed jEPJdQa/2cd985ecfaafb73261b071d33d425970\" title=\"CodePen Embed jEPJdQa/2cd985ecfaafb73261b071d33d425970\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>In the next example, I kept the text animation on the <code>span</code>, but instead of changing the text color, I added another scroll-driven animation on the heading itself to change its background color. This way, you can add as many animations as you want and change whatever you like.</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_XJbQbyP/11cd48be7ff3c71f77a2883b129a121b\" src=\"//codepen.io/anon/embed/preview/XJbQbyP/11cd48be7ff3c71f77a2883b129a121b?height=550&theme-id=1&slug-hash=XJbQbyP/11cd48be7ff3c71f77a2883b129a121b&default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed XJbQbyP/11cd48be7ff3c71f77a2883b129a121b\" title=\"CodePen Embed XJbQbyP/11cd48be7ff3c71f77a2883b129a121b\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n<h2 class=\"wp-block-heading\" id=\"your-turn-\">Your Turn!</h2>\r\n\r\n\r\n<p>CSS Scroll-Driven Animations are more than just a cool trick; they’re a game-changer that opens the door to a whole new world of web design. With just a bit of creativity, you can turn even the most ordinary pages into something interactive, memorable, and truly engaging. The possibilities really are endless, from subtle effects that enhance the user experience, to wild, animated transitions that make your site stand out.</p>\r\n\r\n\r\n\r\n<p>So, what would you build with scroll-driven animations? What would you create with this new superpower? Try it out, experiment, and if you come up with something cool, have some ideas, wild experiments, or even weird failures, I’d love to hear about them. I’m always excited to see what others come up with, so feel free to share your work, questions, or feedback below.</p>\r\n\r\n\r\n\r\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\r\n\r\n\r\n\r\n<p>Special thanks to <a href=\"https://bsky.app/profile/itscrisdiaz.com\" rel=\"noopener\">Cristian Díaz</a> for reviewing the examples, making sure everything is accessible, and contributing valuable advice and improvements.</p>\r\n<hr />\r\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/scroll-driven-sticky-heading/\">Scroll-Driven Sticky Heading</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&utm_source=css-tricks.com&utm_campaign=family_&utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
    "createdAt": "2025-07-11T17:11:00.000+00:00",
    "link": "https://css-tricks.com/scroll-driven-sticky-heading/",
    "author": "",
    "site": {
      "id": "5",
      "url": "https://css-tricks.com/category/articles/feed",
      "name": "cssTrick"
    }
  },
  {
    "title": "[Korean FE Article] 자바스크립트가 웹을 망가뜨렸습니다. (그리고 이를 진보라고 불렀습니다)",
    "content": "<div class=\"captioned-image-container\"><figure><a class=\"image-link image2 is-viewable-img\" target=\"_blank\" href=\"https://substackcdn.com/image/fetch/$s_!w3RC!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fec41c1b5-a8d5-4e11-8fce-67cc4171d8a8_760x350.jpeg\" data-component-name=\"Image2ToDOM\"><div class=\"image2-inset\"><picture><source type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/$s_!w3RC!,w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fec41c1b5-a8d5-4e11-8fce-67cc4171d8a8_760x350.jpeg 424w, https://substackcdn.com/image/fetch/$s_!w3RC!,w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fec41c1b5-a8d5-4e11-8fce-67cc4171d8a8_760x350.jpeg 848w, https://substackcdn.com/image/fetch/$s_!w3RC!,w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fec41c1b5-a8d5-4e11-8fce-67cc4171d8a8_760x350.jpeg 1272w, https://substackcdn.com/image/fetch/$s_!w3RC!,w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fec41c1b5-a8d5-4e11-8fce-67cc4171d8a8_760x350.jpeg 1456w\" sizes=\"100vw\"><img src=\"https://substackcdn.com/image/fetch/$s_!w3RC!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fec41c1b5-a8d5-4e11-8fce-67cc4171d8a8_760x350.jpeg\" width=\"760\" height=\"350\" data-attrs=\"{\"src\":\"https://substack-post-media.s3.amazonaws.com/public/images/ec41c1b5-a8d5-4e11-8fce-67cc4171d8a8_760x350.jpeg\",\"srcNoWatermark\":null,\"fullscreen\":null,\"imageSize\":null,\"height\":350,\"width\":760,\"resizeWidth\":null,\"bytes\":null,\"alt\":null,\"title\":null,\"type\":null,\"href\":null,\"belowTheFold\":false,\"topImage\":true,\"internalRedirect\":null,\"isProcessing\":false,\"align\":null,\"offset\":false}\" class=\"sizing-normal\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/$s_!w3RC!,w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fec41c1b5-a8d5-4e11-8fce-67cc4171d8a8_760x350.jpeg 424w, https://substackcdn.com/image/fetch/$s_!w3RC!,w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fec41c1b5-a8d5-4e11-8fce-67cc4171d8a8_760x350.jpeg 848w, https://substackcdn.com/image/fetch/$s_!w3RC!,w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fec41c1b5-a8d5-4e11-8fce-67cc4171d8a8_760x350.jpeg 1272w, https://substackcdn.com/image/fetch/$s_!w3RC!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fec41c1b5-a8d5-4e11-8fce-67cc4171d8a8_760x350.jpeg 1456w\" sizes=\"100vw\" fetchpriority=\"high\"></picture><div class=\"image-link-expand\"><div class=\"pencraft pc-display-flex pc-gap-8 pc-reset\"><div class=\"pencraft pc-reset icon-container restack-image\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-refresh-cw\"><path d=\"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\"></path><path d=\"M21 3v5h-5\"></path><path d=\"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\"></path><path d=\"M8 16H3v5\"></path></svg></div><div class=\"pencraft pc-reset icon-container view-image\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-maximize2\"><polyline points=\"15 3 21 3 21 9\"></polyline><polyline points=\"9 21 3 21 3 15\"></polyline><line x1=\"21\" x2=\"14\" y1=\"3\" y2=\"10\"></line><line x1=\"3\" x2=\"10\" y1=\"21\" y2=\"14\"></line></svg></div></div></div></div></a></figure></div><blockquote><p>글 링크 : <a href=\"https://medium.com/p/a5839ee8646a\">https://medium.com/p/a5839ee8646a</a></p></blockquote><h2><strong>소개</strong></h2><p>과거부터 꽤 제기되어온 주제였지만, 도구가 편리해지고, 당연시되면서 점차 잊혔던 질문을 다시 하는 글입니다. 개발자 경험 우선주의로 인해 사용자 경험이 희생되고, 단순한 콘텐츠 사이트조차 빌드 파이프라인과 복잡한 프레임워크를 필요로 하게 된 현실을 비판적으로 분석하는데요. 글의 내용에 대해 어느 정도 공감을 하지 않은 부분도 있지만 (그리고, 제목이 매우 고자극이지만), 리액트를 당연하게 선택하는 지금의 개발 문화에 대해 고민해 볼 법한 여러 주제를 던집니다. 재밌게 읽어주세요! 😁</p><h2><strong>목차</strong></h2><ul><li><p>어떻게 여기까지 오게 되었는가</p></li><li><p>개발자 경험(Developer Experience)의 숭배(cult)</p></li><li><p>복잡성이 기본값이 됩니다</p></li><li><p>스택이 스스로를 되돌아보며 재구축하고 있습니다</p></li><li><p>반복과 불안정성의 순환</p></li><li><p>마케터와 사용자에 대한 부수적 피해</p></li><li><p>자바스크립트는 강력하지만, 잘못 사용되고 있습니다</p></li><li><p>권력 문제</p></li><li><p>작동하는 웹사이트</p></li><li><p>웹을 되찾기</p></li></ul>",
    "createdAt": "2025-07-10T23:30:35.000+00:00",
    "link": "https://kofearticle.substack.com/p/korean-fe-article-000",
    "author": "",
    "site": {
      "id": "3",
      "url": "https://kofearticle.substack.com/feed",
      "name": "kofearticle"
    }
  },
  {
    "title": "[Korean FE Article] TanStack Form vs React Hook Form",
    "content": "<div class=\"captioned-image-container\"><figure><a class=\"image-link image2 is-viewable-img\" target=\"_blank\" href=\"https://substackcdn.com/image/fetch/$s_!iyu_!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb0516f16-8ac9-4c42-bcad-6f2f061ea76d_895x597.png\" data-component-name=\"Image2ToDOM\"><div class=\"image2-inset\"><picture><source type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/$s_!iyu_!,w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb0516f16-8ac9-4c42-bcad-6f2f061ea76d_895x597.png 424w, https://substackcdn.com/image/fetch/$s_!iyu_!,w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb0516f16-8ac9-4c42-bcad-6f2f061ea76d_895x597.png 848w, https://substackcdn.com/image/fetch/$s_!iyu_!,w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb0516f16-8ac9-4c42-bcad-6f2f061ea76d_895x597.png 1272w, https://substackcdn.com/image/fetch/$s_!iyu_!,w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb0516f16-8ac9-4c42-bcad-6f2f061ea76d_895x597.png 1456w\" sizes=\"100vw\"><img src=\"https://substackcdn.com/image/fetch/$s_!iyu_!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb0516f16-8ac9-4c42-bcad-6f2f061ea76d_895x597.png\" width=\"895\" height=\"597\" data-attrs=\"{\"src\":\"https://substack-post-media.s3.amazonaws.com/public/images/b0516f16-8ac9-4c42-bcad-6f2f061ea76d_895x597.png\",\"srcNoWatermark\":null,\"fullscreen\":null,\"imageSize\":null,\"height\":597,\"width\":895,\"resizeWidth\":null,\"bytes\":null,\"alt\":\"TanStack Form vs. React Hook Form\",\"title\":null,\"type\":null,\"href\":null,\"belowTheFold\":false,\"topImage\":true,\"internalRedirect\":null,\"isProcessing\":false,\"align\":null,\"offset\":false}\" class=\"sizing-normal\" alt=\"TanStack Form vs. React Hook Form\" title=\"TanStack Form vs. React Hook Form\" srcset=\"https://substackcdn.com/image/fetch/$s_!iyu_!,w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb0516f16-8ac9-4c42-bcad-6f2f061ea76d_895x597.png 424w, https://substackcdn.com/image/fetch/$s_!iyu_!,w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb0516f16-8ac9-4c42-bcad-6f2f061ea76d_895x597.png 848w, https://substackcdn.com/image/fetch/$s_!iyu_!,w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb0516f16-8ac9-4c42-bcad-6f2f061ea76d_895x597.png 1272w, https://substackcdn.com/image/fetch/$s_!iyu_!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb0516f16-8ac9-4c42-bcad-6f2f061ea76d_895x597.png 1456w\" sizes=\"100vw\" fetchpriority=\"high\"></picture><div class=\"image-link-expand\"><div class=\"pencraft pc-display-flex pc-gap-8 pc-reset\"><div class=\"pencraft pc-reset icon-container restack-image\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-refresh-cw\"><path d=\"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\"></path><path d=\"M21 3v5h-5\"></path><path d=\"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\"></path><path d=\"M8 16H3v5\"></path></svg></div><div class=\"pencraft pc-reset icon-container view-image\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-maximize2\"><polyline points=\"15 3 21 3 21 9\"></polyline><polyline points=\"9 21 3 21 3 15\"></polyline><line x1=\"21\" x2=\"14\" y1=\"3\" y2=\"10\"></line><line x1=\"3\" x2=\"10\" y1=\"21\" y2=\"14\"></line></svg></div></div></div></div></a></figure></div><blockquote><p>글 링크 : <a href=\"https://ykss.netlify.app/translation/tanstack_form_vs_react_hook_form/\">https://ykss.netlify.app/translation/tanstack_form_vs_react_hook_form</a></p></blockquote><h2><strong>소개</strong></h2><p>이 글은 리액트 기반의 폼 상태 관리 라이브러리인 TanStack Form과 React Hook Form을 비교하며, 두 도구가 어떤 특징을 가지고 있고, 실제로 어떤 상황에서 각각의 장점이 드러나는지에 대해 TanStack Form을 중심으로 설명합니다. 각 라이브러리의 철학, API 설계, 성능, 에코시스템의 방향성 등을 구체적인 예시와 함께 다뤄, 실제 프로젝트에서 어떤 선택이 더 적합할지 고민하는 데 도움이 됩니다.</p><p>리액트로 폼을 구성할 때 어떤 기준으로 라이브러리를 선택해야 할지, 그리고 새로운 대안으로 떠오르는 TanStack Form이 어떤 가치를 제공하는지를 이해하는 데 유익한 글입니다. 폼 라이브러리에 대한 고민이 있다면 꼭 한 번 읽어보시길 추천해 드립니다. 😊</p><h2><strong>목차</strong></h2><ul><li><p>TanStack Form이란?</p></li><li><p>TanStack Form의 특징</p></li><li><p>TanStack Form 사용법</p></li><li><p>TanStack Form에서의 반응성(Reactivity)</p></li><li><p>React Hook Form 개요</p></li><li><p>TanStack Form vs React Hook Form</p></li><li><p>요약 비교 (TL;DR)</p></li><li><p>어떤 것을 선택해야 할까요?</p></li></ul>",
    "createdAt": "2025-07-10T00:30:27.000+00:00",
    "link": "https://kofearticle.substack.com/p/korean-fe-article-tanstack-form-vs",
    "author": "",
    "site": {
      "id": "3",
      "url": "https://kofearticle.substack.com/feed",
      "name": "kofearticle"
    }
  },
  {
    "title": "[Korean FE Article] Ecma International, ECMAScript 2025 승인: 새로운 기능은?",
    "content": "<div class=\"captioned-image-container\"><figure><a class=\"image-link image2 is-viewable-img\" target=\"_blank\" href=\"https://substackcdn.com/image/fetch/$s_!Kd_d!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa75d268b-5043-4625-af9f-597339c2ea5b_1536x880.png\" data-component-name=\"Image2ToDOM\"><div class=\"image2-inset\"><picture><source type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/$s_!Kd_d!,w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa75d268b-5043-4625-af9f-597339c2ea5b_1536x880.png 424w, https://substackcdn.com/image/fetch/$s_!Kd_d!,w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa75d268b-5043-4625-af9f-597339c2ea5b_1536x880.png 848w, https://substackcdn.com/image/fetch/$s_!Kd_d!,w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa75d268b-5043-4625-af9f-597339c2ea5b_1536x880.png 1272w, https://substackcdn.com/image/fetch/$s_!Kd_d!,w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa75d268b-5043-4625-af9f-597339c2ea5b_1536x880.png 1456w\" sizes=\"100vw\"><img src=\"https://substackcdn.com/image/fetch/$s_!Kd_d!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa75d268b-5043-4625-af9f-597339c2ea5b_1536x880.png\" width=\"1456\" height=\"834\" data-attrs=\"{\"src\":\"https://substack-post-media.s3.amazonaws.com/public/images/a75d268b-5043-4625-af9f-597339c2ea5b_1536x880.png\",\"srcNoWatermark\":null,\"fullscreen\":null,\"imageSize\":null,\"height\":834,\"width\":1456,\"resizeWidth\":null,\"bytes\":526896,\"alt\":null,\"title\":null,\"type\":\"image/png\",\"href\":null,\"belowTheFold\":false,\"topImage\":true,\"internalRedirect\":\"https://kofearticle.substack.com/i/167664116?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa75d268b-5043-4625-af9f-597339c2ea5b_1536x880.png\",\"isProcessing\":false,\"align\":null,\"offset\":false}\" class=\"sizing-normal\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/$s_!Kd_d!,w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa75d268b-5043-4625-af9f-597339c2ea5b_1536x880.png 424w, https://substackcdn.com/image/fetch/$s_!Kd_d!,w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa75d268b-5043-4625-af9f-597339c2ea5b_1536x880.png 848w, https://substackcdn.com/image/fetch/$s_!Kd_d!,w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa75d268b-5043-4625-af9f-597339c2ea5b_1536x880.png 1272w, https://substackcdn.com/image/fetch/$s_!Kd_d!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa75d268b-5043-4625-af9f-597339c2ea5b_1536x880.png 1456w\" sizes=\"100vw\" fetchpriority=\"high\"></picture><div class=\"image-link-expand\"><div class=\"pencraft pc-display-flex pc-gap-8 pc-reset\"><div class=\"pencraft pc-reset icon-container restack-image\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-refresh-cw\"><path d=\"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\"></path><path d=\"M21 3v5h-5\"></path><path d=\"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\"></path><path d=\"M8 16H3v5\"></path></svg></div><div class=\"pencraft pc-reset icon-container view-image\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-maximize2\"><polyline points=\"15 3 21 3 21 9\"></polyline><polyline points=\"9 21 3 21 3 15\"></polyline><line x1=\"21\" x2=\"14\" y1=\"3\" y2=\"10\"></line><line x1=\"3\" x2=\"10\" y1=\"21\" y2=\"14\"></line></svg></div></div></div></div></a></figure></div><blockquote><p>글 링크: <a href=\"https://emewjin.github.io/es-new/\">https://emewjin.github.io/es-new/</a></p></blockquote><h2><strong>소개</strong></h2><p>2025년 6월 25일, 제129회 Ecma 총회에서 ECMAScript 2025 언어 사양이 공식적으로 승인되었습니다. 이번 글은 짧지만 ES2025에 포함되는 주요 내용을 소개하고 있는데요, 후루룩 확인해보시는 건 어떨까요?</p><h2><strong>목차</strong></h2><ul><li><p>1. ECMAScript 2025의 편집자들</p></li><li><p>2. ECMAScript 2025의 새로운 기능은?</p><ul><li><p>2.1 `import` 속성과 JSON 모듈</p></li><li><p>2.2 이터레이터 헬퍼 메서드</p></li><li><p>2.3 새로운 Set 메서드</p></li><li><p>2.4 `RegExp.escape()`</p></li><li><p>2.5 정규식 패턴 수정자 (인라인 플래그)</p></li><li><p>2.6 중복된 이름의 캡처 그룹</p></li><li><p>2.7 `Promise.try()`</p></li><li><p>2.8 16비트 부동 소수점 숫자(float16) 지원</p></li></ul></li></ul><p></p>",
    "createdAt": "2025-07-08T00:50:58.000+00:00",
    "link": "https://kofearticle.substack.com/p/korean-fe-article-ecma-international",
    "author": "",
    "site": {
      "id": "3",
      "url": "https://kofearticle.substack.com/feed",
      "name": "kofearticle"
    }
  },
  {
    "title": "Better CSS Shapes Using shape() — Part 4: Close and Move",
    "content": "<p>This is the fourth post in a series about the new CSS <a href=\"https://css-tricks.com/almanac/functions/s/shape/\"><code>shape()</code></a> function. So far, we’ve covered the most common commands you will use to draw various shapes, including lines, arcs, and curves. This time, I want to introduce you to two more commands: <code>close</code> and <code>move</code>. They’re fairly simple in practice, and I think you will rarely use them, but they are incredibly useful when you need them.</p>\r\n\r\n\r\n\r\n<span id=\"more-387613\"></span>\r\n\r\n\r\n\r\n<div class=\"wp-block-group ticss-ad1a3c1b\"><div class=\"wp-block-group__inner-container is-layout-flow wp-block-group-is-layout-flow\"><h4 class=\"wp-block-heading\" id=\"better-css-shapes-using-shape\">Better CSS Shapes Using <code>shape()</code></h4>\r\n\r\n\r\n<ol class=\"wp-block-list\">\r\n<li><a href=\"https://css-tricks.com/better-css-shapes-using-shape-part-1-lines-and-arcs/\">Lines and Arcs</a></li>\r\n\r\n\r\n\r\n<li><a href=\"https://css-tricks.com/better-css-shapes-using-shape-part-2-more-on-arcs/\">More on Arcs</a></li>\r\n\r\n\r\n\r\n<li><a href=\"https://css-tricks.com/better-css-shapes-using-shape-part-3-curves/\">Curves</a></li>\r\n\r\n\r\n\r\n<li>Close and Move (you are here!)</li>\r\n</ol>\r\n</div></div>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"the-close-command\">The <code>close</code> command</h3>\r\n\r\n\r\n<p>In <a href=\"https://css-tricks.com/better-css-shapes-using-shape-part-1-lines-and-arcs/\">the first part</a>, we said that <code>shape()</code> always starts with a <code>from</code> command to define the first starting point but what about the end? It should end with a <code>close</code> command.</p>\r\n\r\n\r\n\r\n<blockquote class=\"wp-block-quote is-layout-flow wp-block-quote-is-layout-flow\">\r\n<p>But you never used any <code>close</code> command in the previous articles!?</p>\r\n</blockquote>\r\n\r\n\r\n\r\n<p>That’s true. I never did because I either “close” the shape myself or rely on the browser to “close” it for me. Said like that, it’s a bit confusing, but let’s take a simple example to better understand:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">clip-path: shape(from 0 0, line to 100% 0, line to 100% 100%) </code></pre>\r\n\r\n\r\n\r\n<p>If you try this code, you will get a triangle shape, but if you look closely, you will notice that we have only two line commands whereas, to draw a triangle, we need a total of three lines. The last line between <code>100% 100%</code> and <code>0 0</code> is implicit, and that’s the part where the browser is closing the shape for me without having to explicitly use a <code>close</code> command.</p>\r\n\r\n\r\n\r\n<p>I could have written the following:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">clip-path: shape(from 0 0, line to 100% 0, line to 100% 100%, close)</code></pre>\r\n\r\n\r\n\r\n<p>Or instead, define the last line by myself:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">clip-path: shape(from 0 0, line to 100% 0, line to 100% 100%, line to 0 0)</code></pre>\r\n\r\n\r\n\r\n<p>But since the browser is able to close the shape alone, there is no need to add that last <code>line</code> command nor do we need to explicitly add the <code>close</code> command.</p>\r\n\r\n\r\n\r\n<p>This might lead you to think that the <code>close</code> command is useless, right? It’s true in most cases (after all, I have written three articles about <code>shape()</code> without using it), but it’s important to know about it and what it does. In some particular cases, it can be useful, especially if used in the middle of a shape.</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_KwpxGEp/aef0671d5c808480d3257cadbcdda568\" src=\"//codepen.io/anon/embed/preview/KwpxGEp/aef0671d5c808480d3257cadbcdda568?height=450&theme-id=1&slug-hash=KwpxGEp/aef0671d5c808480d3257cadbcdda568&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed KwpxGEp/aef0671d5c808480d3257cadbcdda568\" title=\"CodePen Embed KwpxGEp/aef0671d5c808480d3257cadbcdda568\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>In this example, my starting point is the center and the logic of the shape is to draw four triangles. In the process, I need to get back to the center each time. So, instead of writing <code>line to center</code>, I simply write <code>close</code> and the browser will automatically get back to the initial point!</p>\r\n\r\n\r\n\r\n<p>Intuitively, we should write the following:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">clip-path: shape( \r\n  from center, \r\n  line to 20%  0,   hline by 60%, line to center, /* triangle 1 */\r\n  line to 100% 20%, vline by 60%, line to center, /* triangle 2 */\r\n  line to 20% 100%, hline by 60%, line to center, /* triangle 3 */\r\n  line to 0   20%,  vline by 60% /* triangle 4 */\r\n)</code></pre>\r\n\r\n\r\n\r\n<p>But we can optimize it a little and simply do this instead:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">clip-path: shape( \r\n  from center, \r\n  line to 20%  0,   hline by 60%, close,\r\n  line to 100% 20%, vline by 60%, close,\r\n  line to 20% 100%, hline by 60%, close,\r\n  line to 0    20%, vline by 60%\r\n)</code></pre>\r\n\r\n\r\n\r\n<p>We write less code, sure, but another important thing is that if I update the <code>center</code> value with another position, <strong>the</strong> <code>close</code> <strong>command will follow that position</strong>.</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_Kwpbvma/25e24292ffd49924981d4897dca2fb79\" src=\"//codepen.io/anon/embed/preview/Kwpbvma/25e24292ffd49924981d4897dca2fb79?height=450&theme-id=1&slug-hash=Kwpbvma/25e24292ffd49924981d4897dca2fb79&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed Kwpbvma/25e24292ffd49924981d4897dca2fb79\" title=\"CodePen Embed Kwpbvma/25e24292ffd49924981d4897dca2fb79\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>Don’t forget about this trick. It can help you optimize a lot of shapes by writing less code.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"the-move-command\">The <code>move</code> command</h3>\r\n\r\n\r\n<p>Let’s turn our attention to another <code>shape()</code> command you may rarely use, but can be incredibly useful in certain situations: the <code>move</code> command.</p>\r\n\r\n\r\n\r\n<p>Most times when we need to draw a shape, it’s actually <em>one continuous shape</em>. But it may happen that our shape is composed of different parts not linked together. In these situations, the <code>move</code> command is what you will need.</p>\r\n\r\n\r\n\r\n<p>Let’s take an example, similar to the previous one, but this time the triangles don’t touch each other:</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_WbvgYeb/6eb4d145ead0b3c000ff1bb8b903ed4c\" src=\"//codepen.io/anon/embed/preview/WbvgYeb/6eb4d145ead0b3c000ff1bb8b903ed4c?height=450&theme-id=1&slug-hash=WbvgYeb/6eb4d145ead0b3c000ff1bb8b903ed4c&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed WbvgYeb/6eb4d145ead0b3c000ff1bb8b903ed4c\" title=\"CodePen Embed WbvgYeb/6eb4d145ead0b3c000ff1bb8b903ed4c\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>Intuitively, we may think we need four separate elements, with its own <code>shape()</code> definition. But the that example is a single shape!</p>\r\n\r\n\r\n\r\n<p>The trick is to draw the first triangle, then “move” somewhere else to draw the next one, and so on. The <code>move</code> command is similar to the <code>from</code> command but we use it in the middle of <code>shape()</code>.</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">clip-path: shape(\r\n  from    50% 40%, line to 20%  0,   hline by 60%, close, /* triangle 1 */\r\n  move to 60% 50%, line to 100% 20%, vline by 60%, close, /* triangle 2 */\r\n  move to 50% 60%, line to 20% 100%, hline by 60%, close, /* triangle 3 */\r\n  move to 40% 50%, line to 0   20%,  vline by 60% /* triangle 4 */\r\n)</code></pre>\r\n\r\n\r\n\r\n<p>After drawing the first triangle, we “close” it and “move” to a new point to draw the next triangle. We can have multiple shapes using a single <code>shape()</code> definition. A more generic code will look like the below:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">clip-path: shape(\r\n  from    X1 Y1, ..., close, /* shape 1 */\r\n  move to X2 Y2, ..., close, /* shape 2 */\r\n  ...\r\n  move to Xn Yn, ... /* shape N */\r\n)</code></pre>\r\n\r\n\r\n\r\n<p>The <code>close</code> commands before the <code>move</code> commands aren’t mandatory, so the code can be simplified to this:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">clip-path: shape(\r\n  from    X1 Y1, ..., /* shape 1 */\r\n  move to X2 Y2, ..., /* shape 2 */\r\n  ...\r\n  move to Xn Yn, ... /* shape N */\r\n)</code></pre>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_WbvYPBL/fad2cc952270358a11425d6f3cded1e2\" src=\"//codepen.io/anon/embed/preview/WbvYPBL/fad2cc952270358a11425d6f3cded1e2?height=450&theme-id=1&slug-hash=WbvYPBL/fad2cc952270358a11425d6f3cded1e2&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed WbvYPBL/fad2cc952270358a11425d6f3cded1e2\" title=\"CodePen Embed WbvYPBL/fad2cc952270358a11425d6f3cded1e2\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>Let’s look at a few interesting use cases where this technique can be helpful.</p>\r\n\r\n\r\n<h4 class=\"wp-block-heading\" id=\"cut-out-shapes\">Cut-out shapes</h4>\r\n\r\n\r\n<p>Previously, I shared a trick on <a href=\"https://css-tip.com/cut-out-shapes/\" rel=\"noopener\">how to create cut-out shapes</a> using <code>clip-path: polygon()</code>. Starting from any kind of polygon, we can easily invert it to get its cut-out version:</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_gOJvdav\" src=\"//codepen.io/anon/embed/preview/gOJvdav?height=450&theme-id=1&slug-hash=gOJvdav&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed gOJvdav\" title=\"CodePen Embed gOJvdav\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>We can do the same using <code>shape()</code>. The idea is to have an intersection between the main shape and the rectangle shape that fits the element boundaries. We need two shapes, hence the need for the <code>move</code> command.</p>\r\n\r\n\r\n\r\n<p>The code is as follows:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.shape {\r\n  clip-path: shape(from ...., move to 0 0, hline to 100%, vline to 100%, hline to 0);\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>You start by creating your main shape and then you “move” to <code>0 0</code> and you create the rectangle shape (Remember, It’s the first shape we create in <a href=\"https://css-tricks.com/better-css-shapes-using-shape-part-1-lines-and-arcs/#aa-rectangle\">the first part of this series</a>). We can even go further and introduce a CSS variable to easily switch between the normal shape and the inverted one.</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.shape {\r\n  clip-path: shape(from .... var(--i,));\r\n}\r\n.invert {\r\n  --i:,move to 0 0, hline to 100%, vline to 100%, hline to 0;\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>By default, <code>--i</code> is not defined so <code>var(--i,)</code>will be empty and we get the main shape. If we define the variable with the rectangle shape, we get the inverted version.</p>\r\n\r\n\r\n\r\n<p>Here is an example using a rounded hexagon shape:</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_WbvYWNr/2586e5e748c02e41dec139ccdbc22971\" src=\"//codepen.io/anon/embed/preview/WbvYWNr/2586e5e748c02e41dec139ccdbc22971?height=700&theme-id=1&slug-hash=WbvYWNr/2586e5e748c02e41dec139ccdbc22971&default-tab=result\" height=\"700\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed WbvYWNr/2586e5e748c02e41dec139ccdbc22971\" title=\"CodePen Embed WbvYWNr/2586e5e748c02e41dec139ccdbc22971\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>In reality, the code should be as follows:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.shape {\r\n  clip-path: shape(evenodd from .... var(--i,));\r\n}\r\n.invert {\r\n  --i:,move to 0 0, hline to 100%, vline to 100%, hline to 0;\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>Notice the <code>evenodd</code> I am adding at the beginning of <code>shape()</code>. I won’t bother you with a detailed explanation on what it does but in some cases, the inverted shape is not visible and the fix is to add <code>evenodd</code> at the beginning. You can check <a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Reference/Attribute/fill-rule\" rel=\"noopener\">the MDN page for more details</a>.</p>\r\n\r\n\r\n\r\n<p>Another improvement we can do is to add a variable to control the space around the shape. Let’s suppose you want to make the hexagon shape of the previous example smaller. It‘s tedious to update the code of the hexagon but it’s easier to update the code of the rectangle shape.</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.shape {\r\n  clip-path: shape(evenodd from ... var(--i,)) content-box;\r\n}\r\n.invert {\r\n  --d: 20px;\r\n  padding: var(--d);\r\n  --i: ,move to calc(-1*var(--d)) calc(-1*var(--d)),\r\n        hline to calc(100% + var(--d)),\r\n        vline to calc(100% + var(--d)),\r\n        hline to calc(-1*var(--d));\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>We first update the reference box of the shape to be <code>content-box</code>. Then we add some padding which will logically reduce the area of the shape since it will no longer include the padding (nor the border). The padding is excluded (invisible) by default and here comes the trick where we update the rectangle shape to re-include the padding.</p>\r\n\r\n\r\n\r\n<p>That is why the <code>--i</code> variable is so verbose. It uses the value of the padding to extend the rectangle area and cover the whole element as if we didn’t have <code>content-box</code>.</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_WbvYWRG/b409a57e82d07eb39c5e9d667b7a708c\" src=\"//codepen.io/anon/embed/preview/WbvYWRG/b409a57e82d07eb39c5e9d667b7a708c?height=450&theme-id=1&slug-hash=WbvYWRG/b409a57e82d07eb39c5e9d667b7a708c&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed WbvYWRG/b409a57e82d07eb39c5e9d667b7a708c\" title=\"CodePen Embed WbvYWRG/b409a57e82d07eb39c5e9d667b7a708c\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>Not only you can easily invert any kind of shape, but you can also control the space around it! Here is another demo using the CSS-Tricks logo to illustrate how easy the method is:</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_PwqxMaN/6e8c6ea82dd95d7282fadb85894e245c\" src=\"//codepen.io/anon/embed/preview/PwqxMaN/6e8c6ea82dd95d7282fadb85894e245c?height=450&theme-id=1&slug-hash=PwqxMaN/6e8c6ea82dd95d7282fadb85894e245c&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed PwqxMaN/6e8c6ea82dd95d7282fadb85894e245c\" title=\"CodePen Embed PwqxMaN/6e8c6ea82dd95d7282fadb85894e245c\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>This exact same example is available in my <a href=\"https://css-generators.com/svg-to-css/\" rel=\"noopener\">SVG-to-CSS converter</a>, providing you with the <code>shape()</code> code without having to do all of the math.</p>\r\n\r\n\r\n<h4 class=\"wp-block-heading\" id=\"repetitive-shapes\">Repetitive shapes</h4>\r\n\r\n\r\n<p>Another interesting use case of the <code>move</code> command is when we need to repeat the same shape multiple times. Do you remember the difference between the <code>by</code> and the <code>to</code> directives? The <code>by</code> directive allows us to define relative coordinates considering the previous point. So, if we create our shape using only <code>by</code>, we can easily reuse the same code as many times as we want.</p>\r\n\r\n\r\n\r\n<p>Let’s start with a simple example of a circle shape:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">clip-path: shape(from X Y, arc by 0 -50px of 1%, arc by 0 50px of 1%)</code></pre>\r\n\r\n\r\n\r\n<p>Starting from <code>X Y</code>, I draw a first arc moving upward by <code>50px</code>, then I get back to <code>X Y</code> with another arc using the same offset, but downward. If you are a bit lost with the syntax, try reviewing <a href=\"https://css-tricks.com/better-css-shapes-using-shape-part-1-lines-and-arcs/\">Part 1</a> to refresh your memory about the <code>arc</code> command.</p>\r\n\r\n\r\n\r\n<p>How I drew the shape is not important. What is important is that whatever the value of <code>X Y</code> is, I will always get the same circle but in a different position. Do you see where I am going with this idea? If I want to add another circle, I simply repeat the same code with a different <code>X Y</code>.</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">clip-path: shape(\r\n  from    X1 Y1, arc by 0 -50px of 1%, arc by 0 50px of 1%,\r\n  move to X2 Y2, arc by 0 -50px of 1%, arc by 0 50px of 1%\r\n)</code></pre>\r\n\r\n\r\n\r\n<p>And since the code is the same, I can store the circle shape into a CSS variable and draw as many circles as I want:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.shape {\r\n  --sh:, arc by 0 -50px of 1%, arc by 0 50px of 1%;\r\n  \r\n  clip-path: shape(\r\n    from    X1 Y1 var(--sh),\r\n    move to X2 Y2 var(--sh),\r\n    ... \r\n    move to Xn Yn var(--sh)\r\n  ) \r\n}</code></pre>\r\n\r\n\r\n\r\n<p>You don’t want a circle? Easy, you can update the <code>--sh</code> variable with any shape you want. Here is an example with three different shapes:</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_MYwZgEL/97583111b04d9aeb8d850ea02ea49289\" src=\"//codepen.io/anon/embed/preview/MYwZgEL/97583111b04d9aeb8d850ea02ea49289?height=450&theme-id=1&slug-hash=MYwZgEL/97583111b04d9aeb8d850ea02ea49289&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed MYwZgEL/97583111b04d9aeb8d850ea02ea49289\" title=\"CodePen Embed MYwZgEL/97583111b04d9aeb8d850ea02ea49289\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>And guess what? You can invert the whole thing using the cut-out technique by adding the rectangle shape at the end:</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_ByNEgVw/94fc702f01d47459f7a89a22644cf27d\" src=\"//codepen.io/anon/embed/preview/ByNEgVw/94fc702f01d47459f7a89a22644cf27d?height=500&theme-id=1&slug-hash=ByNEgVw/94fc702f01d47459f7a89a22644cf27d&default-tab=result\" height=\"500\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed ByNEgVw/94fc702f01d47459f7a89a22644cf27d\" title=\"CodePen Embed ByNEgVw/94fc702f01d47459f7a89a22644cf27d\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>This code is a perfect example of the <code>shape()</code> function’s power. We don’t have any code duplication and we can simply adjust the shape with CSS variables. This is something we are unable to achieve with the <code>path()</code> function because it doesn’t support variables.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"conclusion\">Conclusion</h3>\r\n\r\n\r\n<p>That’s all for this fourth installment of our series on the CSS <code>shape()</code> function! We didn’t make any super complex shapes, but we learned how two simple commands can open a lot of possibilities of what can be done using <code>shape()</code>.</p>\r\n\r\n\r\n\r\n<p>Just for fun, here is one more demo recreating a classic <a href=\"https://css-tip.com/dots-loader/\" rel=\"noopener\">three-dot loader</a> using the last technique we covered. Notice how much further we could go, adding things like animation to the mix:</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_azOPoaO\" src=\"//codepen.io/anon/embed/preview/azOPoaO?height=450&theme-id=1&slug-hash=azOPoaO&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed azOPoaO\" title=\"CodePen Embed azOPoaO\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<div class=\"wp-block-group ticss-ad1a3c1b\"><div class=\"wp-block-group__inner-container is-layout-flow wp-block-group-is-layout-flow\"><h4 class=\"wp-block-heading\" id=\"better-css-shapes-using-shape\">Better CSS Shapes Using <code>shape()</code></h4>\r\n\r\n\r\n<ol class=\"wp-block-list\">\r\n<li><a href=\"https://css-tricks.com/better-css-shapes-using-shape-part-1-lines-and-arcs/\">Lines and Arcs</a></li>\r\n\r\n\r\n\r\n<li><a href=\"https://css-tricks.com/better-css-shapes-using-shape-part-2-more-on-arcs/\">More on Arcs</a></li>\r\n\r\n\r\n\r\n<li><a href=\"https://css-tricks.com/better-css-shapes-using-shape-part-3-curves/\">Curves</a></li>\r\n\r\n\r\n\r\n<li>Close and Move (you are here!)</li>\r\n</ol>\r\n</div></div>\r\n<hr />\r\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/better-css-shapes-using-shape-part-4-close-and-move/\">Better CSS Shapes Using shape() — Part 4: Close and Move</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&utm_source=css-tricks.com&utm_campaign=family_&utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
    "createdAt": "2025-07-07T12:48:29.000+00:00",
    "link": "https://css-tricks.com/better-css-shapes-using-shape-part-4-close-and-move/",
    "author": "",
    "site": {
      "id": "4",
      "url": "https://css-tricks.com/category/articles/feed",
      "name": "cssTrick"
    }
  },
  {
    "title": "Better CSS Shapes Using shape() — Part 4: Close and Move",
    "content": "<p>This is the fourth post in a series about the new CSS <a href=\"https://css-tricks.com/almanac/functions/s/shape/\"><code>shape()</code></a> function. So far, we’ve covered the most common commands you will use to draw various shapes, including lines, arcs, and curves. This time, I want to introduce you to two more commands: <code>close</code> and <code>move</code>. They’re fairly simple in practice, and I think you will rarely use them, but they are incredibly useful when you need them.</p>\r\n\r\n\r\n\r\n<span id=\"more-387613\"></span>\r\n\r\n\r\n\r\n<div class=\"wp-block-group ticss-ad1a3c1b\"><div class=\"wp-block-group__inner-container is-layout-flow wp-block-group-is-layout-flow\"><h4 class=\"wp-block-heading\" id=\"better-css-shapes-using-shape\">Better CSS Shapes Using <code>shape()</code></h4>\r\n\r\n\r\n<ol class=\"wp-block-list\">\r\n<li><a href=\"https://css-tricks.com/better-css-shapes-using-shape-part-1-lines-and-arcs/\">Lines and Arcs</a></li>\r\n\r\n\r\n\r\n<li><a href=\"https://css-tricks.com/better-css-shapes-using-shape-part-2-more-on-arcs/\">More on Arcs</a></li>\r\n\r\n\r\n\r\n<li><a href=\"https://css-tricks.com/better-css-shapes-using-shape-part-3-curves/\">Curves</a></li>\r\n\r\n\r\n\r\n<li>Close and Move (you are here!)</li>\r\n</ol>\r\n</div></div>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"the-close-command\">The <code>close</code> command</h3>\r\n\r\n\r\n<p>In <a href=\"https://css-tricks.com/better-css-shapes-using-shape-part-1-lines-and-arcs/\">the first part</a>, we said that <code>shape()</code> always starts with a <code>from</code> command to define the first starting point but what about the end? It should end with a <code>close</code> command.</p>\r\n\r\n\r\n\r\n<blockquote class=\"wp-block-quote is-layout-flow wp-block-quote-is-layout-flow\">\r\n<p>But you never used any <code>close</code> command in the previous articles!?</p>\r\n</blockquote>\r\n\r\n\r\n\r\n<p>That’s true. I never did because I either “close” the shape myself or rely on the browser to “close” it for me. Said like that, it’s a bit confusing, but let’s take a simple example to better understand:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">clip-path: shape(from 0 0, line to 100% 0, line to 100% 100%) </code></pre>\r\n\r\n\r\n\r\n<p>If you try this code, you will get a triangle shape, but if you look closely, you will notice that we have only two line commands whereas, to draw a triangle, we need a total of three lines. The last line between <code>100% 100%</code> and <code>0 0</code> is implicit, and that’s the part where the browser is closing the shape for me without having to explicitly use a <code>close</code> command.</p>\r\n\r\n\r\n\r\n<p>I could have written the following:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">clip-path: shape(from 0 0, line to 100% 0, line to 100% 100%, close)</code></pre>\r\n\r\n\r\n\r\n<p>Or instead, define the last line by myself:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">clip-path: shape(from 0 0, line to 100% 0, line to 100% 100%, line to 0 0)</code></pre>\r\n\r\n\r\n\r\n<p>But since the browser is able to close the shape alone, there is no need to add that last <code>line</code> command nor do we need to explicitly add the <code>close</code> command.</p>\r\n\r\n\r\n\r\n<p>This might lead you to think that the <code>close</code> command is useless, right? It’s true in most cases (after all, I have written three articles about <code>shape()</code> without using it), but it’s important to know about it and what it does. In some particular cases, it can be useful, especially if used in the middle of a shape.</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_KwpxGEp/aef0671d5c808480d3257cadbcdda568\" src=\"//codepen.io/anon/embed/preview/KwpxGEp/aef0671d5c808480d3257cadbcdda568?height=450&theme-id=1&slug-hash=KwpxGEp/aef0671d5c808480d3257cadbcdda568&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed KwpxGEp/aef0671d5c808480d3257cadbcdda568\" title=\"CodePen Embed KwpxGEp/aef0671d5c808480d3257cadbcdda568\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>In this example, my starting point is the center and the logic of the shape is to draw four triangles. In the process, I need to get back to the center each time. So, instead of writing <code>line to center</code>, I simply write <code>close</code> and the browser will automatically get back to the initial point!</p>\r\n\r\n\r\n\r\n<p>Intuitively, we should write the following:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">clip-path: shape( \r\n  from center, \r\n  line to 20%  0,   hline by 60%, line to center, /* triangle 1 */\r\n  line to 100% 20%, vline by 60%, line to center, /* triangle 2 */\r\n  line to 20% 100%, hline by 60%, line to center, /* triangle 3 */\r\n  line to 0   20%,  vline by 60% /* triangle 4 */\r\n)</code></pre>\r\n\r\n\r\n\r\n<p>But we can optimize it a little and simply do this instead:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">clip-path: shape( \r\n  from center, \r\n  line to 20%  0,   hline by 60%, close,\r\n  line to 100% 20%, vline by 60%, close,\r\n  line to 20% 100%, hline by 60%, close,\r\n  line to 0    20%, vline by 60%\r\n)</code></pre>\r\n\r\n\r\n\r\n<p>We write less code, sure, but another important thing is that if I update the <code>center</code> value with another position, <strong>the</strong> <code>close</code> <strong>command will follow that position</strong>.</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_Kwpbvma/25e24292ffd49924981d4897dca2fb79\" src=\"//codepen.io/anon/embed/preview/Kwpbvma/25e24292ffd49924981d4897dca2fb79?height=450&theme-id=1&slug-hash=Kwpbvma/25e24292ffd49924981d4897dca2fb79&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed Kwpbvma/25e24292ffd49924981d4897dca2fb79\" title=\"CodePen Embed Kwpbvma/25e24292ffd49924981d4897dca2fb79\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>Don’t forget about this trick. It can help you optimize a lot of shapes by writing less code.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"the-move-command\">The <code>move</code> command</h3>\r\n\r\n\r\n<p>Let’s turn our attention to another <code>shape()</code> command you may rarely use, but can be incredibly useful in certain situations: the <code>move</code> command.</p>\r\n\r\n\r\n\r\n<p>Most times when we need to draw a shape, it’s actually <em>one continuous shape</em>. But it may happen that our shape is composed of different parts not linked together. In these situations, the <code>move</code> command is what you will need.</p>\r\n\r\n\r\n\r\n<p>Let’s take an example, similar to the previous one, but this time the triangles don’t touch each other:</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_WbvgYeb/6eb4d145ead0b3c000ff1bb8b903ed4c\" src=\"//codepen.io/anon/embed/preview/WbvgYeb/6eb4d145ead0b3c000ff1bb8b903ed4c?height=450&theme-id=1&slug-hash=WbvgYeb/6eb4d145ead0b3c000ff1bb8b903ed4c&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed WbvgYeb/6eb4d145ead0b3c000ff1bb8b903ed4c\" title=\"CodePen Embed WbvgYeb/6eb4d145ead0b3c000ff1bb8b903ed4c\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>Intuitively, we may think we need four separate elements, with its own <code>shape()</code> definition. But the that example is a single shape!</p>\r\n\r\n\r\n\r\n<p>The trick is to draw the first triangle, then “move” somewhere else to draw the next one, and so on. The <code>move</code> command is similar to the <code>from</code> command but we use it in the middle of <code>shape()</code>.</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">clip-path: shape(\r\n  from    50% 40%, line to 20%  0,   hline by 60%, close, /* triangle 1 */\r\n  move to 60% 50%, line to 100% 20%, vline by 60%, close, /* triangle 2 */\r\n  move to 50% 60%, line to 20% 100%, hline by 60%, close, /* triangle 3 */\r\n  move to 40% 50%, line to 0   20%,  vline by 60% /* triangle 4 */\r\n)</code></pre>\r\n\r\n\r\n\r\n<p>After drawing the first triangle, we “close” it and “move” to a new point to draw the next triangle. We can have multiple shapes using a single <code>shape()</code> definition. A more generic code will look like the below:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">clip-path: shape(\r\n  from    X1 Y1, ..., close, /* shape 1 */\r\n  move to X2 Y2, ..., close, /* shape 2 */\r\n  ...\r\n  move to Xn Yn, ... /* shape N */\r\n)</code></pre>\r\n\r\n\r\n\r\n<p>The <code>close</code> commands before the <code>move</code> commands aren’t mandatory, so the code can be simplified to this:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">clip-path: shape(\r\n  from    X1 Y1, ..., /* shape 1 */\r\n  move to X2 Y2, ..., /* shape 2 */\r\n  ...\r\n  move to Xn Yn, ... /* shape N */\r\n)</code></pre>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_WbvYPBL/fad2cc952270358a11425d6f3cded1e2\" src=\"//codepen.io/anon/embed/preview/WbvYPBL/fad2cc952270358a11425d6f3cded1e2?height=450&theme-id=1&slug-hash=WbvYPBL/fad2cc952270358a11425d6f3cded1e2&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed WbvYPBL/fad2cc952270358a11425d6f3cded1e2\" title=\"CodePen Embed WbvYPBL/fad2cc952270358a11425d6f3cded1e2\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>Let’s look at a few interesting use cases where this technique can be helpful.</p>\r\n\r\n\r\n<h4 class=\"wp-block-heading\" id=\"cut-out-shapes\">Cut-out shapes</h4>\r\n\r\n\r\n<p>Previously, I shared a trick on <a href=\"https://css-tip.com/cut-out-shapes/\" rel=\"noopener\">how to create cut-out shapes</a> using <code>clip-path: polygon()</code>. Starting from any kind of polygon, we can easily invert it to get its cut-out version:</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_gOJvdav\" src=\"//codepen.io/anon/embed/preview/gOJvdav?height=450&theme-id=1&slug-hash=gOJvdav&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed gOJvdav\" title=\"CodePen Embed gOJvdav\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>We can do the same using <code>shape()</code>. The idea is to have an intersection between the main shape and the rectangle shape that fits the element boundaries. We need two shapes, hence the need for the <code>move</code> command.</p>\r\n\r\n\r\n\r\n<p>The code is as follows:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.shape {\r\n  clip-path: shape(from ...., move to 0 0, hline to 100%, vline to 100%, hline to 0);\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>You start by creating your main shape and then you “move” to <code>0 0</code> and you create the rectangle shape (Remember, It’s the first shape we create in <a href=\"https://css-tricks.com/better-css-shapes-using-shape-part-1-lines-and-arcs/#aa-rectangle\">the first part of this series</a>). We can even go further and introduce a CSS variable to easily switch between the normal shape and the inverted one.</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.shape {\r\n  clip-path: shape(from .... var(--i,));\r\n}\r\n.invert {\r\n  --i:,move to 0 0, hline to 100%, vline to 100%, hline to 0;\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>By default, <code>--i</code> is not defined so <code>var(--i,)</code>will be empty and we get the main shape. If we define the variable with the rectangle shape, we get the inverted version.</p>\r\n\r\n\r\n\r\n<p>Here is an example using a rounded hexagon shape:</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_WbvYWNr/2586e5e748c02e41dec139ccdbc22971\" src=\"//codepen.io/anon/embed/preview/WbvYWNr/2586e5e748c02e41dec139ccdbc22971?height=700&theme-id=1&slug-hash=WbvYWNr/2586e5e748c02e41dec139ccdbc22971&default-tab=result\" height=\"700\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed WbvYWNr/2586e5e748c02e41dec139ccdbc22971\" title=\"CodePen Embed WbvYWNr/2586e5e748c02e41dec139ccdbc22971\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>In reality, the code should be as follows:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.shape {\r\n  clip-path: shape(evenodd from .... var(--i,));\r\n}\r\n.invert {\r\n  --i:,move to 0 0, hline to 100%, vline to 100%, hline to 0;\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>Notice the <code>evenodd</code> I am adding at the beginning of <code>shape()</code>. I won’t bother you with a detailed explanation on what it does but in some cases, the inverted shape is not visible and the fix is to add <code>evenodd</code> at the beginning. You can check <a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Reference/Attribute/fill-rule\" rel=\"noopener\">the MDN page for more details</a>.</p>\r\n\r\n\r\n\r\n<p>Another improvement we can do is to add a variable to control the space around the shape. Let’s suppose you want to make the hexagon shape of the previous example smaller. It‘s tedious to update the code of the hexagon but it’s easier to update the code of the rectangle shape.</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.shape {\r\n  clip-path: shape(evenodd from ... var(--i,)) content-box;\r\n}\r\n.invert {\r\n  --d: 20px;\r\n  padding: var(--d);\r\n  --i: ,move to calc(-1*var(--d)) calc(-1*var(--d)),\r\n        hline to calc(100% + var(--d)),\r\n        vline to calc(100% + var(--d)),\r\n        hline to calc(-1*var(--d));\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>We first update the reference box of the shape to be <code>content-box</code>. Then we add some padding which will logically reduce the area of the shape since it will no longer include the padding (nor the border). The padding is excluded (invisible) by default and here comes the trick where we update the rectangle shape to re-include the padding.</p>\r\n\r\n\r\n\r\n<p>That is why the <code>--i</code> variable is so verbose. It uses the value of the padding to extend the rectangle area and cover the whole element as if we didn’t have <code>content-box</code>.</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_WbvYWRG/b409a57e82d07eb39c5e9d667b7a708c\" src=\"//codepen.io/anon/embed/preview/WbvYWRG/b409a57e82d07eb39c5e9d667b7a708c?height=450&theme-id=1&slug-hash=WbvYWRG/b409a57e82d07eb39c5e9d667b7a708c&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed WbvYWRG/b409a57e82d07eb39c5e9d667b7a708c\" title=\"CodePen Embed WbvYWRG/b409a57e82d07eb39c5e9d667b7a708c\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>Not only you can easily invert any kind of shape, but you can also control the space around it! Here is another demo using the CSS-Tricks logo to illustrate how easy the method is:</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_PwqxMaN/6e8c6ea82dd95d7282fadb85894e245c\" src=\"//codepen.io/anon/embed/preview/PwqxMaN/6e8c6ea82dd95d7282fadb85894e245c?height=450&theme-id=1&slug-hash=PwqxMaN/6e8c6ea82dd95d7282fadb85894e245c&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed PwqxMaN/6e8c6ea82dd95d7282fadb85894e245c\" title=\"CodePen Embed PwqxMaN/6e8c6ea82dd95d7282fadb85894e245c\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>This exact same example is available in my <a href=\"https://css-generators.com/svg-to-css/\" rel=\"noopener\">SVG-to-CSS converter</a>, providing you with the <code>shape()</code> code without having to do all of the math.</p>\r\n\r\n\r\n<h4 class=\"wp-block-heading\" id=\"repetitive-shapes\">Repetitive shapes</h4>\r\n\r\n\r\n<p>Another interesting use case of the <code>move</code> command is when we need to repeat the same shape multiple times. Do you remember the difference between the <code>by</code> and the <code>to</code> directives? The <code>by</code> directive allows us to define relative coordinates considering the previous point. So, if we create our shape using only <code>by</code>, we can easily reuse the same code as many times as we want.</p>\r\n\r\n\r\n\r\n<p>Let’s start with a simple example of a circle shape:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">clip-path: shape(from X Y, arc by 0 -50px of 1%, arc by 0 50px of 1%)</code></pre>\r\n\r\n\r\n\r\n<p>Starting from <code>X Y</code>, I draw a first arc moving upward by <code>50px</code>, then I get back to <code>X Y</code> with another arc using the same offset, but downward. If you are a bit lost with the syntax, try reviewing <a href=\"https://css-tricks.com/better-css-shapes-using-shape-part-1-lines-and-arcs/\">Part 1</a> to refresh your memory about the <code>arc</code> command.</p>\r\n\r\n\r\n\r\n<p>How I drew the shape is not important. What is important is that whatever the value of <code>X Y</code> is, I will always get the same circle but in a different position. Do you see where I am going with this idea? If I want to add another circle, I simply repeat the same code with a different <code>X Y</code>.</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">clip-path: shape(\r\n  from    X1 Y1, arc by 0 -50px of 1%, arc by 0 50px of 1%,\r\n  move to X2 Y2, arc by 0 -50px of 1%, arc by 0 50px of 1%\r\n)</code></pre>\r\n\r\n\r\n\r\n<p>And since the code is the same, I can store the circle shape into a CSS variable and draw as many circles as I want:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.shape {\r\n  --sh:, arc by 0 -50px of 1%, arc by 0 50px of 1%;\r\n  \r\n  clip-path: shape(\r\n    from    X1 Y1 var(--sh),\r\n    move to X2 Y2 var(--sh),\r\n    ... \r\n    move to Xn Yn var(--sh)\r\n  ) \r\n}</code></pre>\r\n\r\n\r\n\r\n<p>You don’t want a circle? Easy, you can update the <code>--sh</code> variable with any shape you want. Here is an example with three different shapes:</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_MYwZgEL/97583111b04d9aeb8d850ea02ea49289\" src=\"//codepen.io/anon/embed/preview/MYwZgEL/97583111b04d9aeb8d850ea02ea49289?height=450&theme-id=1&slug-hash=MYwZgEL/97583111b04d9aeb8d850ea02ea49289&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed MYwZgEL/97583111b04d9aeb8d850ea02ea49289\" title=\"CodePen Embed MYwZgEL/97583111b04d9aeb8d850ea02ea49289\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>And guess what? You can invert the whole thing using the cut-out technique by adding the rectangle shape at the end:</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_ByNEgVw/94fc702f01d47459f7a89a22644cf27d\" src=\"//codepen.io/anon/embed/preview/ByNEgVw/94fc702f01d47459f7a89a22644cf27d?height=500&theme-id=1&slug-hash=ByNEgVw/94fc702f01d47459f7a89a22644cf27d&default-tab=result\" height=\"500\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed ByNEgVw/94fc702f01d47459f7a89a22644cf27d\" title=\"CodePen Embed ByNEgVw/94fc702f01d47459f7a89a22644cf27d\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>This code is a perfect example of the <code>shape()</code> function’s power. We don’t have any code duplication and we can simply adjust the shape with CSS variables. This is something we are unable to achieve with the <code>path()</code> function because it doesn’t support variables.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"conclusion\">Conclusion</h3>\r\n\r\n\r\n<p>That’s all for this fourth installment of our series on the CSS <code>shape()</code> function! We didn’t make any super complex shapes, but we learned how two simple commands can open a lot of possibilities of what can be done using <code>shape()</code>.</p>\r\n\r\n\r\n\r\n<p>Just for fun, here is one more demo recreating a classic <a href=\"https://css-tip.com/dots-loader/\" rel=\"noopener\">three-dot loader</a> using the last technique we covered. Notice how much further we could go, adding things like animation to the mix:</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_azOPoaO\" src=\"//codepen.io/anon/embed/preview/azOPoaO?height=450&theme-id=1&slug-hash=azOPoaO&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed azOPoaO\" title=\"CodePen Embed azOPoaO\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<div class=\"wp-block-group ticss-ad1a3c1b\"><div class=\"wp-block-group__inner-container is-layout-flow wp-block-group-is-layout-flow\"><h4 class=\"wp-block-heading\" id=\"better-css-shapes-using-shape\">Better CSS Shapes Using <code>shape()</code></h4>\r\n\r\n\r\n<ol class=\"wp-block-list\">\r\n<li><a href=\"https://css-tricks.com/better-css-shapes-using-shape-part-1-lines-and-arcs/\">Lines and Arcs</a></li>\r\n\r\n\r\n\r\n<li><a href=\"https://css-tricks.com/better-css-shapes-using-shape-part-2-more-on-arcs/\">More on Arcs</a></li>\r\n\r\n\r\n\r\n<li><a href=\"https://css-tricks.com/better-css-shapes-using-shape-part-3-curves/\">Curves</a></li>\r\n\r\n\r\n\r\n<li>Close and Move (you are here!)</li>\r\n</ol>\r\n</div></div>\r\n<hr />\r\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/better-css-shapes-using-shape-part-4-close-and-move/\">Better CSS Shapes Using shape() — Part 4: Close and Move</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&utm_source=css-tricks.com&utm_campaign=family_&utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
    "createdAt": "2025-07-07T12:48:29.000+00:00",
    "link": "https://css-tricks.com/better-css-shapes-using-shape-part-4-close-and-move/",
    "author": "",
    "site": {
      "id": "5",
      "url": "https://css-tricks.com/category/articles/feed",
      "name": "cssTrick"
    }
  },
  {
    "title": "[Korean FE Article] Agent2Agent (A2A) 프로토콜은 무엇인가요?",
    "content": "<div class=\"captioned-image-container\"><figure><a class=\"image-link image2 is-viewable-img\" target=\"_blank\" href=\"https://substackcdn.com/image/fetch/$s_!SHJb!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff7ce77ea-3d20-4529-92bb-ecac3c6c8aff_1920x1080.jpeg\" data-component-name=\"Image2ToDOM\"><div class=\"image2-inset\"><picture><source type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/$s_!SHJb!,w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff7ce77ea-3d20-4529-92bb-ecac3c6c8aff_1920x1080.jpeg 424w, https://substackcdn.com/image/fetch/$s_!SHJb!,w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff7ce77ea-3d20-4529-92bb-ecac3c6c8aff_1920x1080.jpeg 848w, https://substackcdn.com/image/fetch/$s_!SHJb!,w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff7ce77ea-3d20-4529-92bb-ecac3c6c8aff_1920x1080.jpeg 1272w, https://substackcdn.com/image/fetch/$s_!SHJb!,w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff7ce77ea-3d20-4529-92bb-ecac3c6c8aff_1920x1080.jpeg 1456w\" sizes=\"100vw\"><img src=\"https://substackcdn.com/image/fetch/$s_!SHJb!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff7ce77ea-3d20-4529-92bb-ecac3c6c8aff_1920x1080.jpeg\" width=\"1456\" height=\"819\" data-attrs=\"{\"src\":\"https://substack-post-media.s3.amazonaws.com/public/images/f7ce77ea-3d20-4529-92bb-ecac3c6c8aff_1920x1080.jpeg\",\"srcNoWatermark\":null,\"fullscreen\":null,\"imageSize\":null,\"height\":819,\"width\":1456,\"resizeWidth\":null,\"bytes\":124553,\"alt\":null,\"title\":null,\"type\":\"image/jpeg\",\"href\":null,\"belowTheFold\":false,\"topImage\":true,\"internalRedirect\":\"https://kofearticle.substack.com/i/167637977?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff7ce77ea-3d20-4529-92bb-ecac3c6c8aff_1920x1080.jpeg\",\"isProcessing\":false,\"align\":null,\"offset\":false}\" class=\"sizing-normal\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/$s_!SHJb!,w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff7ce77ea-3d20-4529-92bb-ecac3c6c8aff_1920x1080.jpeg 424w, https://substackcdn.com/image/fetch/$s_!SHJb!,w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff7ce77ea-3d20-4529-92bb-ecac3c6c8aff_1920x1080.jpeg 848w, https://substackcdn.com/image/fetch/$s_!SHJb!,w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff7ce77ea-3d20-4529-92bb-ecac3c6c8aff_1920x1080.jpeg 1272w, https://substackcdn.com/image/fetch/$s_!SHJb!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff7ce77ea-3d20-4529-92bb-ecac3c6c8aff_1920x1080.jpeg 1456w\" sizes=\"100vw\" fetchpriority=\"high\"></picture><div class=\"image-link-expand\"><div class=\"pencraft pc-display-flex pc-gap-8 pc-reset\"><div class=\"pencraft pc-reset icon-container restack-image\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-refresh-cw\"><path d=\"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\"></path><path d=\"M21 3v5h-5\"></path><path d=\"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\"></path><path d=\"M8 16H3v5\"></path></svg></div><div class=\"pencraft pc-reset icon-container view-image\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-maximize2\"><polyline points=\"15 3 21 3 21 9\"></polyline><polyline points=\"9 21 3 21 3 15\"></polyline><line x1=\"21\" x2=\"14\" y1=\"3\" y2=\"10\"></line><line x1=\"3\" x2=\"10\" y1=\"21\" y2=\"14\"></line></svg></div></div></div></div></a></figure></div><blockquote><p>글 링크: <a href=\"https://velog.io/@surim014/a2a-protocol\">https://velog.io/@surim014/a2a-protocol</a></p></blockquote><h2><strong>소개</strong></h2><p>이번 글은 MCP와 비슷해 보이지만 범위가 다른 개념, Agent2Agent(A2A) 프로토콜을 소개하고 있습니다. MCP가 “한 에이전트 내부”에서 모델이 도구를 호출하는 규칙을 세워주었다면, A2A는 “서로 다른 에이전트 간”에 작업을 안전하게 넘겨주고 결과를 스트리밍하는 네트워크 레이어를 정의합니다.</p><p>글에서는 에이전트 카드 · 작업 상태 머신 · 스트리밍 아티팩트라는 세 가지 핵심 구성으로 어떻게 글루 코드와 보안 부담을 줄이는지 간결하게 짚어주는데요, MCP만으로 불안정했던 핸드오프 문제가 왜 생겼는지, A2A가 이를 어떻게 메우는지 궁금하시다면 꼭 읽어보시는 것을 추천드립니다!</p><h2><strong>목차</strong></h2><ul><li><p>Agent2Agent 프로토콜이 필요한 이유</p></li><li><p>Roles 101: 클라이언트 에이전트 vs 원격 에이전트</p></li><li><p>A2A가 적합한 위치: MCP 위, 오케스트레이터 옆</p></li><li><p>A2A 교환의 구조</p></li><li><p>A2A 프로토콜의 안전성, 관찰성, 거버넌스</p></li><li><p>A2A의 이상 vs 현재 현실</p></li><li><p>A2A를 활용해야 하는 경우와 그렇지 않은 경우</p></li></ul>",
    "createdAt": "2025-07-07T00:30:21.000+00:00",
    "link": "https://kofearticle.substack.com/p/korean-fe-article-agent2agent-a2a",
    "author": "",
    "site": {
      "id": "3",
      "url": "https://kofearticle.substack.com/feed",
      "name": "kofearticle"
    }
  },
  {
    "title": "[Korean FE Article] 자바스크립트에서 Records & Tuples 제안이 철회된 이유",
    "content": "<div class=\"captioned-image-container\"><figure><a class=\"image-link image2 is-viewable-img\" target=\"_blank\" href=\"https://substackcdn.com/image/fetch/$s_!Kq0o!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5123ab2f-6ea8-47a0-948e-5469038ab9c0_768x512.jpeg\" data-component-name=\"Image2ToDOM\"><div class=\"image2-inset\"><picture><source type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/$s_!Kq0o!,w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5123ab2f-6ea8-47a0-948e-5469038ab9c0_768x512.jpeg 424w, https://substackcdn.com/image/fetch/$s_!Kq0o!,w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5123ab2f-6ea8-47a0-948e-5469038ab9c0_768x512.jpeg 848w, https://substackcdn.com/image/fetch/$s_!Kq0o!,w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5123ab2f-6ea8-47a0-948e-5469038ab9c0_768x512.jpeg 1272w, https://substackcdn.com/image/fetch/$s_!Kq0o!,w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5123ab2f-6ea8-47a0-948e-5469038ab9c0_768x512.jpeg 1456w\" sizes=\"100vw\"><img src=\"https://substackcdn.com/image/fetch/$s_!Kq0o!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5123ab2f-6ea8-47a0-948e-5469038ab9c0_768x512.jpeg\" width=\"768\" height=\"512\" data-attrs=\"{\"src\":\"https://substack-post-media.s3.amazonaws.com/public/images/5123ab2f-6ea8-47a0-948e-5469038ab9c0_768x512.jpeg\",\"srcNoWatermark\":null,\"fullscreen\":null,\"imageSize\":null,\"height\":512,\"width\":768,\"resizeWidth\":null,\"bytes\":57703,\"alt\":null,\"title\":null,\"type\":\"image/jpeg\",\"href\":null,\"belowTheFold\":false,\"topImage\":true,\"internalRedirect\":\"https://kofearticle.substack.com/i/167162226?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5123ab2f-6ea8-47a0-948e-5469038ab9c0_768x512.jpeg\",\"isProcessing\":false,\"align\":null,\"offset\":false}\" class=\"sizing-normal\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/$s_!Kq0o!,w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5123ab2f-6ea8-47a0-948e-5469038ab9c0_768x512.jpeg 424w, https://substackcdn.com/image/fetch/$s_!Kq0o!,w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5123ab2f-6ea8-47a0-948e-5469038ab9c0_768x512.jpeg 848w, https://substackcdn.com/image/fetch/$s_!Kq0o!,w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5123ab2f-6ea8-47a0-948e-5469038ab9c0_768x512.jpeg 1272w, https://substackcdn.com/image/fetch/$s_!Kq0o!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5123ab2f-6ea8-47a0-948e-5469038ab9c0_768x512.jpeg 1456w\" sizes=\"100vw\" fetchpriority=\"high\"></picture><div class=\"image-link-expand\"><div class=\"pencraft pc-display-flex pc-gap-8 pc-reset\"><div class=\"pencraft pc-reset icon-container restack-image\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-refresh-cw\"><path d=\"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\"></path><path d=\"M21 3v5h-5\"></path><path d=\"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\"></path><path d=\"M8 16H3v5\"></path></svg></div><div class=\"pencraft pc-reset icon-container view-image\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-maximize2\"><polyline points=\"15 3 21 3 21 9\"></polyline><polyline points=\"9 21 3 21 3 15\"></polyline><line x1=\"21\" x2=\"14\" y1=\"3\" y2=\"10\"></line><line x1=\"3\" x2=\"10\" y1=\"21\" y2=\"14\"></line></svg></div></div></div></div></a></figure></div><blockquote><p>글 링크: <a href=\"https://bit.ly/4ly4Phf\">https://bit.ly/4ly4Phf</a></p></blockquote><h2>소개</h2><p>Records & Tuples 제안은 JavaScript에 새로운 불변(immutable) 원시 타입인 <code>Record</code>와 <code>Tuple</code>을 도입하여, 구조적 동등성 비교와 깊은 불변성을 지원하려는 시도였습니다. 이러한 기능은 상태 관리와 같은 복잡한 애플리케이션에서 유용할 것으로 기대되었습니다.</p><p>그러나 이 제안은 새로운 원시 타입의 도입으로 인한 엔진 복잡성 증가, 깊은 비교의 성능 문제, 기존 동등성 비교 규칙과의 불일치 등의 이유로 TC39 위원회에서 충분한 합의를 얻지 못하고 철회되었습니다.</p><p>이 글은 자바스크립트의 최신 제안과 TC39의 동향에 관심 있는 개발자, 불변성과 구조적 동등성 비교에 대한 이해를 높이고자 하는 프론트엔드 개발자, 상태 관리와 성능 최적화에 관심 있는 개발자, ECMAScript의 표준화 과정과 제안 철회의 배경을 이해하고자 하는 분들에게 추천드립니다!</p><h2>목차</h2><ul><li><p>레코드와 튜플의 제안은 어떤 내용이었나요?</p></li><li><p>철회 사유</p></li><li><p>새로운 원시 타입(primitive type) 추가</p></li><li><p>깊은 비교</p></li><li><p>동등성 의미의 일관성</p></li><li><p>합성이 더 나은 대안이 될 수 있을까요?</p></li></ul>",
    "createdAt": "2025-07-03T23:30:20.000+00:00",
    "link": "https://kofearticle.substack.com/p/korean-fe-article-records-and-tuples",
    "author": "",
    "site": {
      "id": "3",
      "url": "https://kofearticle.substack.com/feed",
      "name": "kofearticle"
    }
  },
  {
    "title": "[Korean FE Article] 리액트의 개방-폐쇄 원칙: 확장 가능한 컴포넌트 만들기",
    "content": "<div class=\"captioned-image-container\"><figure><a class=\"image-link image2 is-viewable-img\" target=\"_blank\" href=\"https://substackcdn.com/image/fetch/$s_!vdrU!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff6f51fc8-19c4-40ce-a03a-637c3adbc2fa_1080x436.webp\" data-component-name=\"Image2ToDOM\"><div class=\"image2-inset\"><picture><source type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/$s_!vdrU!,w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff6f51fc8-19c4-40ce-a03a-637c3adbc2fa_1080x436.webp 424w, https://substackcdn.com/image/fetch/$s_!vdrU!,w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff6f51fc8-19c4-40ce-a03a-637c3adbc2fa_1080x436.webp 848w, https://substackcdn.com/image/fetch/$s_!vdrU!,w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff6f51fc8-19c4-40ce-a03a-637c3adbc2fa_1080x436.webp 1272w, https://substackcdn.com/image/fetch/$s_!vdrU!,w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff6f51fc8-19c4-40ce-a03a-637c3adbc2fa_1080x436.webp 1456w\" sizes=\"100vw\"><img src=\"https://substackcdn.com/image/fetch/$s_!vdrU!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff6f51fc8-19c4-40ce-a03a-637c3adbc2fa_1080x436.webp\" width=\"1080\" height=\"436\" data-attrs=\"{\"src\":\"https://substack-post-media.s3.amazonaws.com/public/images/f6f51fc8-19c4-40ce-a03a-637c3adbc2fa_1080x436.webp\",\"srcNoWatermark\":null,\"fullscreen\":null,\"imageSize\":null,\"height\":436,\"width\":1080,\"resizeWidth\":null,\"bytes\":null,\"alt\":null,\"title\":null,\"type\":null,\"href\":null,\"belowTheFold\":false,\"topImage\":true,\"internalRedirect\":null,\"isProcessing\":false,\"align\":null,\"offset\":false}\" class=\"sizing-normal\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/$s_!vdrU!,w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff6f51fc8-19c4-40ce-a03a-637c3adbc2fa_1080x436.webp 424w, https://substackcdn.com/image/fetch/$s_!vdrU!,w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff6f51fc8-19c4-40ce-a03a-637c3adbc2fa_1080x436.webp 848w, https://substackcdn.com/image/fetch/$s_!vdrU!,w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff6f51fc8-19c4-40ce-a03a-637c3adbc2fa_1080x436.webp 1272w, https://substackcdn.com/image/fetch/$s_!vdrU!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff6f51fc8-19c4-40ce-a03a-637c3adbc2fa_1080x436.webp 1456w\" sizes=\"100vw\" fetchpriority=\"high\"></picture><div class=\"image-link-expand\"><div class=\"pencraft pc-display-flex pc-gap-8 pc-reset\"><div class=\"pencraft pc-reset icon-container restack-image\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-refresh-cw\"><path d=\"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\"></path><path d=\"M21 3v5h-5\"></path><path d=\"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\"></path><path d=\"M8 16H3v5\"></path></svg></div><div class=\"pencraft pc-reset icon-container view-image\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-maximize2\"><polyline points=\"15 3 21 3 21 9\"></polyline><polyline points=\"9 21 3 21 3 15\"></polyline><line x1=\"21\" x2=\"14\" y1=\"3\" y2=\"10\"></line><line x1=\"3\" x2=\"10\" y1=\"21\" y2=\"14\"></line></svg></div></div></div></div></a></figure></div><blockquote><p>글 링크 : <a href=\"https://imnotadevleoper.tistory.com/365\">https://imnotadevleoper.tistory.com/365</a></p></blockquote><h2><strong>소개</strong></h2><p>이 글은 SOLID 원칙 중 개방-폐쇄 원칙(Open-Closed Principle)을 리액트 컴포넌트 설계에 적용하는 방법을 다룹니다. \"확장에는 열려 있고, 변경에는 닫혀 있어야 한다\"는 원칙을 실제 리액트 코드로 구현하는 구체적인 예시를 제공합니다.</p><p>글은 Button 컴포넌트에서 새로운 variant를 추가할 때마다 기존 코드를 수정해야 하는 안티패턴을 먼저 보여줍니다. 이어서 ButtonBase라는 기본 컴포넌트를 만들고 이를 확장하여 다양한 버튼 변형을 생성하는 방식으로 리팩터링하는 과정을 설명합니다.</p><p>또한 컴포넌트 합성 패턴을 활용한 Card 컴포넌트와 고차 컴포넌트(HOC)를 통한 확장 방법도 소개합니다. 이러한 원칙들을 무조건적으로 적용하라는 것이 아니라, 고전적인 소프트웨어 엔지니어링 원칙과 현대 개발 실무 사이의 간극을 좁히려는 시도라고 겸손하게 밝히고 있습니다.</p><p>리액트 컴포넌트의 재사용성과 확장성을 높이고 싶은 개발자들에게 유용한 내용입니다.</p><h2><strong>목차</strong></h2><ul><li><p>소개</p></li><li><p>폐쇄적인 컴포넌트의 문제점</p></li><li><p>개방적인 컴포넌트 만들기</p></li><li><p>컴포넌트 합성 패턴</p></li><li><p>확장을 위한 고차 컴포넌트</p></li><li><p>개방-폐쇄 원칙을 따르는 커스텀 훅</p></li><li><p>테스트에서의 이점</p></li><li><p>핵심 요약</p></li><li><p>개방-폐쇄 원칙과 “상속보다 합성”</p></li><li><p>결론</p></li><li><p>업데이트: 친근한 안내 및 알림</p></li></ul>",
    "createdAt": "2025-07-03T00:30:27.000+00:00",
    "link": "https://kofearticle.substack.com/p/korean-fe-article-ee1",
    "author": "",
    "site": {
      "id": "3",
      "url": "https://kofearticle.substack.com/feed",
      "name": "kofearticle"
    }
  },
  {
    "title": "The Gap Strikes Back: Now Stylable",
    "content": "<p>Four years ago, I wrote an article titled <a href=\"https://css-tricks.com/minding-the-gap/\">Minding the “gap”</a>, where I talked about the CSS <code>gap</code> property, where it applied, and how it worked with various CSS layouts.</p>\r\n\r\n\r\n\r\n<p>At the time, I described how easy it was to evenly space items out in a flex, grid, or multi-column layout, by using the <code><a href=\"https://css-tricks.com/almanac/properties/g/gap/\">gap</a></code> property. But, I also said that <em>styling</em> the gap areas was much harder, and I shared a workaround.</p>\r\n\r\n\r\n\r\n<p>However, workarounds like using extra HTML elements, pseudo-elements, or borders to draw separator lines tend to come with drawbacks, especially those that impact your layout size, interfere with assistive technologies, or pollute your markup with style-only elements.</p>\r\n\r\n\r\n\r\n<p>Today, I’m writing again about layout gaps, but this time, to tell you all about a new and exciting CSS feature that’s going to change it all. <strong>What you previously had to use workarounds for, you’ll soon be able to do with just a few simple CSS properties that make it easy, yet also flexible, to display styled separators between your layout items.</strong></p>\r\n\r\n\r\n\r\n<p>There’s already a <a href=\"https://www.w3.org/TR/css-gaps-1/\" rel=\"noopener\">specification draft for the feature</a> you can peruse. At the time I’m writing this, it is available in Chrome and Edge 139 behind a flag. But I believe it won’t be long before we turn that flag on. I believe other browsers are also very receptive and engaged.</p>\r\n\r\n\r\n\r\n<p>Displaying decorative lines between items of a layout can make a big difference. When used well, these lines can bring more structure to your layout, and give your users more of a sense of how the different regions of a page are organized.</p>\r\n\r\n\r\n\r\n<span id=\"more-387471\"></span>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"introducing-css-gap-decorations\">Introducing CSS gap decorations</h3>\r\n\r\n\r\n<p>If you’ve ever used a multi-column layout, such as by using the <code><a href=\"https://css-tricks.com/almanac/properties/c/column-width/\">column-width</a></code> property, then you might already be familiar with gap decorations. You can draw vertical lines between the columns of a multi-column layout by using the <code><a href=\"https://css-tricks.com/almanac/properties/c/column-rule/\">column-rule</a></code> property:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">article {\r\n  column-width: 20rem;\r\n  column-rule: 1px solid black;\r\n}</code></pre>\r\n\r\n\r\n\r\n<figure class=\"wp-block-image size-full\"><img data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"1254\" height=\"383\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-snippet-1.webp?resize=1254%2C383&ssl=1\" alt=\"Two 1-pixel solid black vertical lines separate a row of three text blocks.\" class=\"wp-image-387557\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-snippet-1.webp?w=1254&ssl=1 1254w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-snippet-1.webp?resize=300%2C92&ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-snippet-1.webp?resize=1024%2C313&ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-snippet-1.webp?resize=768%2C235&ssl=1 768w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\" /></figure>\r\n\r\n\r\n\r\n<p>The CSS gap decorations feature builds on this to provide a more comprehensive system that makes it easy for you to draw separator lines in other layout types.</p>\r\n\r\n\r\n\r\n<p>For example, the draft specification says that the <code>column-rule</code> property also works in flexbox and grid layouts:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.my-grid-container {\r\n  display: grid;\r\n  gap: 2px;\r\n  column-rule: 2px solid pink;\r\n}</code></pre>\r\n\r\n\r\n\r\n<figure class=\"wp-block-image size-full\"><img data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"1217\" height=\"436\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-snippet-2.webp?resize=1217%2C436&ssl=1\" alt=\"A 2-pixel solid light pink vertical line separates two side-by-side text blocks.\" class=\"wp-image-387558\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-snippet-2.webp?w=1217&ssl=1 1217w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-snippet-2.webp?resize=300%2C107&ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-snippet-2.webp?resize=1024%2C367&ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-snippet-2.webp?resize=768%2C275&ssl=1 768w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\" /></figure>\r\n\r\n\r\n\r\n<p>No need for extra elements or borders! The key benefit here is that the decoration happens in CSS only, where it belongs, with no impacts to your semantic markup.</p>\r\n\r\n\r\n\r\n<p>The CSS gap decorations feature also introduces a new <code>row-rule</code> property for drawing lines between rows:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.my-flex-container {\r\n  display: flex;\r\n  gap: 10px;\r\n  row-rule: 10px dotted limegreen;\r\n  column-rule: 5px dashed coral;\r\n}</code></pre>\r\n\r\n\r\n\r\n<figure class=\"wp-block-image size-full\"><img data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"1375\" height=\"205\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-snippet-3.webp?resize=1375%2C205&ssl=1\" alt=\"Six items flowing horizontally in two rows in a flex container, separated by 5-pixel dashed coral-colored vertical lines and a single 10-pixel dotted lime-green line between the two rows.\" class=\"wp-image-387559\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-snippet-3.webp?w=1375&ssl=1 1375w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-snippet-3.webp?resize=300%2C45&ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-snippet-3.webp?resize=1024%2C153&ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-snippet-3.webp?resize=768%2C115&ssl=1 768w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\" /></figure>\r\n\r\n\r\n\r\n<p>But that’s not all, because the above syntax also allows you to define multiple, comma-separated, line style values, and use the same <code>repeat()</code> function that CSS grid already uses for row and column templates. This makes it possible to define different styles of line decorations in a single layout, and adapt to an unknown number of gaps:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.my-container {\r\n  display: grid;\r\n  gap: 2px;\r\n  row-rule:\r\n    repeat(2, 1px dashed red),\r\n    2px solid black,\r\n    repeat(auto, 1px dotted green);\r\n}</code></pre>\r\n\r\n\r\n\r\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" decoding=\"async\" width=\"1429\" height=\"741\" src=\"https://css-tricks.com/wp-content/uploads/2025/06/gap-snippet-4.svg\" alt=\"Seven text blocks stacked vertically separated by horizontal lines that are styled differently.\" class=\"wp-image-387560\"/></figure>\r\n\r\n\r\n\r\n<p>Finally, the CSS gap decorations feature comes with additional CSS properties such as <code>row-rule-break</code>, <code>column-rule-break</code>, <code>row-rule-outset</code>, <code>column-rule-outset</code>, and <code>gap-rule-paint-order</code>, which make it possible to precisely customize the way the separators are drawn, whether they overlap, or where they start and end.</p>\r\n\r\n\r\n\r\n<p>And of course, all of this works across <a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/\">grid</a>, <a href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\">flexbox</a>, <a href=\"https://css-tricks.com/revisiting-css-multi-column-layout/\">multi-column</a>, and soon, <a href=\"https://meyerweb.com/eric/thoughts/2025/05/21/masonry-item-flow-and-gulp/\" rel=\"noopener\">masonry</a>!</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"browser-support\">Browser support</h3>\r\n\r\n\r\n<p>Currently, the CSS gap decorations feature is only available in Chromium-based browsers.</p>\r\n\r\n\r\n\r\n<p>The feature is still early in the making, and there’s time for you all to try it and to provide feedback that could help make the feature better and more adapted to your needs.</p>\r\n\r\n\r\n\r\n<p>If you want to try the feature today, make sure to use Edge or Chrome, starting with version 139 (or another Chromium-based browser that matches those versions), and enable the flag by following these steps:</p>\r\n\r\n\r\n\r\n<ol class=\"wp-block-list\">\r\n<li>In Chrome or Edge, go to <code>about://flags</code>.</li>\r\n\r\n\r\n\r\n<li>In the search field, search for <strong>Enable Experimental Web Platform Features</strong>.</li>\r\n\r\n\r\n\r\n<li>Enable the flag.</li>\r\n\r\n\r\n\r\n<li>Restart the browser.</li>\r\n</ol>\r\n\r\n\r\n\r\n<p>To put this all into practice, let’s walk through an example together that uses the new CSS gap decorations feature. <a href=\"https://microsoftedge.github.io/Demos/css-gap-decorations/personal-site.html\" rel=\"noopener\">I also have a final example you can demo.</a></p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"using-css-gap-decorations\">Using CSS gap decorations</h3>\r\n\r\n\r\n<p>Let’s build a simple web page to learn how to use the feature. Here is what we’ll be building:</p>\r\n\r\n\r\n\r\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" decoding=\"async\" width=\"1501\" height=\"1600\" src=\"https://css-tricks.com/wp-content/uploads/2025/06/gap-decoration-01.svg\" alt=\"Webpage titled My Personal Site in the header above a horizontal navigation and a staggered, masonry-like layout of text and images with thin lines between them. The design is in black and white.\" class=\"wp-image-387486\"/></figure>\r\n\r\n\r\n\r\n<p>The above layout contains a header section with a title, a navigation menu with a few links, a main section with a series of short paragraphs of text and photos, and a footer.</p>\r\n\r\n\r\n\r\n<p>We’ll use the following markup:</p>\r\n\r\n\r\n\r\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\"><body>\r\n<header>\r\n  <h1>My personal site</h1>\r\n</header>\r\n<nav>\r\n  <ul>\r\n    <li><a href=\"#\">Home</a></li>\r\n    <li><a href=\"#\">Blog</a></li>\r\n    <li><a href=\"#\">About</a></li>\r\n    <li><a href=\"#\">Links</a></li>\r\n  </ul>\r\n</nav>\r\n<main>\r\n  <article>\r\n    <p>...</p>\r\n  </article>\r\n  <article>\r\n    <img src=\"cat.jpg\" alt=\"A sleeping cat.\">\r\n  </article>\r\n  <article>\r\n    <p>...</p>\r\n  </article>\r\n  <article>\r\n    <img src=\"tree.jpg\" alt=\"An old olive tree trunk.\">\r\n  </article>\r\n  <article>\r\n    <p>...</p>\r\n  </article>\r\n  <article>\r\n    <p>...</p>\r\n  </article>\r\n  <article>\r\n    <p>...</p>\r\n  </article>\r\n  <article>\r\n    <img src=\"strings.jpg\" alt=\"Snow flakes falling in a motion blur effect.\">\r\n  </article>\r\n</main>\r\n<footer>\r\n  <p>© 2025 Patrick Brosset</p>\r\n</footer>\r\n</body></code></pre>\r\n\r\n\r\n\r\n<p>We’ll start by making the <code><body></code> element be a grid container. This way, we can space out the <code><header></code>, <code><nav></code>, <code><main></code>, and <code><footer></code> elements apart in one go by using the <code>gap</code> property:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">body {\r\n  display: grid;\r\n  gap: 4rem;\r\n  margin: 2rem;\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>Let’s now use the CSS gap decorations feature to display horizontal separator lines within the gaps we just defined:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">body {\r\n  display: grid;\r\n  gap: 4rem;\r\n  margin: 2rem;\r\n \r\n  row-rule: 1rem solid #efefef;\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>This gives us the following result:</p>\r\n\r\n\r\n\r\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" decoding=\"async\" width=\"1451\" height=\"1600\" src=\"https://css-tricks.com/wp-content/uploads/2025/06/gap-decoration-02.svg\" alt=\"The basic layout for the webpage. The title is the same but the navigation and layout are both vertically stacked. There are no lines between items in the layout.\" class=\"wp-image-387487\"/></figure>\r\n\r\n\r\n\r\n<p>We can do a bit better by making the first horizontal line look different than the other two lines, and simplify the <code>row-rule</code> value by using the <code>repeat()</code> syntax:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">body {\r\n  display: grid;\r\n  gap: 4rem;\r\n  margin: 2rem;\r\n \r\n  row-rule:\r\n    1rem solid #efefef,\r\n    repeat(2, 2px solid #efefef);\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>With this new <code>row-rule</code> property value, we’re telling the browser to draw the first horizontal separator as a <code>1rem</code> thick line, and the next two separators as <code>2px</code> thick lines, which gives the following result:</p>\r\n\r\n\r\n\r\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" decoding=\"async\" width=\"1452\" height=\"1600\" src=\"https://css-tricks.com/wp-content/uploads/2025/06/gap-decoration-03.svg\" alt=\"The webpage is largely the same, but the border between the site title and the navigation is much thicker.\" class=\"wp-image-387488\"/></figure>\r\n\r\n\r\n\r\n<p>Now, let’s turn our attention to the navigation element and its list of links. We’ll use flexbox to display the links in a single row, where each link is separated from the other links by a gap and a vertical line:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">nav ul {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 2rem;\r\n  column-rule: 2px dashed #666;\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>Very similarly to how we used the <code>row-rule</code> property before, we’re now using the <code>column-rule</code> property to display a dashed <code>2px</code> thick separator between the links.</p>\r\n\r\n\r\n\r\n<p>Our example web page now looks like this:</p>\r\n\r\n\r\n\r\n<figure class=\"wp-block-image size-full\"><img data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"1552\" height=\"1600\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-decoration-04.webp?resize=1552%2C1600&ssl=1\" alt=\"The webpage is still largely the same, but now the navigation is horizontal and there is a light dashed line between the links.\" class=\"wp-image-387482\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-decoration-04.webp?w=1552&ssl=1 1552w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-decoration-04.webp?resize=291%2C300&ssl=1 291w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-decoration-04.webp?resize=993%2C1024&ssl=1 993w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-decoration-04.webp?resize=768%2C792&ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-decoration-04.webp?resize=1490%2C1536&ssl=1 1490w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\" /></figure>\r\n\r\n\r\n\r\n<p>The last thing we need to change is the <code><main></code> element and its paragraphs and pictures. We’ll use flexbox again and display the various children in a wrapping row of varying width items:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">main {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 4rem;\r\n}\r\n\r\n\r\nmain > * {\r\n  flex: 1 1 200px;\r\n}\r\n\r\n\r\nmain article:has(p) {\r\n  flex-basis: 400px;\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>In the above code snippet, we’re setting the <code><main></code> element to be a wrapping flex container with a <code>4rem</code> gap between items and flex lines. We’re also making the items have a flex basis size of <code>200px</code> for pictures and <code>400px</code> for text, and allowing them to grow and shrink as needed. This gives us the following result:</p>\r\n\r\n\r\n\r\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" decoding=\"async\" width=\"1494\" height=\"1600\" src=\"https://css-tricks.com/wp-content/uploads/2025/06/gap-decoration-05.svg\" alt=\"The webpage layout has been established but there are no lines between items.\" class=\"wp-image-387489\"/></figure>\r\n\r\n\r\n\r\n<p>Let’s use CSS gap decorations to bring a little more structure to our layout by drawing <code>2px</code> thick separator lines between the rows and columns of the layout:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">main {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 4rem;\r\n  row-rule: 2px solid #999;\r\n  column-rule: 2px solid #999;\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>This gives us the following result, which is very close to our expected design:</p>\r\n\r\n\r\n\r\n<figure class=\"wp-block-image size-full\"><img data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"1500\" height=\"1600\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-decoration-06.webp?resize=1500%2C1600&ssl=1\" alt=\"Thin light lines have been added between the layout of text and images, creating a masonry-like layout. The lines extend all the way across each item like enclosed boxes.\" class=\"wp-image-387481\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-decoration-06.webp?w=1500&ssl=1 1500w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-decoration-06.webp?resize=281%2C300&ssl=1 281w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-decoration-06.webp?resize=960%2C1024&ssl=1 960w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-decoration-06.webp?resize=768%2C819&ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-decoration-06.webp?resize=1440%2C1536&ssl=1 1440w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\" /></figure>\r\n\r\n\r\n\r\n<p>The last detail we want to change is related to the vertical lines. We don’t want them to span across the entire height of the flex lines but instead start and stop where the content starts and stops.</p>\r\n\r\n\r\n\r\n<p>With CSS gap decorations, we can easily achieve this by using the <code>column-rule-outset</code> property to fine-tune exactly where the decorations start and end, relative to the gap area:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">main {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 4rem;\r\n  row-rule: 2px solid #999;\r\n  column-rule: 2px solid #999;\r\n  column-rule-outset: 0;\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>The <code>column-rule-outset</code> property above makes the vertical column separators span the height of each row, excluding the gap area, which is what we want:</p>\r\n\r\n\r\n\r\n<figure class=\"wp-block-image size-full\"><img data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"1495\" height=\"1600\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-decoration-07.webp?resize=1495%2C1600&ssl=1\" alt=\"Spacing has been added between the layout items so that the lines between them are no longer connected, creating an elegant layout.\" class=\"wp-image-387480\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-decoration-07.webp?w=1495&ssl=1 1495w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-decoration-07.webp?resize=280%2C300&ssl=1 280w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-decoration-07.webp?resize=957%2C1024&ssl=1 957w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-decoration-07.webp?resize=768%2C822&ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-decoration-07.webp?resize=1435%2C1536&ssl=1 1435w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\" /></figure>\r\n\r\n\r\n\r\n<p>And with that, we’re done with our example. Check out <a href=\"https://microsoftedge.github.io/Demos/css-gap-decorations/personal-site.html\" rel=\"noopener\">the live example</a>, and <a href=\"https://github.com/MicrosoftEdge/Demos/blob/main/css-gap-decorations/personal-site.html\" rel=\"noopener\">source code</a>.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"learn-more\">Learn more</h3>\r\n\r\n\r\n<p>There’s more to the feature and I mentioned a couple more CSS properties earlier</p>\r\n\r\n\r\n\r\n<ul class=\"wp-block-list\">\r\n<li><strong><code>gap-rule-paint-order</code></strong>, which lets you control which of the decorations, rows or columns, appear above the other ones.</li>\r\n\r\n\r\n\r\n<li><strong><code>row-rule-break</code></strong> / <strong><code>column-rule-break</code></strong>, which sets the behavior of the decoration lines at intersections. In particular, whether they are made of multiple segments, which start and end at intersections, or single, continuous lines.</li>\r\n</ul>\r\n\r\n\r\n\r\n<p>Because the feature is new, there isn’t MDN documentation about it yet. So to learn more, check out:</p>\r\n\r\n\r\n\r\n<ul class=\"wp-block-list\">\r\n<li><a href=\"https://www.w3.org/TR/css-gaps-1/\" rel=\"noopener\">CSS Gap Decorations Module Level 1</a> (First Public Working Draft)</li>\r\n\r\n\r\n\r\n<li><a href=\"https://github.com/MicrosoftEdge/MSEdgeExplainers/blob/main/CSSGapDecorations/explainer.md\" rel=\"noopener\">Microsoft Edge Explainer</a></li>\r\n</ul>\r\n\r\n\r\n\r\n<p>The Edge team has also created an <a href=\"https://microsoftedge.github.io/Demos/css-gap-decorations/playground.html\" rel=\"noopener\">interactive playground</a> where you can use visual controls to configure gap decorations.</p>\r\n\r\n\r\n\r\n<p>And, of course, the reason this is all implemented behind a flag is to elicit feedback from developers like you! If you have any feedback, questions, or bugs about this feature, I definitely encourage you to open a new ticket on the <a href=\"https://issues.chromium.org/issues/new?template_issue=422768750&component=1456721\" rel=\"noopener\">Chromium issue tracker</a>.</p>\r\n<hr />\r\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/the-gap-strikes-back-now-stylable/\">The Gap Strikes Back: Now Stylable</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&utm_source=css-tricks.com&utm_campaign=family_&utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
    "createdAt": "2025-07-01T12:42:38.000+00:00",
    "link": "https://css-tricks.com/the-gap-strikes-back-now-stylable/",
    "author": "",
    "site": {
      "id": "4",
      "url": "https://css-tricks.com/category/articles/feed",
      "name": "cssTrick"
    }
  },
  {
    "title": "The Gap Strikes Back: Now Stylable",
    "content": "<p>Four years ago, I wrote an article titled <a href=\"https://css-tricks.com/minding-the-gap/\">Minding the “gap”</a>, where I talked about the CSS <code>gap</code> property, where it applied, and how it worked with various CSS layouts.</p>\r\n\r\n\r\n\r\n<p>At the time, I described how easy it was to evenly space items out in a flex, grid, or multi-column layout, by using the <code><a href=\"https://css-tricks.com/almanac/properties/g/gap/\">gap</a></code> property. But, I also said that <em>styling</em> the gap areas was much harder, and I shared a workaround.</p>\r\n\r\n\r\n\r\n<p>However, workarounds like using extra HTML elements, pseudo-elements, or borders to draw separator lines tend to come with drawbacks, especially those that impact your layout size, interfere with assistive technologies, or pollute your markup with style-only elements.</p>\r\n\r\n\r\n\r\n<p>Today, I’m writing again about layout gaps, but this time, to tell you all about a new and exciting CSS feature that’s going to change it all. <strong>What you previously had to use workarounds for, you’ll soon be able to do with just a few simple CSS properties that make it easy, yet also flexible, to display styled separators between your layout items.</strong></p>\r\n\r\n\r\n\r\n<p>There’s already a <a href=\"https://www.w3.org/TR/css-gaps-1/\" rel=\"noopener\">specification draft for the feature</a> you can peruse. At the time I’m writing this, it is available in Chrome and Edge 139 behind a flag. But I believe it won’t be long before we turn that flag on. I believe other browsers are also very receptive and engaged.</p>\r\n\r\n\r\n\r\n<p>Displaying decorative lines between items of a layout can make a big difference. When used well, these lines can bring more structure to your layout, and give your users more of a sense of how the different regions of a page are organized.</p>\r\n\r\n\r\n\r\n<span id=\"more-387471\"></span>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"introducing-css-gap-decorations\">Introducing CSS gap decorations</h3>\r\n\r\n\r\n<p>If you’ve ever used a multi-column layout, such as by using the <code><a href=\"https://css-tricks.com/almanac/properties/c/column-width/\">column-width</a></code> property, then you might already be familiar with gap decorations. You can draw vertical lines between the columns of a multi-column layout by using the <code><a href=\"https://css-tricks.com/almanac/properties/c/column-rule/\">column-rule</a></code> property:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">article {\r\n  column-width: 20rem;\r\n  column-rule: 1px solid black;\r\n}</code></pre>\r\n\r\n\r\n\r\n<figure class=\"wp-block-image size-full\"><img data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"1254\" height=\"383\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-snippet-1.webp?resize=1254%2C383&ssl=1\" alt=\"Two 1-pixel solid black vertical lines separate a row of three text blocks.\" class=\"wp-image-387557\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-snippet-1.webp?w=1254&ssl=1 1254w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-snippet-1.webp?resize=300%2C92&ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-snippet-1.webp?resize=1024%2C313&ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-snippet-1.webp?resize=768%2C235&ssl=1 768w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\" /></figure>\r\n\r\n\r\n\r\n<p>The CSS gap decorations feature builds on this to provide a more comprehensive system that makes it easy for you to draw separator lines in other layout types.</p>\r\n\r\n\r\n\r\n<p>For example, the draft specification says that the <code>column-rule</code> property also works in flexbox and grid layouts:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.my-grid-container {\r\n  display: grid;\r\n  gap: 2px;\r\n  column-rule: 2px solid pink;\r\n}</code></pre>\r\n\r\n\r\n\r\n<figure class=\"wp-block-image size-full\"><img data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"1217\" height=\"436\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-snippet-2.webp?resize=1217%2C436&ssl=1\" alt=\"A 2-pixel solid light pink vertical line separates two side-by-side text blocks.\" class=\"wp-image-387558\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-snippet-2.webp?w=1217&ssl=1 1217w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-snippet-2.webp?resize=300%2C107&ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-snippet-2.webp?resize=1024%2C367&ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-snippet-2.webp?resize=768%2C275&ssl=1 768w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\" /></figure>\r\n\r\n\r\n\r\n<p>No need for extra elements or borders! The key benefit here is that the decoration happens in CSS only, where it belongs, with no impacts to your semantic markup.</p>\r\n\r\n\r\n\r\n<p>The CSS gap decorations feature also introduces a new <code>row-rule</code> property for drawing lines between rows:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.my-flex-container {\r\n  display: flex;\r\n  gap: 10px;\r\n  row-rule: 10px dotted limegreen;\r\n  column-rule: 5px dashed coral;\r\n}</code></pre>\r\n\r\n\r\n\r\n<figure class=\"wp-block-image size-full\"><img data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"1375\" height=\"205\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-snippet-3.webp?resize=1375%2C205&ssl=1\" alt=\"Six items flowing horizontally in two rows in a flex container, separated by 5-pixel dashed coral-colored vertical lines and a single 10-pixel dotted lime-green line between the two rows.\" class=\"wp-image-387559\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-snippet-3.webp?w=1375&ssl=1 1375w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-snippet-3.webp?resize=300%2C45&ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-snippet-3.webp?resize=1024%2C153&ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-snippet-3.webp?resize=768%2C115&ssl=1 768w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\" /></figure>\r\n\r\n\r\n\r\n<p>But that’s not all, because the above syntax also allows you to define multiple, comma-separated, line style values, and use the same <code>repeat()</code> function that CSS grid already uses for row and column templates. This makes it possible to define different styles of line decorations in a single layout, and adapt to an unknown number of gaps:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.my-container {\r\n  display: grid;\r\n  gap: 2px;\r\n  row-rule:\r\n    repeat(2, 1px dashed red),\r\n    2px solid black,\r\n    repeat(auto, 1px dotted green);\r\n}</code></pre>\r\n\r\n\r\n\r\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" decoding=\"async\" width=\"1429\" height=\"741\" src=\"https://css-tricks.com/wp-content/uploads/2025/06/gap-snippet-4.svg\" alt=\"Seven text blocks stacked vertically separated by horizontal lines that are styled differently.\" class=\"wp-image-387560\"/></figure>\r\n\r\n\r\n\r\n<p>Finally, the CSS gap decorations feature comes with additional CSS properties such as <code>row-rule-break</code>, <code>column-rule-break</code>, <code>row-rule-outset</code>, <code>column-rule-outset</code>, and <code>gap-rule-paint-order</code>, which make it possible to precisely customize the way the separators are drawn, whether they overlap, or where they start and end.</p>\r\n\r\n\r\n\r\n<p>And of course, all of this works across <a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/\">grid</a>, <a href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\">flexbox</a>, <a href=\"https://css-tricks.com/revisiting-css-multi-column-layout/\">multi-column</a>, and soon, <a href=\"https://meyerweb.com/eric/thoughts/2025/05/21/masonry-item-flow-and-gulp/\" rel=\"noopener\">masonry</a>!</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"browser-support\">Browser support</h3>\r\n\r\n\r\n<p>Currently, the CSS gap decorations feature is only available in Chromium-based browsers.</p>\r\n\r\n\r\n\r\n<p>The feature is still early in the making, and there’s time for you all to try it and to provide feedback that could help make the feature better and more adapted to your needs.</p>\r\n\r\n\r\n\r\n<p>If you want to try the feature today, make sure to use Edge or Chrome, starting with version 139 (or another Chromium-based browser that matches those versions), and enable the flag by following these steps:</p>\r\n\r\n\r\n\r\n<ol class=\"wp-block-list\">\r\n<li>In Chrome or Edge, go to <code>about://flags</code>.</li>\r\n\r\n\r\n\r\n<li>In the search field, search for <strong>Enable Experimental Web Platform Features</strong>.</li>\r\n\r\n\r\n\r\n<li>Enable the flag.</li>\r\n\r\n\r\n\r\n<li>Restart the browser.</li>\r\n</ol>\r\n\r\n\r\n\r\n<p>To put this all into practice, let’s walk through an example together that uses the new CSS gap decorations feature. <a href=\"https://microsoftedge.github.io/Demos/css-gap-decorations/personal-site.html\" rel=\"noopener\">I also have a final example you can demo.</a></p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"using-css-gap-decorations\">Using CSS gap decorations</h3>\r\n\r\n\r\n<p>Let’s build a simple web page to learn how to use the feature. Here is what we’ll be building:</p>\r\n\r\n\r\n\r\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" decoding=\"async\" width=\"1501\" height=\"1600\" src=\"https://css-tricks.com/wp-content/uploads/2025/06/gap-decoration-01.svg\" alt=\"Webpage titled My Personal Site in the header above a horizontal navigation and a staggered, masonry-like layout of text and images with thin lines between them. The design is in black and white.\" class=\"wp-image-387486\"/></figure>\r\n\r\n\r\n\r\n<p>The above layout contains a header section with a title, a navigation menu with a few links, a main section with a series of short paragraphs of text and photos, and a footer.</p>\r\n\r\n\r\n\r\n<p>We’ll use the following markup:</p>\r\n\r\n\r\n\r\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\"><body>\r\n<header>\r\n  <h1>My personal site</h1>\r\n</header>\r\n<nav>\r\n  <ul>\r\n    <li><a href=\"#\">Home</a></li>\r\n    <li><a href=\"#\">Blog</a></li>\r\n    <li><a href=\"#\">About</a></li>\r\n    <li><a href=\"#\">Links</a></li>\r\n  </ul>\r\n</nav>\r\n<main>\r\n  <article>\r\n    <p>...</p>\r\n  </article>\r\n  <article>\r\n    <img src=\"cat.jpg\" alt=\"A sleeping cat.\">\r\n  </article>\r\n  <article>\r\n    <p>...</p>\r\n  </article>\r\n  <article>\r\n    <img src=\"tree.jpg\" alt=\"An old olive tree trunk.\">\r\n  </article>\r\n  <article>\r\n    <p>...</p>\r\n  </article>\r\n  <article>\r\n    <p>...</p>\r\n  </article>\r\n  <article>\r\n    <p>...</p>\r\n  </article>\r\n  <article>\r\n    <img src=\"strings.jpg\" alt=\"Snow flakes falling in a motion blur effect.\">\r\n  </article>\r\n</main>\r\n<footer>\r\n  <p>© 2025 Patrick Brosset</p>\r\n</footer>\r\n</body></code></pre>\r\n\r\n\r\n\r\n<p>We’ll start by making the <code><body></code> element be a grid container. This way, we can space out the <code><header></code>, <code><nav></code>, <code><main></code>, and <code><footer></code> elements apart in one go by using the <code>gap</code> property:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">body {\r\n  display: grid;\r\n  gap: 4rem;\r\n  margin: 2rem;\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>Let’s now use the CSS gap decorations feature to display horizontal separator lines within the gaps we just defined:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">body {\r\n  display: grid;\r\n  gap: 4rem;\r\n  margin: 2rem;\r\n \r\n  row-rule: 1rem solid #efefef;\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>This gives us the following result:</p>\r\n\r\n\r\n\r\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" decoding=\"async\" width=\"1451\" height=\"1600\" src=\"https://css-tricks.com/wp-content/uploads/2025/06/gap-decoration-02.svg\" alt=\"The basic layout for the webpage. The title is the same but the navigation and layout are both vertically stacked. There are no lines between items in the layout.\" class=\"wp-image-387487\"/></figure>\r\n\r\n\r\n\r\n<p>We can do a bit better by making the first horizontal line look different than the other two lines, and simplify the <code>row-rule</code> value by using the <code>repeat()</code> syntax:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">body {\r\n  display: grid;\r\n  gap: 4rem;\r\n  margin: 2rem;\r\n \r\n  row-rule:\r\n    1rem solid #efefef,\r\n    repeat(2, 2px solid #efefef);\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>With this new <code>row-rule</code> property value, we’re telling the browser to draw the first horizontal separator as a <code>1rem</code> thick line, and the next two separators as <code>2px</code> thick lines, which gives the following result:</p>\r\n\r\n\r\n\r\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" decoding=\"async\" width=\"1452\" height=\"1600\" src=\"https://css-tricks.com/wp-content/uploads/2025/06/gap-decoration-03.svg\" alt=\"The webpage is largely the same, but the border between the site title and the navigation is much thicker.\" class=\"wp-image-387488\"/></figure>\r\n\r\n\r\n\r\n<p>Now, let’s turn our attention to the navigation element and its list of links. We’ll use flexbox to display the links in a single row, where each link is separated from the other links by a gap and a vertical line:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">nav ul {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 2rem;\r\n  column-rule: 2px dashed #666;\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>Very similarly to how we used the <code>row-rule</code> property before, we’re now using the <code>column-rule</code> property to display a dashed <code>2px</code> thick separator between the links.</p>\r\n\r\n\r\n\r\n<p>Our example web page now looks like this:</p>\r\n\r\n\r\n\r\n<figure class=\"wp-block-image size-full\"><img data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"1552\" height=\"1600\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-decoration-04.webp?resize=1552%2C1600&ssl=1\" alt=\"The webpage is still largely the same, but now the navigation is horizontal and there is a light dashed line between the links.\" class=\"wp-image-387482\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-decoration-04.webp?w=1552&ssl=1 1552w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-decoration-04.webp?resize=291%2C300&ssl=1 291w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-decoration-04.webp?resize=993%2C1024&ssl=1 993w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-decoration-04.webp?resize=768%2C792&ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-decoration-04.webp?resize=1490%2C1536&ssl=1 1490w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\" /></figure>\r\n\r\n\r\n\r\n<p>The last thing we need to change is the <code><main></code> element and its paragraphs and pictures. We’ll use flexbox again and display the various children in a wrapping row of varying width items:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">main {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 4rem;\r\n}\r\n\r\n\r\nmain > * {\r\n  flex: 1 1 200px;\r\n}\r\n\r\n\r\nmain article:has(p) {\r\n  flex-basis: 400px;\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>In the above code snippet, we’re setting the <code><main></code> element to be a wrapping flex container with a <code>4rem</code> gap between items and flex lines. We’re also making the items have a flex basis size of <code>200px</code> for pictures and <code>400px</code> for text, and allowing them to grow and shrink as needed. This gives us the following result:</p>\r\n\r\n\r\n\r\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" decoding=\"async\" width=\"1494\" height=\"1600\" src=\"https://css-tricks.com/wp-content/uploads/2025/06/gap-decoration-05.svg\" alt=\"The webpage layout has been established but there are no lines between items.\" class=\"wp-image-387489\"/></figure>\r\n\r\n\r\n\r\n<p>Let’s use CSS gap decorations to bring a little more structure to our layout by drawing <code>2px</code> thick separator lines between the rows and columns of the layout:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">main {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 4rem;\r\n  row-rule: 2px solid #999;\r\n  column-rule: 2px solid #999;\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>This gives us the following result, which is very close to our expected design:</p>\r\n\r\n\r\n\r\n<figure class=\"wp-block-image size-full\"><img data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"1500\" height=\"1600\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-decoration-06.webp?resize=1500%2C1600&ssl=1\" alt=\"Thin light lines have been added between the layout of text and images, creating a masonry-like layout. The lines extend all the way across each item like enclosed boxes.\" class=\"wp-image-387481\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-decoration-06.webp?w=1500&ssl=1 1500w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-decoration-06.webp?resize=281%2C300&ssl=1 281w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-decoration-06.webp?resize=960%2C1024&ssl=1 960w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-decoration-06.webp?resize=768%2C819&ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-decoration-06.webp?resize=1440%2C1536&ssl=1 1440w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\" /></figure>\r\n\r\n\r\n\r\n<p>The last detail we want to change is related to the vertical lines. We don’t want them to span across the entire height of the flex lines but instead start and stop where the content starts and stops.</p>\r\n\r\n\r\n\r\n<p>With CSS gap decorations, we can easily achieve this by using the <code>column-rule-outset</code> property to fine-tune exactly where the decorations start and end, relative to the gap area:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">main {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 4rem;\r\n  row-rule: 2px solid #999;\r\n  column-rule: 2px solid #999;\r\n  column-rule-outset: 0;\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>The <code>column-rule-outset</code> property above makes the vertical column separators span the height of each row, excluding the gap area, which is what we want:</p>\r\n\r\n\r\n\r\n<figure class=\"wp-block-image size-full\"><img data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"1495\" height=\"1600\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-decoration-07.webp?resize=1495%2C1600&ssl=1\" alt=\"Spacing has been added between the layout items so that the lines between them are no longer connected, creating an elegant layout.\" class=\"wp-image-387480\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-decoration-07.webp?w=1495&ssl=1 1495w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-decoration-07.webp?resize=280%2C300&ssl=1 280w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-decoration-07.webp?resize=957%2C1024&ssl=1 957w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-decoration-07.webp?resize=768%2C822&ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-decoration-07.webp?resize=1435%2C1536&ssl=1 1435w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\" /></figure>\r\n\r\n\r\n\r\n<p>And with that, we’re done with our example. Check out <a href=\"https://microsoftedge.github.io/Demos/css-gap-decorations/personal-site.html\" rel=\"noopener\">the live example</a>, and <a href=\"https://github.com/MicrosoftEdge/Demos/blob/main/css-gap-decorations/personal-site.html\" rel=\"noopener\">source code</a>.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"learn-more\">Learn more</h3>\r\n\r\n\r\n<p>There’s more to the feature and I mentioned a couple more CSS properties earlier</p>\r\n\r\n\r\n\r\n<ul class=\"wp-block-list\">\r\n<li><strong><code>gap-rule-paint-order</code></strong>, which lets you control which of the decorations, rows or columns, appear above the other ones.</li>\r\n\r\n\r\n\r\n<li><strong><code>row-rule-break</code></strong> / <strong><code>column-rule-break</code></strong>, which sets the behavior of the decoration lines at intersections. In particular, whether they are made of multiple segments, which start and end at intersections, or single, continuous lines.</li>\r\n</ul>\r\n\r\n\r\n\r\n<p>Because the feature is new, there isn’t MDN documentation about it yet. So to learn more, check out:</p>\r\n\r\n\r\n\r\n<ul class=\"wp-block-list\">\r\n<li><a href=\"https://www.w3.org/TR/css-gaps-1/\" rel=\"noopener\">CSS Gap Decorations Module Level 1</a> (First Public Working Draft)</li>\r\n\r\n\r\n\r\n<li><a href=\"https://github.com/MicrosoftEdge/MSEdgeExplainers/blob/main/CSSGapDecorations/explainer.md\" rel=\"noopener\">Microsoft Edge Explainer</a></li>\r\n</ul>\r\n\r\n\r\n\r\n<p>The Edge team has also created an <a href=\"https://microsoftedge.github.io/Demos/css-gap-decorations/playground.html\" rel=\"noopener\">interactive playground</a> where you can use visual controls to configure gap decorations.</p>\r\n\r\n\r\n\r\n<p>And, of course, the reason this is all implemented behind a flag is to elicit feedback from developers like you! If you have any feedback, questions, or bugs about this feature, I definitely encourage you to open a new ticket on the <a href=\"https://issues.chromium.org/issues/new?template_issue=422768750&component=1456721\" rel=\"noopener\">Chromium issue tracker</a>.</p>\r\n<hr />\r\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/the-gap-strikes-back-now-stylable/\">The Gap Strikes Back: Now Stylable</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&utm_source=css-tricks.com&utm_campaign=family_&utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
    "createdAt": "2025-07-01T12:42:38.000+00:00",
    "link": "https://css-tricks.com/the-gap-strikes-back-now-stylable/",
    "author": "",
    "site": {
      "id": "5",
      "url": "https://css-tricks.com/category/articles/feed",
      "name": "cssTrick"
    }
  },
  {
    "title": "[Korean FE Article] 두 대의 컴퓨터를 위한 리액트",
    "content": "<div class=\"captioned-image-container\"><figure><a class=\"image-link image2 is-viewable-img\" target=\"_blank\" href=\"https://substackcdn.com/image/fetch/$s_!s0CV!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d682b22-97f8-49f0-b0bd-1bb360d69431_1200x630.png\" data-component-name=\"Image2ToDOM\"><div class=\"image2-inset\"><picture><source type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/$s_!s0CV!,w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d682b22-97f8-49f0-b0bd-1bb360d69431_1200x630.png 424w, https://substackcdn.com/image/fetch/$s_!s0CV!,w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d682b22-97f8-49f0-b0bd-1bb360d69431_1200x630.png 848w, https://substackcdn.com/image/fetch/$s_!s0CV!,w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d682b22-97f8-49f0-b0bd-1bb360d69431_1200x630.png 1272w, https://substackcdn.com/image/fetch/$s_!s0CV!,w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d682b22-97f8-49f0-b0bd-1bb360d69431_1200x630.png 1456w\" sizes=\"100vw\"><img src=\"https://substackcdn.com/image/fetch/$s_!s0CV!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d682b22-97f8-49f0-b0bd-1bb360d69431_1200x630.png\" width=\"1200\" height=\"630\" data-attrs=\"{\"src\":\"https://substack-post-media.s3.amazonaws.com/public/images/7d682b22-97f8-49f0-b0bd-1bb360d69431_1200x630.png\",\"srcNoWatermark\":null,\"fullscreen\":null,\"imageSize\":null,\"height\":630,\"width\":1200,\"resizeWidth\":null,\"bytes\":null,\"alt\":\"Image\",\"title\":null,\"type\":null,\"href\":null,\"belowTheFold\":false,\"topImage\":true,\"internalRedirect\":null,\"isProcessing\":false,\"align\":null,\"offset\":false}\" class=\"sizing-normal\" alt=\"Image\" title=\"Image\" srcset=\"https://substackcdn.com/image/fetch/$s_!s0CV!,w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d682b22-97f8-49f0-b0bd-1bb360d69431_1200x630.png 424w, https://substackcdn.com/image/fetch/$s_!s0CV!,w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d682b22-97f8-49f0-b0bd-1bb360d69431_1200x630.png 848w, https://substackcdn.com/image/fetch/$s_!s0CV!,w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d682b22-97f8-49f0-b0bd-1bb360d69431_1200x630.png 1272w, https://substackcdn.com/image/fetch/$s_!s0CV!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d682b22-97f8-49f0-b0bd-1bb360d69431_1200x630.png 1456w\" sizes=\"100vw\" fetchpriority=\"high\"></picture><div class=\"image-link-expand\"><div class=\"pencraft pc-display-flex pc-gap-8 pc-reset\"><div class=\"pencraft pc-reset icon-container restack-image\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-refresh-cw\"><path d=\"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\"></path><path d=\"M21 3v5h-5\"></path><path d=\"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\"></path><path d=\"M8 16H3v5\"></path></svg></div><div class=\"pencraft pc-reset icon-container view-image\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-maximize2\"><polyline points=\"15 3 21 3 21 9\"></polyline><polyline points=\"9 21 3 21 3 15\"></polyline><line x1=\"21\" x2=\"14\" y1=\"3\" y2=\"10\"></line><line x1=\"3\" x2=\"10\" y1=\"21\" y2=\"14\"></line></svg></div></div></div></div></a></figure></div><blockquote><p>글 링크 : <a href=\"https://imnotadevleoper.tistory.com/363\">https://imnotadevleoper.tistory.com/363</a></p></blockquote><h2><strong>소개</strong></h2><p>이 글은 React Server Component에 대한 저자의 깊이 있는 사고를 담고 있습니다. 이 글은 원래 React Conf에서 발표된 강연을 기반으로 하며, 저자가 12번의 초안을 거쳐 결국 글보다는 강연 형태로 표현하게 된 복잡한 주제를 다룹니다.</p><p>글의 핵심은 HTML 태그와 JavaScript 함수 호출의 근본적인 차이점에서 시작됩니다. 저자는 태그가 \"청사진”의 성격을 가지는 반면, 함수 호출은 \"레시피\"와 같은 순차적 실행을 나타낸다고 설명합니다. 이러한 관점에서 선언형 프로그래밍과 명령형 프로그래밍의 차이를 명확히 구분하며, React Server Component가 이 두 패러다임을 어떻게 조화시키는지 보여줍니다.</p><p>특히 \"Early World\"와 \"Late World\"라는 개념을 통해 서버와 클라이언트에서 실행되는 코드의 역할을 구분하고, 각각의 실행 환경에서 컴포넌트들이 어떻게 동작하는지 설명합니다.</p><p>React Server Component의 동작 원리와 설계 철학을 이해하고 싶은 개발자들에게 유용한 내용입니다.</p><h2><strong>목차</strong></h2><ul><li><p>제1막</p><ul><li><p>레시피 및 청사진</p></li><li><p>Await 및 RPC</p></li><li><p>혹시 전화 줄래? (Call Me Maybe)</p></li><li><p>함수 분할 (Splitting a Function)</p></li><li><p>양쪽의 태그 (Tags on Both Sides)</p></li><li><p>2대의 컴퓨터</p></li><li><p>시간이 반격을 가하다 (Time Strikes Back)</p></li><li><p>치명적인 결함</p></li><li><p>새로운 희망</p></li><li><p>임베딩(embedding)과 속성 검사(introspecting)</p></li><li><p>생각하고 실행하기</p></li></ul></li><li><p>제2막</p><ul><li><p>The Reader and the Writer</p></li><li><p>코드와 데이터</p></li><li><p>시간과 공간</p></li><li><p>두 세계</p></li><li><p>간격(gap)을 주의하기</p></li><li><p>A Door</p></li><li><p>대청소</p></li><li><p>더 많은 대청소</p></li><li><p>앞 세계와 뒷 세계의 컴포넌트</p></li><li><p>도넛</p></li><li><p>합성</p></li><li><p>꿈의 연속</p></li></ul></li><li><p>에필로그</p></li></ul>",
    "createdAt": "2025-07-01T00:30:33.000+00:00",
    "link": "https://kofearticle.substack.com/p/korean-fe-article-c8a",
    "author": "",
    "site": {
      "id": "3",
      "url": "https://kofearticle.substack.com/feed",
      "name": "kofearticle"
    }
  },
  {
    "title": "Using CSS Cascade Layers With Tailwind Utilities",
    "content": "<p>Adam Wathan has (very cleverly) built Tailwind with <a href=\"https://css-tricks.com/css-cascade-layers/\">CSS Cascade Layers</a>, making it extremely powerful for organizing styles by priority.</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@layer theme, base, components, utilities;\r\n@import 'tailwindcss/theme.css' layer(theme);\r\n@import 'tailwindcss/utilities.css' layer(utilities);</code></pre>\r\n\r\n\r\n\r\n<p>The core of Tailwind are its utilities. This means you have two choices:</p>\r\n\r\n\r\n\r\n<ol class=\"wp-block-list\">\r\n<li>The default choice</li>\r\n\r\n\r\n\r\n<li>The unorthodox choice</li>\r\n</ol>\r\n\r\n\r\n\r\n<span id=\"more-386907\"></span>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"the-default-choice\">The default choice</h3>\r\n\r\n\r\n<p>The default choice is to follow Tailwind’s recommended layer order: place components first, and Tailwind utilities last.</p>\r\n\r\n\r\n\r\n<p>So, if you’re building components, you need to manually wrap your components with a <code>@layer</code> directive. Then, overwrite your component styles with Tailwind, putting Tailwind as the “most important layer”.</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* Write your components */\r\n@layer components {\r\n  .component {\r\n    /* Your CSS here */\r\n  }\r\n}</code></pre>\r\n\r\n\r\n\r\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\"><!-- Override with Tailwind utilities --> \r\n<div class=\"component p-4\"> ... </div></code></pre>\r\n\r\n\r\n\r\n<p>That’s a decent way of doing things.</p>\r\n\r\n\r\n\r\n<p>But, being the bad boy I am, I don’t take the default approach as the “best” one. Over a year of (major) experimentation with Tailwind and vanilla CSS, I’ve come across what I believe is a better solution.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"the-unorthodox-choice\">The Unorthodox Choice</h3>\r\n\r\n\r\n<p>Before we go on, I have to tell you that I’m writing a course called <a href=\"https://magicaldevschool.com/courses/unorthodox-tailwind/\" rel=\"noopener\">Unorthodox Tailwind</a> — this shows you everything I know about using Tailwind and CSS in synergistic ways, leveraging the strengths of each.</p>\r\n\r\n\r\n\r\n<p>Shameless plug aside, let’s dive into the Unorthodox Choice now.</p>\r\n\r\n\r\n\r\n<p>In this case, the Unorthodox Choice is to write your styles in an unnamed layer — or any layer after utilities, really — so that your CSS naturally overwrites Tailwind utilities.</p>\r\n\r\n\r\n\r\n<p>Of these two, I prefer the unnamed layer option:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* Unnamed layer option */\r\n@layer theme, base, components, utilities; \r\n\r\n/* Write your CSS normally here */ \r\n.component { /* ... */ }</code></pre>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* Named layer option */\r\n/* Use whatever layer name you come up with. I simply used css here because it made most sense for explaining things */\r\n@layer theme, base, components, utilities, css; \r\n\r\n@layer css {\r\n  .component { /* ... */ }\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>I have many reasons why I do this:</p>\r\n\r\n\r\n\r\n<ol class=\"wp-block-list\">\r\n<li>I don’t like to add unnecessary CSS layers because it makes code harder to write — more keystrokes, having to remember the specific layer I used it in, etc.</li>\r\n\r\n\r\n\r\n<li>I’m pretty skilled with <a href=\"https://itcss.io\" rel=\"noopener\">ITCSS</a>, selector specificity, and all the good-old-stuff you’d expect from a seasoned front-end developer, so writing CSS in a single layer doesn’t scare me at all.</li>\r\n\r\n\r\n\r\n<li>I can do complex stuff that are hard or impossible to do in Tailwind (like theming and animations) in CSS.</li>\r\n</ol>\r\n\r\n\r\n\r\n<p>Your mileage may vary, of course.</p>\r\n\r\n\r\n\r\n<p>Now, if you have followed my reasoning so far, you would have noticed that I use Tailwind <em>very</em> differently:</p>\r\n\r\n\r\n\r\n<ul class=\"wp-block-list\">\r\n<li>Tailwind utilities are not the “most important” layer.</li>\r\n\r\n\r\n\r\n<li>My unnamed CSS layer is the most important one.</li>\r\n</ul>\r\n\r\n\r\n\r\n<p>I do this so I can:</p>\r\n\r\n\r\n\r\n<ul class=\"wp-block-list\">\r\n<li><strong>Build prototypes with Tailwind</strong> (quickly, easily, especially with the <a href=\"https://splendidlabz/docs/layouts/\">tools</a> I’ve created).</li>\r\n\r\n\r\n\r\n<li><strong>Shift these properties to CSS</strong> when they get more complex — so I don’t have to read messy utility-littered HTML that makes my heart sink. Not because utility HTML is bad, but because it takes lots of brain processing power to figure out what’s happening.</li>\r\n</ul>\r\n\r\n\r\n\r\n<p>Finally, here’s the nice thing about Tailwind being in a utility layer: I can always <code>!important</code> a utility to give it strength.</p>\r\n\r\n\r\n\r\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\"><!-- !important the padding utility -->\r\n<div class=\"component !p-4\"> ... </div></code></pre>\r\n\r\n\r\n\r\n<p>Whoa, hold on, wait a minute! Isn’t this wrong, you might ask?</p>\r\n\r\n\r\n\r\n<p>Nope. The <code>!important</code> keyword has traditionally been used to override classes. In this case, we’re leveraging on the <a href=\"https://css-tricks.com/css-cascade-layers/#important-origins-context-and-layers-are-reversed\"><code>!important</code> feature in CSS Layers</a> to say the Tailwind utility is more important than any CSS in the unnamed layer.</p>\r\n\r\n\r\n\r\n<p>This is perfectly valid and is a built-in feature for CSS Layers.</p>\r\n\r\n\r\n\r\n<p>Besides, the <code>!important</code> is so explicit (and used so little) that it makes sense for one-off quick-and-dirty adjustments (without creating a brand new selector for it).</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"tailwind-utilities-are-more-powerful-than-they-seem\">Tailwind utilities are more powerful than they seem</h3>\r\n\r\n\r\n<p>Tailwind utilities are not a 1:1 map between a class and a CSS property. Built-in Tailwind utilities mostly look like this so it can give people a wrong impression.</p>\r\n\r\n\r\n\r\n<p>Tailwind utilities are more like <a href=\"https://css-tricks.com/tailwinds-apply-feature-is-better-than-it-sounds/\">convenient Sass mixins</a>, which means we can build effective tools for <a href=\"https://splendidlabz/docs/layouts/\">layouts</a>, theming, typography, and more, through them.</p>\r\n\r\n\r\n\r\n<p>You can find out about these thoughts inside <a href=\"https://magicaldevschool.com/courses/unorthodox-tailwind/\" rel=\"noopener\">Unorthodox Tailwind</a>.</p>\r\n\r\n\r\n\r\n<p>Thanks for reading and I hope you’re enjoying a new way of looking at (or using) Tailwind!</p>\r\n<hr />\r\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/using-css-cascade-layers-with-tailwind-utilities/\">Using CSS Cascade Layers With Tailwind Utilities</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&utm_source=css-tricks.com&utm_campaign=family_&utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
    "createdAt": "2025-06-30T13:16:43.000+00:00",
    "link": "https://css-tricks.com/using-css-cascade-layers-with-tailwind-utilities/",
    "author": "",
    "site": {
      "id": "4",
      "url": "https://css-tricks.com/category/articles/feed",
      "name": "cssTrick"
    }
  },
  {
    "title": "Using CSS Cascade Layers With Tailwind Utilities",
    "content": "<p>Adam Wathan has (very cleverly) built Tailwind with <a href=\"https://css-tricks.com/css-cascade-layers/\">CSS Cascade Layers</a>, making it extremely powerful for organizing styles by priority.</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@layer theme, base, components, utilities;\r\n@import 'tailwindcss/theme.css' layer(theme);\r\n@import 'tailwindcss/utilities.css' layer(utilities);</code></pre>\r\n\r\n\r\n\r\n<p>The core of Tailwind are its utilities. This means you have two choices:</p>\r\n\r\n\r\n\r\n<ol class=\"wp-block-list\">\r\n<li>The default choice</li>\r\n\r\n\r\n\r\n<li>The unorthodox choice</li>\r\n</ol>\r\n\r\n\r\n\r\n<span id=\"more-386907\"></span>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"the-default-choice\">The default choice</h3>\r\n\r\n\r\n<p>The default choice is to follow Tailwind’s recommended layer order: place components first, and Tailwind utilities last.</p>\r\n\r\n\r\n\r\n<p>So, if you’re building components, you need to manually wrap your components with a <code>@layer</code> directive. Then, overwrite your component styles with Tailwind, putting Tailwind as the “most important layer”.</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* Write your components */\r\n@layer components {\r\n  .component {\r\n    /* Your CSS here */\r\n  }\r\n}</code></pre>\r\n\r\n\r\n\r\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\"><!-- Override with Tailwind utilities --> \r\n<div class=\"component p-4\"> ... </div></code></pre>\r\n\r\n\r\n\r\n<p>That’s a decent way of doing things.</p>\r\n\r\n\r\n\r\n<p>But, being the bad boy I am, I don’t take the default approach as the “best” one. Over a year of (major) experimentation with Tailwind and vanilla CSS, I’ve come across what I believe is a better solution.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"the-unorthodox-choice\">The Unorthodox Choice</h3>\r\n\r\n\r\n<p>Before we go on, I have to tell you that I’m writing a course called <a href=\"https://magicaldevschool.com/courses/unorthodox-tailwind/\" rel=\"noopener\">Unorthodox Tailwind</a> — this shows you everything I know about using Tailwind and CSS in synergistic ways, leveraging the strengths of each.</p>\r\n\r\n\r\n\r\n<p>Shameless plug aside, let’s dive into the Unorthodox Choice now.</p>\r\n\r\n\r\n\r\n<p>In this case, the Unorthodox Choice is to write your styles in an unnamed layer — or any layer after utilities, really — so that your CSS naturally overwrites Tailwind utilities.</p>\r\n\r\n\r\n\r\n<p>Of these two, I prefer the unnamed layer option:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* Unnamed layer option */\r\n@layer theme, base, components, utilities; \r\n\r\n/* Write your CSS normally here */ \r\n.component { /* ... */ }</code></pre>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* Named layer option */\r\n/* Use whatever layer name you come up with. I simply used css here because it made most sense for explaining things */\r\n@layer theme, base, components, utilities, css; \r\n\r\n@layer css {\r\n  .component { /* ... */ }\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>I have many reasons why I do this:</p>\r\n\r\n\r\n\r\n<ol class=\"wp-block-list\">\r\n<li>I don’t like to add unnecessary CSS layers because it makes code harder to write — more keystrokes, having to remember the specific layer I used it in, etc.</li>\r\n\r\n\r\n\r\n<li>I’m pretty skilled with <a href=\"https://itcss.io\" rel=\"noopener\">ITCSS</a>, selector specificity, and all the good-old-stuff you’d expect from a seasoned front-end developer, so writing CSS in a single layer doesn’t scare me at all.</li>\r\n\r\n\r\n\r\n<li>I can do complex stuff that are hard or impossible to do in Tailwind (like theming and animations) in CSS.</li>\r\n</ol>\r\n\r\n\r\n\r\n<p>Your mileage may vary, of course.</p>\r\n\r\n\r\n\r\n<p>Now, if you have followed my reasoning so far, you would have noticed that I use Tailwind <em>very</em> differently:</p>\r\n\r\n\r\n\r\n<ul class=\"wp-block-list\">\r\n<li>Tailwind utilities are not the “most important” layer.</li>\r\n\r\n\r\n\r\n<li>My unnamed CSS layer is the most important one.</li>\r\n</ul>\r\n\r\n\r\n\r\n<p>I do this so I can:</p>\r\n\r\n\r\n\r\n<ul class=\"wp-block-list\">\r\n<li><strong>Build prototypes with Tailwind</strong> (quickly, easily, especially with the <a href=\"https://splendidlabz/docs/layouts/\">tools</a> I’ve created).</li>\r\n\r\n\r\n\r\n<li><strong>Shift these properties to CSS</strong> when they get more complex — so I don’t have to read messy utility-littered HTML that makes my heart sink. Not because utility HTML is bad, but because it takes lots of brain processing power to figure out what’s happening.</li>\r\n</ul>\r\n\r\n\r\n\r\n<p>Finally, here’s the nice thing about Tailwind being in a utility layer: I can always <code>!important</code> a utility to give it strength.</p>\r\n\r\n\r\n\r\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\"><!-- !important the padding utility -->\r\n<div class=\"component !p-4\"> ... </div></code></pre>\r\n\r\n\r\n\r\n<p>Whoa, hold on, wait a minute! Isn’t this wrong, you might ask?</p>\r\n\r\n\r\n\r\n<p>Nope. The <code>!important</code> keyword has traditionally been used to override classes. In this case, we’re leveraging on the <a href=\"https://css-tricks.com/css-cascade-layers/#important-origins-context-and-layers-are-reversed\"><code>!important</code> feature in CSS Layers</a> to say the Tailwind utility is more important than any CSS in the unnamed layer.</p>\r\n\r\n\r\n\r\n<p>This is perfectly valid and is a built-in feature for CSS Layers.</p>\r\n\r\n\r\n\r\n<p>Besides, the <code>!important</code> is so explicit (and used so little) that it makes sense for one-off quick-and-dirty adjustments (without creating a brand new selector for it).</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"tailwind-utilities-are-more-powerful-than-they-seem\">Tailwind utilities are more powerful than they seem</h3>\r\n\r\n\r\n<p>Tailwind utilities are not a 1:1 map between a class and a CSS property. Built-in Tailwind utilities mostly look like this so it can give people a wrong impression.</p>\r\n\r\n\r\n\r\n<p>Tailwind utilities are more like <a href=\"https://css-tricks.com/tailwinds-apply-feature-is-better-than-it-sounds/\">convenient Sass mixins</a>, which means we can build effective tools for <a href=\"https://splendidlabz/docs/layouts/\">layouts</a>, theming, typography, and more, through them.</p>\r\n\r\n\r\n\r\n<p>You can find out about these thoughts inside <a href=\"https://magicaldevschool.com/courses/unorthodox-tailwind/\" rel=\"noopener\">Unorthodox Tailwind</a>.</p>\r\n\r\n\r\n\r\n<p>Thanks for reading and I hope you’re enjoying a new way of looking at (or using) Tailwind!</p>\r\n<hr />\r\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/using-css-cascade-layers-with-tailwind-utilities/\">Using CSS Cascade Layers With Tailwind Utilities</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&utm_source=css-tricks.com&utm_campaign=family_&utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
    "createdAt": "2025-06-30T13:16:43.000+00:00",
    "link": "https://css-tricks.com/using-css-cascade-layers-with-tailwind-utilities/",
    "author": "",
    "site": {
      "id": "5",
      "url": "https://css-tricks.com/category/articles/feed",
      "name": "cssTrick"
    }
  },
  {
    "title": "[Korean FE Article] tailwind CSS v4.0: 최신 웹 개발의 완벽한 게임 체인저",
    "content": "<div class=\"captioned-image-container\"><figure><a class=\"image-link image2 is-viewable-img\" target=\"_blank\" href=\"https://substackcdn.com/image/fetch/$s_!IPw3!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F26524a0b-42f2-4757-9563-040e570f8e84_1364x694.png\" data-component-name=\"Image2ToDOM\"><div class=\"image2-inset\"><picture><source type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/$s_!IPw3!,w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F26524a0b-42f2-4757-9563-040e570f8e84_1364x694.png 424w, https://substackcdn.com/image/fetch/$s_!IPw3!,w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F26524a0b-42f2-4757-9563-040e570f8e84_1364x694.png 848w, https://substackcdn.com/image/fetch/$s_!IPw3!,w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F26524a0b-42f2-4757-9563-040e570f8e84_1364x694.png 1272w, https://substackcdn.com/image/fetch/$s_!IPw3!,w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F26524a0b-42f2-4757-9563-040e570f8e84_1364x694.png 1456w\" sizes=\"100vw\"><img src=\"https://substackcdn.com/image/fetch/$s_!IPw3!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F26524a0b-42f2-4757-9563-040e570f8e84_1364x694.png\" width=\"1364\" height=\"694\" data-attrs=\"{\"src\":\"https://substack-post-media.s3.amazonaws.com/public/images/26524a0b-42f2-4757-9563-040e570f8e84_1364x694.png\",\"srcNoWatermark\":null,\"fullscreen\":null,\"imageSize\":null,\"height\":694,\"width\":1364,\"resizeWidth\":null,\"bytes\":343491,\"alt\":null,\"title\":null,\"type\":\"image/png\",\"href\":null,\"belowTheFold\":false,\"topImage\":true,\"internalRedirect\":\"https://kofearticle.substack.com/i/167030344?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F26524a0b-42f2-4757-9563-040e570f8e84_1364x694.png\",\"isProcessing\":false,\"align\":null,\"offset\":false}\" class=\"sizing-normal\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/$s_!IPw3!,w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F26524a0b-42f2-4757-9563-040e570f8e84_1364x694.png 424w, https://substackcdn.com/image/fetch/$s_!IPw3!,w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F26524a0b-42f2-4757-9563-040e570f8e84_1364x694.png 848w, https://substackcdn.com/image/fetch/$s_!IPw3!,w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F26524a0b-42f2-4757-9563-040e570f8e84_1364x694.png 1272w, https://substackcdn.com/image/fetch/$s_!IPw3!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F26524a0b-42f2-4757-9563-040e570f8e84_1364x694.png 1456w\" sizes=\"100vw\" fetchpriority=\"high\"></picture><div class=\"image-link-expand\"><div class=\"pencraft pc-display-flex pc-gap-8 pc-reset\"><div class=\"pencraft pc-reset icon-container restack-image\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-refresh-cw\"><path d=\"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\"></path><path d=\"M21 3v5h-5\"></path><path d=\"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\"></path><path d=\"M8 16H3v5\"></path></svg></div><div class=\"pencraft pc-reset icon-container view-image\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-maximize2\"><polyline points=\"15 3 21 3 21 9\"></polyline><polyline points=\"9 21 3 21 3 15\"></polyline><line x1=\"21\" x2=\"14\" y1=\"3\" y2=\"10\"></line><line x1=\"3\" x2=\"10\" y1=\"21\" y2=\"14\"></line></svg></div></div></div></div></a></figure></div><blockquote><p>글 링크: <a href=\"https://tinyurl.com/yeyrdxjb\">https://tinyurl.com/yeyrdxjb</a></p></blockquote><h2><strong>소개</strong></h2><p>AI가 발전하면서 프론트엔드에도 많은 변화가 일어나고 있습니다. 만들고 싶은 것을 몇 줄만 적으면 하나의 프로토타입이 뚝딱 나오고, 이미 있는 디자인을 코드로 변환하는 일도 점점 쉬워지고 있죠. 그렇다면 AI가 생성하는 수많은 코드의 공통점은 무엇일까요? 여러 가지가 있겠지만, 별다른 프롬프트를 입력하지 않으면 대부분 Tailwind CSS를 사용해 UI를 구성한다는 점을 들 수 있습니다.</p><p>올해 Tailwind CSS가 4.0 버전을 발표하면서 다양한 부분이 개선됐는데, 하나하나 살펴볼수록 Tailwind Labs 팀은 현대적인 웹 개발에 뛰어난 DX를 제공할 뿐 아니라 성능까지 세심하게 신경 쓰는 팀이라는 생각이 듭니다. 이 글을 통해 Tailwind v4의 변화점을 확인하고, 기존에 Tailwind를 사용하는 팀이든 그렇지 않은 팀이든 모두 많은 인사이트를 얻어 가셨으면 합니다.</p><p>참고로 원문만 읽었을 때 Tailwind CSS를 사용하지 않는 분들은 이해하기 어려운 부분이 있을 것 같아, 역자 설명을 조금 덧붙였습니다. 제가 잘못 이해했거나 추가 설명이 필요하다면 편하게 댓글로 알려 주세요!</p><h2><strong>목차</strong></h2><ul><li><p>성능개선</p></li><li><p>CSS 우선 구성: 패러다임의 전환</p></li><li><p>@layer를 사용한 스타일 우선순위 제어</p></li><li><p>커스텀 속성 정의 가능</p></li><li><p>Color-Mix() 함수</p></li><li><p>논리적 속성</p></li><li><p>설치 과정 단순화</p></li><li><p>자동 콘텐츠 감지</p></li><li><p>Vite Plugin 우선 지원</p></li><li><p>동적 유틸리티: 복잡한 설정은 이제 그만</p></li><li><p>진화된 색상 시스템</p></li><li><p>Container Queries가 마침내 내장됨</p></li><li><p>3D Transforms 지원과 향상된 그라디언트</p></li><li><p>새로운 Variants와 Utilities</p></li><li><p>예상보다 더 쉬운 마이그레이션</p></li><li><p>tailwind가 그리는 큰 그림</p></li><li><p>업그레이드해야만 할까요?</p></li><li><p>결론</p></li></ul>",
    "createdAt": "2025-06-29T23:30:28.000+00:00",
    "link": "https://kofearticle.substack.com/p/korean-fe-article-tailwind-css-v40",
    "author": "",
    "site": {
      "id": "3",
      "url": "https://kofearticle.substack.com/feed",
      "name": "kofearticle"
    }
  },
  {
    "title": "CSS Blob Recipes",
    "content": "<p><em>Blob, Blob, Blob</em>. You hate them. You love them. Personally, as a design illiterate, I like to overuse them… a lot. And when you repeat the same process over and over again, it’s only a question of how much you can optimize it, or in this case, what’s the easiest way to create blobs in CSS? Turns out, as always, there are many approaches.</p>\r\n\r\n\r\n\r\n<span id=\"more-387089\"></span>\r\n\r\n\r\n\r\n<p>To know if our following blobs are worth using, we’ll need them to pass three tests:</p>\r\n\r\n\r\n\r\n<ol class=\"wp-block-list\">\r\n<li>They can be with just a single element (and preferably without pseudos).</li>\r\n\r\n\r\n\r\n<li>They can be easily designed (ideally through an online tool).</li>\r\n\r\n\r\n\r\n<li>We can use gradient backgrounds, borders, shadows, and other CSS effects on them.</li>\r\n</ol>\r\n\r\n\r\n\r\n<p>Without further ado, let’s <em>Blob, Blob, Blob</em> right in.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"just-generate-them-online\">Just generate them online</h3>\r\n\r\n\r\n<p>I know it’s disenchanting to click on an article about making blobs in CSS just for me to say you can generate them outside CSS. Still, it’s probably the most common way to create blobs on the web, so to be thorough, these are some online tools I’ve used before to create <strong>SVG</strong> blobs.</p>\r\n\r\n\r\n\r\n<ul class=\"wp-block-list\">\r\n<li><strong><a href=\"https://app.haikei.app/\" rel=\"noopener\">Haikei</a>.</strong> Probably the one I have used the most since, besides blobs, it can also generate lots of SVG backgrounds.</li>\r\n\r\n\r\n\r\n<li><strong><a href=\"https://www.blobmaker.app/\" rel=\"noopener\">Blobmaker</a>.</strong> A dedicated tool for making blobs. It’s apparently part of Haikei now, so you can use both.</li>\r\n\r\n\r\n\r\n<li>Lastly, almost all graphic programs let you hand-draw blobs and export them as SVGs.</li>\r\n</ul>\r\n\r\n\r\n\r\n<p>For example, this is one I generated just now. Keep it around, as it will come in handy later.</p>\r\n\r\n\r\n\r\n<figure class=\"wp-block-image size-full is-resized\"><img data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"829\" height=\"766\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-3.png?resize=829%2C766&ssl=1\" alt=\"Randomly shaped blob in bright red.\" class=\"wp-image-387090\" style=\"width:407px;height:auto\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-3.png?w=829&ssl=1 829w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-3.png?resize=300%2C277&ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-3.png?resize=768%2C710&ssl=1 768w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\" /></figure>\r\n\r\n\r\n\r\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\"><svg viewBox=\"0 0 200 200\" xmlns=\"http://www.w3.org/2000/svg\">\r\n  <path\r\n    fill=\"#FA4D56\"\r\n    d=\"M65.4,-37.9C79.2,-13.9,81,17,68.1,38C55.2,59.1,27.6,70.5,1.5,69.6C-24.6,68.8,-49.3,55.7,-56,38.2C-62.6,20.7,-51.3,-1.2,-39,-24.4C-26.7,-47.6,-13.3,-72,6.2,-75.6C25.8,-79.2,51.6,-62,65.4,-37.9Z\"\r\n    transform=\"translate(100 100)\"\r\n  />\r\n</svg></code></pre>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"using-border-radius-\">Using <code>border-radius</code></h3>\r\n\r\n\r\n<p>While counterintuitive, we can use the <code><a href=\"https://css-tricks.com/almanac/properties/b/border-radius/\">border-radius</a></code> property to create blobs. This technique isn’t new by any means; it was <a href=\"https://9elements.com/blog/css-border-radius-can-do-that/\" rel=\"noopener\">first described by Nils Binder</a> in 2018, but it is still fairly unknown. Even for those who use it, the inner workings are not entirely clear.</p>\r\n\r\n\r\n\r\n<p>To start, you may know the <code>border-radius</code> is a shorthand to each individual corner’s radius, going from the top left corner clockwise. For example, we can set each corner’s <code>border-radius</code> to get a bubbly square shape:</p>\r\n\r\n\r\n\r\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\"><div class=\"blob\"></div></code></pre>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.blob {\r\n  border-radius: 25% 50% 75% 100%;\r\n}</code></pre>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_gbpRwZz\" src=\"//codepen.io/anon/embed/preview/gbpRwZz?height=500&theme-id=1&slug-hash=gbpRwZz&default-tab=result\" height=\"500\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed gbpRwZz\" title=\"CodePen Embed gbpRwZz\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>However, what <code>border-radius</code> does — and also why it’s called “radius” — is to shape each corner following a circle of the given radius. For example, if we set the top left corner to <code>25%</code>, it will follow a circle with a radius <code>25%</code> the size of the shape.</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.blob {\r\n  border-top-left-radius: 25%;\r\n}</code></pre>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_VYLWGve\" src=\"//codepen.io/anon/embed/preview/VYLWGve?height=500&theme-id=1&slug-hash=VYLWGve&default-tab=result\" height=\"500\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed VYLWGve\" title=\"CodePen Embed VYLWGve\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>What’s less known is that each corner property is still a <em>shortcut</em> towards its horizontal and vertical radii. Normally, you set both radii to the same value, getting a circle, but you can set them individually to create an ellipse. For example, the following sets the horizontal radius to <code>25%</code> of the element’s width and the vertical to <code>50%</code> of its height:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.blob {\r\n  border-top-left-radius: 25% 50%;\r\n}</code></pre>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_WbvOYOo\" src=\"//codepen.io/anon/embed/preview/WbvOYOo?height=500&theme-id=1&slug-hash=WbvOYOo&default-tab=result\" height=\"500\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed WbvOYOo\" title=\"CodePen Embed WbvOYOo\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>We can now shape each corner like an ellipse, and it is the combination of all four ellipses that creates the illusion of a blob! Just take into consideration that to use the horizontal and vertical radii syntax through the <code>border-radius</code> property, we’ll need to separate the horizontal from the vertical radii using a forward slash (<code>/</code>).</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.blob {\r\n  border-radius:\r\n    /* horizontal */\r\n    100% 30% 60% 70% /\r\n    /* vertical */\r\n    50% 40% 70% 70%;\r\n}</code></pre>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_dPoWMym\" src=\"//codepen.io/anon/embed/preview/dPoWMym?height=500&theme-id=1&slug-hash=dPoWMym&default-tab=result\" height=\"500\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed dPoWMym\" title=\"CodePen Embed dPoWMym\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>The syntax isn’t too intuitive, so designing a blob from scratch will likely be a headache. Luckily, <a href=\"https://9elements.github.io/fancy-border-radius/\" rel=\"noopener\">Nils Binder made a tool</a> exactly for that!</p>\r\n\r\n\r\n<h4 class=\"wp-block-heading\" id=\"blobbing-blobs-together\">Blobbing blobs together</h4>\r\n\r\n\r\n<p>This hack is awesome. We aren’t supposed to use <code>border-radius</code> like that, but we still do. Admittedly, we are limited to boring blobs. Due to the nature of <code>border-radius</code>, no matter how hard we try, we will only get convex shapes.</p>\r\n\r\n\r\n\r\n<figure class=\"wp-block-image size-large\"><img data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"576\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/convex_concave_i8a0vu.webp?resize=1024%2C576\" alt=\"Concave and convex shapes\" class=\"wp-image-387123\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/convex_concave_i8a0vu.webp?resize=1024%2C576&ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/convex_concave_i8a0vu.webp?resize=300%2C169&ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/convex_concave_i8a0vu.webp?resize=768%2C432&ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/convex_concave_i8a0vu.webp?resize=1536%2C864&ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/convex_concave_i8a0vu.webp?w=1920&ssl=1 1920w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\" /></figure>\r\n\r\n\r\n\r\n<p>Just going off <code>border-radius</code>, we can try to minimize it a little by sticking more than one blob together:</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_gbpxJKd\" src=\"//codepen.io/anon/embed/preview/gbpxJKd?height=450&theme-id=1&slug-hash=gbpxJKd&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed gbpxJKd\" title=\"CodePen Embed gbpxJKd\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>However, I don’t want to spend too much time on this technique since it is too impractical to be worth it. To name a few drawbacks:</p>\r\n\r\n\r\n\r\n<ol class=\"wp-block-list\">\r\n<li>We are using more than one element or, at the very least, an extra pseudo-element. Ideally, we want to keep it to one element.</li>\r\n\r\n\r\n\r\n<li>We don’t have a tool to prototype our blobby amalgamations, so making one is a process of trial and error.</li>\r\n\r\n\r\n\r\n<li>We can’t use borders, gradients, or box shadows since they would reveal the element’s outlines.</li>\r\n</ol>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"multiple-backgrounds-and-svg-filters\">Multiple backgrounds and SVG filters</h3>\r\n\r\n\r\n<p>This one is an improvement in the Gooey Effect, <a href=\"https://css-tricks.com/gooey-effect/\">described here by Lucas Bebber</a>, although I don’t know who first came up with it. In the original effect, several elements can be morphed together like drops of liquid sticking to and flowing out of each other:</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_LELBEo\" src=\"//codepen.io/anon/embed/preview/LELBEo?height=500&theme-id=1&slug-hash=LELBEo&default-tab=result\" height=\"500\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed LELBEo\" title=\"CodePen Embed LELBEo\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>It works by first blurring shapes nearby, creating some connected shadows. Then we crank up the contrast, forcing the blur out and smoothly connecting them in the process. Take, for example, this demo by Chris Coyer (It’s from 2014, so more than 10 years ago!):</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_poXpNL\" src=\"//codepen.io/anon/embed/preview/poXpNL?height=450&theme-id=1&slug-hash=poXpNL&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed poXpNL\" title=\"CodePen Embed poXpNL\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>If you look at the code, you’ll notice Chris uses the <a href=\"https://css-tricks.com/almanac/properties/f/filter/\"><code>filter</code></a> property along the <code>blur()</code> and <code>contrast()</code> functions, which I’ve also seen in other blob demos. To be specific, it applies <code>blur()</code> on each individual circle and then <code>contrast()</code> on the parent element. So, if we have the following HTML:</p>\r\n\r\n\r\n\r\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\"><div class=\"blob\">\r\n  <div class=\"subblob\"></div>\r\n  <div class=\"subblob\"></div>\r\n  <div class=\"subblob\"></div>\r\n</div></code></pre>\r\n\r\n\r\n\r\n<p>…we would need to apply filters and background colors as such:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.blob {\r\n  filter: contrast(50);\r\n  background: white; /* Solid colors are necessary */\r\n}\r\n\r\n.subblob {\r\n  filter: blur(15px);\r\n  background: black; /* Solid colors are necessary */\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>However, there is a good reason why those demos stick to white shapes and black backgrounds (or vice versa) since things get unpredictable once colors aren’t contrast-y enough. See it for yourself in the following demo by changing the color. Just be wary: <em>shades get ugly</em>.</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_yyNomvx\" src=\"//codepen.io/anon/embed/preview/yyNomvx?height=450&theme-id=1&slug-hash=yyNomvx&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed yyNomvx\" title=\"CodePen Embed yyNomvx\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>To solve this, we will use an SVG filter instead. I don’t want to get too technical on SVG (if you want to, read Luca’s post!). In a nutshell, we can apply blurring and contrast filters using SVGs, but now, we can also pick which color channel we apply the contrast to, unlike normal <code>contrast()</code>, which modifies all colors. </p>\r\n\r\n\r\n\r\n<p>Since we want to leave color channels (<code>R</code>, <code>G</code> and <code>B</code>) untouched, we will only crank the contrast up for the alpha channel. That translates to the next SVG filter, which can be embedded in the HTML:</p>\r\n\r\n\r\n\r\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\"><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" style=\"position: absolute;\">\r\n  <defs>\r\n    <filter id=\"blob\">\r\n      <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"12\" result=\"blur\" />\r\n      <feColorMatrix in=\"blur\" mode=\"matrix\" values=\"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 18 -6\" result=\"goo\" />\r\n      <feBlend in=\"SourceGraphic\" in2=\"blob\" />\r\n    </filter>\r\n  </defs>\r\n</svg></code></pre>\r\n\r\n\r\n\r\n<p>To apply it, we will use again <code>filter</code>, but this time we’ll set it to <code>url(\"#blob\")</code>, so that it pulls the SVG from the HTML.</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.blob {\r\n  filter: url(\"#blob\");\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>And now we can even use it with gradient backgrounds!</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_MYwvNZL\" src=\"//codepen.io/anon/embed/preview/MYwvNZL?height=450&theme-id=1&slug-hash=MYwvNZL&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed MYwvNZL\" title=\"CodePen Embed MYwvNZL\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>That being said, this approach comes with two small, but important, changes to common CSS filters:</p>\r\n\r\n\r\n\r\n<ol class=\"wp-block-list\">\r\n<li>The filter is applied to the parent element, not the individual shapes.</li>\r\n\r\n\r\n\r\n<li>The parent element must be transparent (which is a huge advantage). To change the background color, we can instead change the body or other ancestors’ background, and it will work with no issues.</li>\r\n</ol>\r\n\r\n\r\n\r\n<p>What’s left is to place the <code>.subblob</code> elements together such that they make a blobby enough shape, then apply the SVG filters to morph them:</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_bNdrXZv\" src=\"//codepen.io/anon/embed/preview/bNdrXZv?height=500&theme-id=1&slug-hash=bNdrXZv&default-tab=result\" height=\"500\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed bNdrXZv\" title=\"CodePen Embed bNdrXZv\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n<h4 class=\"wp-block-heading\" id=\"making-it-one-element\">Making it one element</h4>\r\n\r\n\r\n<p>This works well, but it has a similar issue to the blob we made by morphing several <code>border-radius</code> instances: too many elements for a simple blob. Luckily, we can take advantage of the <a href=\"https://css-tricks.com/almanac/properties/b/background/\"><code>background</code></a> property to create multiple shapes and morph them together using SVG filters, all in a single element. Since we are keeping it to one element, we will go back to just one empty <code>.blob</code> div:</p>\r\n\r\n\r\n\r\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\"><div class=\"blob\"></div></code></pre>\r\n\r\n\r\n\r\n<p>To recap, the <code>background</code> shorthand can set all background properties and also set multiple backgrounds at once. Of all the properties, we only care about the <a href=\"https://css-tricks.com/almanac/properties/b/background-image/\"><code>background-image</code></a>, <a href=\"https://css-tricks.com/almanac/properties/b/background-position/\"><code>background-position</code></a> and <a href=\"https://css-tricks.com/almanac/properties/b/background-size/\"><code>background-size</code></a>.</p>\r\n\r\n\r\n\r\n<p>First, we will use <code>background-image</code> along with <code>radial-gradient()</code> to create a circle inside the element:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">body {\r\n  background: radial-gradient(farthest-side, var(--blob-color) 100%, #0000);\r\n  background-repeat: no-repeat; /* Important! */\r\n}</code></pre>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_PwqJYZQ\" src=\"//codepen.io/anon/embed/preview/PwqJYZQ?height=450&theme-id=1&slug-hash=PwqJYZQ&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed PwqJYZQ\" title=\"CodePen Embed PwqJYZQ\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>Here is what each parameter does:</p>\r\n\r\n\r\n\r\n<ul class=\"wp-block-list\">\r\n<li><strong><code>farthest-side</code>:</strong> Confines the shape to the element’s box farthest from its center. This way, it is kept as a circle.</li>\r\n\r\n\r\n\r\n<li><strong><code>var(--blob-color) 100%</code>:</strong> Fills the background shape from 0 to 100% with the same color, so it ends up as a solid color.</li>\r\n\r\n\r\n\r\n<li><strong><code>#0000</code>:</strong> After the shape is done, it makes a full stop to transparency, so the color ends.</li>\r\n</ul>\r\n\r\n\r\n\r\n<p>The next part is moving and resizing the circle using the <code>background-position</code> and <code>background-size</code> properties. Luckily, both can be set on <code>background</code> after the gradient, separated from each other by a forward slash (<code>/</code>).</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">body {\r\n  background: radial-gradient(...) 20% 30% / 30% 40%;\r\n  background-repeat: no-repeat; /* Important! */\r\n}</code></pre>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_PwqJYzR\" src=\"//codepen.io/anon/embed/preview/PwqJYzR?height=500&theme-id=1&slug-hash=PwqJYzR&default-tab=result\" height=\"500\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed PwqJYzR\" title=\"CodePen Embed PwqJYzR\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>The first pair of percentages sets the shape’s horizontal and vertical position (taking as a reference the top-left corner), while the second pair sets the shape’s width and height (taking as a reference the element’s size).</p>\r\n\r\n\r\n\r\n<p>As I mentioned, we can stack up different backgrounds together, which means we can create as many circles/ellipses as we want! For example, we can create three ellipses on the same element:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.blob {\r\n  background:\r\n    radial-gradient(farthest-side, var(--blob-color) 100%, #0000) 20% 30% / 30% 40%, \r\n    radial-gradient(farthest-side, var(--blob-color) 100%, #0000) 80% 50% / 40% 60%, \r\n    radial-gradient(farthest-side, var(--blob-color) 100%, #0000) 50% 70% / 50% 50%;\r\n  background-repeat: no-repeat;\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>What’s even better is that SVG filters don’t care whether shapes are made of elements or backgrounds, so we can also morph them together using the last <code>url(#blob)</code> filter!</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_vEOJqLQ\" src=\"//codepen.io/anon/embed/preview/vEOJqLQ?height=500&theme-id=1&slug-hash=vEOJqLQ&default-tab=result\" height=\"500\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed vEOJqLQ\" title=\"CodePen Embed vEOJqLQ\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>While this method may be a little too much for blobs, it unlocks squishing, stretching, dividing, and merging blobs <a href=\"https://css-tricks.com/gooey-effect/#aa-making-things-stick\">in seamless animations</a>.</p>\r\n\r\n\r\n\r\n<p>Again, all these tricks are awesome, but not enough for what we want! We accomplished reducing the blob to a single element, but we still can’t use gradients, borders, or shadows on them, and also, they are tedious to design and model. Then, that brings us to the ultimate blob approach…</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"using-the-new-shape-function\">Using the <code>shape()</code> function</h3>\r\n\r\n\r\n<p>Fortunately, there is a new way to make blobs that just dropped to CSS: the <code>shape()</code> function!</p>\r\n\r\n\r\n\r\n<p>I’ll explain <code>shape()</code>‘s syntax briefly, but for an in-depth explanation, you’ll want to check out both <a href=\"https://css-tricks.com/almanac/functions/s/shape/\">this explainer from the CSS-Tricks Almanac </a>as well as <a href=\"https://css-tricks.com/author/afiftemani/\">Temani Afif</a>‘s three-part <a href=\"https://css-tricks.com/better-css-shapes-using-shape-part-1-lines-and-arcs/\">series on the <code>shape()</code> function</a>, as well as <a href=\"https://frontendmasters.com/blog/creating-blob-shapes-using-clip-path-shape/\" rel=\"noopener\">his recent article about blobs</a>.</p>\r\n\r\n\r\n\r\n<p>First off, the CSS <code>shape()</code> function is used alongside the <a href=\"https://css-tricks.com/almanac/properties/c/clip-path/\"><code>clip-path</code></a> property to cut elements into any shape we want. More specifically, it uses a verbal version of SVG’s <code>path</code> syntax. The syntax has lots of commands for lots of types of lines, but when blobbing with <code>shape()</code>, we’ll define curves using the <code>curve</code> command:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.blob {\r\n  clip-path: shape(\r\n    from X0 Y0, \r\n    curve to X1 Y1 with Xc1 Yc1, \r\n    curve to X2 Y2 with Xc21 Yc21 / Xc22 Yc22\r\n    /* ... */\r\n  );\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>Let’s break down each parameter:</p>\r\n\r\n\r\n\r\n<ul class=\"wp-block-list\">\r\n<li><code>X0 Y0</code> defines the starting point of the shape.</li>\r\n\r\n\r\n\r\n<li><code>curve</code> starts the curve where <code>X1 Y1</code> is the next point of the shape, while <code>Xc1 Yc1</code> defines a control point used in Bézier curves.</li>\r\n\r\n\r\n\r\n<li>The next parameter is similar, but we used <code>Xc21 Yc21 / Xc22 Yc22</code> instead to define two control points on the Bézier curve.</li>\r\n</ul>\r\n\r\n\r\n\r\n<p>I honestly don’t understand Bézier curves and control points completely, but luckily, we don’t need them to use <code>shape()</code> and blobs! Again, <code>shape()</code> uses a verbal version of SVG’s <code>path</code> syntax, so it can draw any shape an SVG can, which means that we can translate the SVG blobs we generated earlier… and CSS-ify them. To do so, we’ll grab the <code>d</code> attribute (which defines the <code>path</code>) from our SVG and paste it into Temani’s <a href=\"https://css-generators.com/svg-to-css/\" rel=\"noopener\">SVG to <code>shape()</code> generator</a>.</p>\r\n\r\n\r\n\r\n<p>This is the exact code the tool generated for me:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.blob {\r\n  aspect-ratio: 0.925; /* Generated too! */\r\n\r\n  clip-path: shape(\r\n    from 91.52% 26.2%,\r\n    curve to 93.52% 78.28% with 101.76% 42.67%/103.09% 63.87%,\r\n    curve to 44.11% 99.97% with 83.95% 92.76%/63.47% 100.58%,\r\n    curve to 1.45% 78.42% with 24.74% 99.42%/6.42% 90.43%,\r\n    curve to 14.06% 35.46% with -3.45% 66.41%/4.93% 51.38%,\r\n    curve to 47.59% 0.33% with 23.18% 19.54%/33.13% 2.8%,\r\n    curve to 91.52% 26.2% with 62.14% -2.14%/81.28% 9.66%\r\n  );\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>As you might have guessed, it returns our beautiful blob:</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_MYwEjoX\" src=\"//codepen.io/anon/embed/preview/MYwEjoX?height=500&theme-id=1&slug-hash=MYwEjoX&default-tab=result\" height=\"500\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed MYwEjoX\" title=\"CodePen Embed MYwEjoX\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>Let’s check if it passes our requirements:</p>\r\n\r\n\r\n\r\n<ol class=\"wp-block-list\">\r\n<li>Yes, they can be made of a single element.</li>\r\n\r\n\r\n\r\n<li>Yes, they can also be created in a generator and then translated into CSS.</li>\r\n\r\n\r\n\r\n<li>Yes, we can use gradient backgrounds, but due to the nature of <code>clip-path()</code>, borders and shadows get cut out.</li>\r\n</ol>\r\n\r\n\r\n\r\n<p>Two out of three? Maybe two and a half of three? That’s a big improvement over the other approaches, even if it’s not perfect.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"conclusion\">Conclusion</h3>\r\n\r\n\r\n<p>So, alas, we failed to find what I believe is the perfect CSS approach to blobs. I am, however, amazed how something so trivial designing blobs can teach us about so many tricks and new CSS features, many of which I didn’t know myself.</p>\r\n<hr />\r\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/css-blob-recipes/\">CSS Blob Recipes</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&utm_source=css-tricks.com&utm_campaign=family_&utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
    "createdAt": "2025-06-27T13:48:41.000+00:00",
    "link": "https://css-tricks.com/css-blob-recipes/",
    "author": "",
    "site": {
      "id": "4",
      "url": "https://css-tricks.com/category/articles/feed",
      "name": "cssTrick"
    }
  },
  {
    "title": "CSS Blob Recipes",
    "content": "<p><em>Blob, Blob, Blob</em>. You hate them. You love them. Personally, as a design illiterate, I like to overuse them… a lot. And when you repeat the same process over and over again, it’s only a question of how much you can optimize it, or in this case, what’s the easiest way to create blobs in CSS? Turns out, as always, there are many approaches.</p>\r\n\r\n\r\n\r\n<span id=\"more-387089\"></span>\r\n\r\n\r\n\r\n<p>To know if our following blobs are worth using, we’ll need them to pass three tests:</p>\r\n\r\n\r\n\r\n<ol class=\"wp-block-list\">\r\n<li>They can be with just a single element (and preferably without pseudos).</li>\r\n\r\n\r\n\r\n<li>They can be easily designed (ideally through an online tool).</li>\r\n\r\n\r\n\r\n<li>We can use gradient backgrounds, borders, shadows, and other CSS effects on them.</li>\r\n</ol>\r\n\r\n\r\n\r\n<p>Without further ado, let’s <em>Blob, Blob, Blob</em> right in.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"just-generate-them-online\">Just generate them online</h3>\r\n\r\n\r\n<p>I know it’s disenchanting to click on an article about making blobs in CSS just for me to say you can generate them outside CSS. Still, it’s probably the most common way to create blobs on the web, so to be thorough, these are some online tools I’ve used before to create <strong>SVG</strong> blobs.</p>\r\n\r\n\r\n\r\n<ul class=\"wp-block-list\">\r\n<li><strong><a href=\"https://app.haikei.app/\" rel=\"noopener\">Haikei</a>.</strong> Probably the one I have used the most since, besides blobs, it can also generate lots of SVG backgrounds.</li>\r\n\r\n\r\n\r\n<li><strong><a href=\"https://www.blobmaker.app/\" rel=\"noopener\">Blobmaker</a>.</strong> A dedicated tool for making blobs. It’s apparently part of Haikei now, so you can use both.</li>\r\n\r\n\r\n\r\n<li>Lastly, almost all graphic programs let you hand-draw blobs and export them as SVGs.</li>\r\n</ul>\r\n\r\n\r\n\r\n<p>For example, this is one I generated just now. Keep it around, as it will come in handy later.</p>\r\n\r\n\r\n\r\n<figure class=\"wp-block-image size-full is-resized\"><img data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"829\" height=\"766\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-3.png?resize=829%2C766&ssl=1\" alt=\"Randomly shaped blob in bright red.\" class=\"wp-image-387090\" style=\"width:407px;height:auto\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-3.png?w=829&ssl=1 829w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-3.png?resize=300%2C277&ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-3.png?resize=768%2C710&ssl=1 768w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\" /></figure>\r\n\r\n\r\n\r\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\"><svg viewBox=\"0 0 200 200\" xmlns=\"http://www.w3.org/2000/svg\">\r\n  <path\r\n    fill=\"#FA4D56\"\r\n    d=\"M65.4,-37.9C79.2,-13.9,81,17,68.1,38C55.2,59.1,27.6,70.5,1.5,69.6C-24.6,68.8,-49.3,55.7,-56,38.2C-62.6,20.7,-51.3,-1.2,-39,-24.4C-26.7,-47.6,-13.3,-72,6.2,-75.6C25.8,-79.2,51.6,-62,65.4,-37.9Z\"\r\n    transform=\"translate(100 100)\"\r\n  />\r\n</svg></code></pre>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"using-border-radius-\">Using <code>border-radius</code></h3>\r\n\r\n\r\n<p>While counterintuitive, we can use the <code><a href=\"https://css-tricks.com/almanac/properties/b/border-radius/\">border-radius</a></code> property to create blobs. This technique isn’t new by any means; it was <a href=\"https://9elements.com/blog/css-border-radius-can-do-that/\" rel=\"noopener\">first described by Nils Binder</a> in 2018, but it is still fairly unknown. Even for those who use it, the inner workings are not entirely clear.</p>\r\n\r\n\r\n\r\n<p>To start, you may know the <code>border-radius</code> is a shorthand to each individual corner’s radius, going from the top left corner clockwise. For example, we can set each corner’s <code>border-radius</code> to get a bubbly square shape:</p>\r\n\r\n\r\n\r\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\"><div class=\"blob\"></div></code></pre>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.blob {\r\n  border-radius: 25% 50% 75% 100%;\r\n}</code></pre>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_gbpRwZz\" src=\"//codepen.io/anon/embed/preview/gbpRwZz?height=500&theme-id=1&slug-hash=gbpRwZz&default-tab=result\" height=\"500\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed gbpRwZz\" title=\"CodePen Embed gbpRwZz\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>However, what <code>border-radius</code> does — and also why it’s called “radius” — is to shape each corner following a circle of the given radius. For example, if we set the top left corner to <code>25%</code>, it will follow a circle with a radius <code>25%</code> the size of the shape.</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.blob {\r\n  border-top-left-radius: 25%;\r\n}</code></pre>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_VYLWGve\" src=\"//codepen.io/anon/embed/preview/VYLWGve?height=500&theme-id=1&slug-hash=VYLWGve&default-tab=result\" height=\"500\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed VYLWGve\" title=\"CodePen Embed VYLWGve\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>What’s less known is that each corner property is still a <em>shortcut</em> towards its horizontal and vertical radii. Normally, you set both radii to the same value, getting a circle, but you can set them individually to create an ellipse. For example, the following sets the horizontal radius to <code>25%</code> of the element’s width and the vertical to <code>50%</code> of its height:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.blob {\r\n  border-top-left-radius: 25% 50%;\r\n}</code></pre>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_WbvOYOo\" src=\"//codepen.io/anon/embed/preview/WbvOYOo?height=500&theme-id=1&slug-hash=WbvOYOo&default-tab=result\" height=\"500\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed WbvOYOo\" title=\"CodePen Embed WbvOYOo\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>We can now shape each corner like an ellipse, and it is the combination of all four ellipses that creates the illusion of a blob! Just take into consideration that to use the horizontal and vertical radii syntax through the <code>border-radius</code> property, we’ll need to separate the horizontal from the vertical radii using a forward slash (<code>/</code>).</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.blob {\r\n  border-radius:\r\n    /* horizontal */\r\n    100% 30% 60% 70% /\r\n    /* vertical */\r\n    50% 40% 70% 70%;\r\n}</code></pre>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_dPoWMym\" src=\"//codepen.io/anon/embed/preview/dPoWMym?height=500&theme-id=1&slug-hash=dPoWMym&default-tab=result\" height=\"500\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed dPoWMym\" title=\"CodePen Embed dPoWMym\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>The syntax isn’t too intuitive, so designing a blob from scratch will likely be a headache. Luckily, <a href=\"https://9elements.github.io/fancy-border-radius/\" rel=\"noopener\">Nils Binder made a tool</a> exactly for that!</p>\r\n\r\n\r\n<h4 class=\"wp-block-heading\" id=\"blobbing-blobs-together\">Blobbing blobs together</h4>\r\n\r\n\r\n<p>This hack is awesome. We aren’t supposed to use <code>border-radius</code> like that, but we still do. Admittedly, we are limited to boring blobs. Due to the nature of <code>border-radius</code>, no matter how hard we try, we will only get convex shapes.</p>\r\n\r\n\r\n\r\n<figure class=\"wp-block-image size-large\"><img data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"576\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/convex_concave_i8a0vu.webp?resize=1024%2C576\" alt=\"Concave and convex shapes\" class=\"wp-image-387123\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/convex_concave_i8a0vu.webp?resize=1024%2C576&ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/convex_concave_i8a0vu.webp?resize=300%2C169&ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/convex_concave_i8a0vu.webp?resize=768%2C432&ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/convex_concave_i8a0vu.webp?resize=1536%2C864&ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/convex_concave_i8a0vu.webp?w=1920&ssl=1 1920w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\" /></figure>\r\n\r\n\r\n\r\n<p>Just going off <code>border-radius</code>, we can try to minimize it a little by sticking more than one blob together:</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_gbpxJKd\" src=\"//codepen.io/anon/embed/preview/gbpxJKd?height=450&theme-id=1&slug-hash=gbpxJKd&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed gbpxJKd\" title=\"CodePen Embed gbpxJKd\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>However, I don’t want to spend too much time on this technique since it is too impractical to be worth it. To name a few drawbacks:</p>\r\n\r\n\r\n\r\n<ol class=\"wp-block-list\">\r\n<li>We are using more than one element or, at the very least, an extra pseudo-element. Ideally, we want to keep it to one element.</li>\r\n\r\n\r\n\r\n<li>We don’t have a tool to prototype our blobby amalgamations, so making one is a process of trial and error.</li>\r\n\r\n\r\n\r\n<li>We can’t use borders, gradients, or box shadows since they would reveal the element’s outlines.</li>\r\n</ol>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"multiple-backgrounds-and-svg-filters\">Multiple backgrounds and SVG filters</h3>\r\n\r\n\r\n<p>This one is an improvement in the Gooey Effect, <a href=\"https://css-tricks.com/gooey-effect/\">described here by Lucas Bebber</a>, although I don’t know who first came up with it. In the original effect, several elements can be morphed together like drops of liquid sticking to and flowing out of each other:</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_LELBEo\" src=\"//codepen.io/anon/embed/preview/LELBEo?height=500&theme-id=1&slug-hash=LELBEo&default-tab=result\" height=\"500\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed LELBEo\" title=\"CodePen Embed LELBEo\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>It works by first blurring shapes nearby, creating some connected shadows. Then we crank up the contrast, forcing the blur out and smoothly connecting them in the process. Take, for example, this demo by Chris Coyer (It’s from 2014, so more than 10 years ago!):</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_poXpNL\" src=\"//codepen.io/anon/embed/preview/poXpNL?height=450&theme-id=1&slug-hash=poXpNL&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed poXpNL\" title=\"CodePen Embed poXpNL\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>If you look at the code, you’ll notice Chris uses the <a href=\"https://css-tricks.com/almanac/properties/f/filter/\"><code>filter</code></a> property along the <code>blur()</code> and <code>contrast()</code> functions, which I’ve also seen in other blob demos. To be specific, it applies <code>blur()</code> on each individual circle and then <code>contrast()</code> on the parent element. So, if we have the following HTML:</p>\r\n\r\n\r\n\r\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\"><div class=\"blob\">\r\n  <div class=\"subblob\"></div>\r\n  <div class=\"subblob\"></div>\r\n  <div class=\"subblob\"></div>\r\n</div></code></pre>\r\n\r\n\r\n\r\n<p>…we would need to apply filters and background colors as such:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.blob {\r\n  filter: contrast(50);\r\n  background: white; /* Solid colors are necessary */\r\n}\r\n\r\n.subblob {\r\n  filter: blur(15px);\r\n  background: black; /* Solid colors are necessary */\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>However, there is a good reason why those demos stick to white shapes and black backgrounds (or vice versa) since things get unpredictable once colors aren’t contrast-y enough. See it for yourself in the following demo by changing the color. Just be wary: <em>shades get ugly</em>.</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_yyNomvx\" src=\"//codepen.io/anon/embed/preview/yyNomvx?height=450&theme-id=1&slug-hash=yyNomvx&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed yyNomvx\" title=\"CodePen Embed yyNomvx\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>To solve this, we will use an SVG filter instead. I don’t want to get too technical on SVG (if you want to, read Luca’s post!). In a nutshell, we can apply blurring and contrast filters using SVGs, but now, we can also pick which color channel we apply the contrast to, unlike normal <code>contrast()</code>, which modifies all colors. </p>\r\n\r\n\r\n\r\n<p>Since we want to leave color channels (<code>R</code>, <code>G</code> and <code>B</code>) untouched, we will only crank the contrast up for the alpha channel. That translates to the next SVG filter, which can be embedded in the HTML:</p>\r\n\r\n\r\n\r\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\"><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" style=\"position: absolute;\">\r\n  <defs>\r\n    <filter id=\"blob\">\r\n      <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"12\" result=\"blur\" />\r\n      <feColorMatrix in=\"blur\" mode=\"matrix\" values=\"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 18 -6\" result=\"goo\" />\r\n      <feBlend in=\"SourceGraphic\" in2=\"blob\" />\r\n    </filter>\r\n  </defs>\r\n</svg></code></pre>\r\n\r\n\r\n\r\n<p>To apply it, we will use again <code>filter</code>, but this time we’ll set it to <code>url(\"#blob\")</code>, so that it pulls the SVG from the HTML.</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.blob {\r\n  filter: url(\"#blob\");\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>And now we can even use it with gradient backgrounds!</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_MYwvNZL\" src=\"//codepen.io/anon/embed/preview/MYwvNZL?height=450&theme-id=1&slug-hash=MYwvNZL&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed MYwvNZL\" title=\"CodePen Embed MYwvNZL\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>That being said, this approach comes with two small, but important, changes to common CSS filters:</p>\r\n\r\n\r\n\r\n<ol class=\"wp-block-list\">\r\n<li>The filter is applied to the parent element, not the individual shapes.</li>\r\n\r\n\r\n\r\n<li>The parent element must be transparent (which is a huge advantage). To change the background color, we can instead change the body or other ancestors’ background, and it will work with no issues.</li>\r\n</ol>\r\n\r\n\r\n\r\n<p>What’s left is to place the <code>.subblob</code> elements together such that they make a blobby enough shape, then apply the SVG filters to morph them:</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_bNdrXZv\" src=\"//codepen.io/anon/embed/preview/bNdrXZv?height=500&theme-id=1&slug-hash=bNdrXZv&default-tab=result\" height=\"500\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed bNdrXZv\" title=\"CodePen Embed bNdrXZv\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n<h4 class=\"wp-block-heading\" id=\"making-it-one-element\">Making it one element</h4>\r\n\r\n\r\n<p>This works well, but it has a similar issue to the blob we made by morphing several <code>border-radius</code> instances: too many elements for a simple blob. Luckily, we can take advantage of the <a href=\"https://css-tricks.com/almanac/properties/b/background/\"><code>background</code></a> property to create multiple shapes and morph them together using SVG filters, all in a single element. Since we are keeping it to one element, we will go back to just one empty <code>.blob</code> div:</p>\r\n\r\n\r\n\r\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\"><div class=\"blob\"></div></code></pre>\r\n\r\n\r\n\r\n<p>To recap, the <code>background</code> shorthand can set all background properties and also set multiple backgrounds at once. Of all the properties, we only care about the <a href=\"https://css-tricks.com/almanac/properties/b/background-image/\"><code>background-image</code></a>, <a href=\"https://css-tricks.com/almanac/properties/b/background-position/\"><code>background-position</code></a> and <a href=\"https://css-tricks.com/almanac/properties/b/background-size/\"><code>background-size</code></a>.</p>\r\n\r\n\r\n\r\n<p>First, we will use <code>background-image</code> along with <code>radial-gradient()</code> to create a circle inside the element:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">body {\r\n  background: radial-gradient(farthest-side, var(--blob-color) 100%, #0000);\r\n  background-repeat: no-repeat; /* Important! */\r\n}</code></pre>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_PwqJYZQ\" src=\"//codepen.io/anon/embed/preview/PwqJYZQ?height=450&theme-id=1&slug-hash=PwqJYZQ&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed PwqJYZQ\" title=\"CodePen Embed PwqJYZQ\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>Here is what each parameter does:</p>\r\n\r\n\r\n\r\n<ul class=\"wp-block-list\">\r\n<li><strong><code>farthest-side</code>:</strong> Confines the shape to the element’s box farthest from its center. This way, it is kept as a circle.</li>\r\n\r\n\r\n\r\n<li><strong><code>var(--blob-color) 100%</code>:</strong> Fills the background shape from 0 to 100% with the same color, so it ends up as a solid color.</li>\r\n\r\n\r\n\r\n<li><strong><code>#0000</code>:</strong> After the shape is done, it makes a full stop to transparency, so the color ends.</li>\r\n</ul>\r\n\r\n\r\n\r\n<p>The next part is moving and resizing the circle using the <code>background-position</code> and <code>background-size</code> properties. Luckily, both can be set on <code>background</code> after the gradient, separated from each other by a forward slash (<code>/</code>).</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">body {\r\n  background: radial-gradient(...) 20% 30% / 30% 40%;\r\n  background-repeat: no-repeat; /* Important! */\r\n}</code></pre>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_PwqJYzR\" src=\"//codepen.io/anon/embed/preview/PwqJYzR?height=500&theme-id=1&slug-hash=PwqJYzR&default-tab=result\" height=\"500\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed PwqJYzR\" title=\"CodePen Embed PwqJYzR\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>The first pair of percentages sets the shape’s horizontal and vertical position (taking as a reference the top-left corner), while the second pair sets the shape’s width and height (taking as a reference the element’s size).</p>\r\n\r\n\r\n\r\n<p>As I mentioned, we can stack up different backgrounds together, which means we can create as many circles/ellipses as we want! For example, we can create three ellipses on the same element:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.blob {\r\n  background:\r\n    radial-gradient(farthest-side, var(--blob-color) 100%, #0000) 20% 30% / 30% 40%, \r\n    radial-gradient(farthest-side, var(--blob-color) 100%, #0000) 80% 50% / 40% 60%, \r\n    radial-gradient(farthest-side, var(--blob-color) 100%, #0000) 50% 70% / 50% 50%;\r\n  background-repeat: no-repeat;\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>What’s even better is that SVG filters don’t care whether shapes are made of elements or backgrounds, so we can also morph them together using the last <code>url(#blob)</code> filter!</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_vEOJqLQ\" src=\"//codepen.io/anon/embed/preview/vEOJqLQ?height=500&theme-id=1&slug-hash=vEOJqLQ&default-tab=result\" height=\"500\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed vEOJqLQ\" title=\"CodePen Embed vEOJqLQ\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>While this method may be a little too much for blobs, it unlocks squishing, stretching, dividing, and merging blobs <a href=\"https://css-tricks.com/gooey-effect/#aa-making-things-stick\">in seamless animations</a>.</p>\r\n\r\n\r\n\r\n<p>Again, all these tricks are awesome, but not enough for what we want! We accomplished reducing the blob to a single element, but we still can’t use gradients, borders, or shadows on them, and also, they are tedious to design and model. Then, that brings us to the ultimate blob approach…</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"using-the-new-shape-function\">Using the <code>shape()</code> function</h3>\r\n\r\n\r\n<p>Fortunately, there is a new way to make blobs that just dropped to CSS: the <code>shape()</code> function!</p>\r\n\r\n\r\n\r\n<p>I’ll explain <code>shape()</code>‘s syntax briefly, but for an in-depth explanation, you’ll want to check out both <a href=\"https://css-tricks.com/almanac/functions/s/shape/\">this explainer from the CSS-Tricks Almanac </a>as well as <a href=\"https://css-tricks.com/author/afiftemani/\">Temani Afif</a>‘s three-part <a href=\"https://css-tricks.com/better-css-shapes-using-shape-part-1-lines-and-arcs/\">series on the <code>shape()</code> function</a>, as well as <a href=\"https://frontendmasters.com/blog/creating-blob-shapes-using-clip-path-shape/\" rel=\"noopener\">his recent article about blobs</a>.</p>\r\n\r\n\r\n\r\n<p>First off, the CSS <code>shape()</code> function is used alongside the <a href=\"https://css-tricks.com/almanac/properties/c/clip-path/\"><code>clip-path</code></a> property to cut elements into any shape we want. More specifically, it uses a verbal version of SVG’s <code>path</code> syntax. The syntax has lots of commands for lots of types of lines, but when blobbing with <code>shape()</code>, we’ll define curves using the <code>curve</code> command:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.blob {\r\n  clip-path: shape(\r\n    from X0 Y0, \r\n    curve to X1 Y1 with Xc1 Yc1, \r\n    curve to X2 Y2 with Xc21 Yc21 / Xc22 Yc22\r\n    /* ... */\r\n  );\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>Let’s break down each parameter:</p>\r\n\r\n\r\n\r\n<ul class=\"wp-block-list\">\r\n<li><code>X0 Y0</code> defines the starting point of the shape.</li>\r\n\r\n\r\n\r\n<li><code>curve</code> starts the curve where <code>X1 Y1</code> is the next point of the shape, while <code>Xc1 Yc1</code> defines a control point used in Bézier curves.</li>\r\n\r\n\r\n\r\n<li>The next parameter is similar, but we used <code>Xc21 Yc21 / Xc22 Yc22</code> instead to define two control points on the Bézier curve.</li>\r\n</ul>\r\n\r\n\r\n\r\n<p>I honestly don’t understand Bézier curves and control points completely, but luckily, we don’t need them to use <code>shape()</code> and blobs! Again, <code>shape()</code> uses a verbal version of SVG’s <code>path</code> syntax, so it can draw any shape an SVG can, which means that we can translate the SVG blobs we generated earlier… and CSS-ify them. To do so, we’ll grab the <code>d</code> attribute (which defines the <code>path</code>) from our SVG and paste it into Temani’s <a href=\"https://css-generators.com/svg-to-css/\" rel=\"noopener\">SVG to <code>shape()</code> generator</a>.</p>\r\n\r\n\r\n\r\n<p>This is the exact code the tool generated for me:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.blob {\r\n  aspect-ratio: 0.925; /* Generated too! */\r\n\r\n  clip-path: shape(\r\n    from 91.52% 26.2%,\r\n    curve to 93.52% 78.28% with 101.76% 42.67%/103.09% 63.87%,\r\n    curve to 44.11% 99.97% with 83.95% 92.76%/63.47% 100.58%,\r\n    curve to 1.45% 78.42% with 24.74% 99.42%/6.42% 90.43%,\r\n    curve to 14.06% 35.46% with -3.45% 66.41%/4.93% 51.38%,\r\n    curve to 47.59% 0.33% with 23.18% 19.54%/33.13% 2.8%,\r\n    curve to 91.52% 26.2% with 62.14% -2.14%/81.28% 9.66%\r\n  );\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>As you might have guessed, it returns our beautiful blob:</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_MYwEjoX\" src=\"//codepen.io/anon/embed/preview/MYwEjoX?height=500&theme-id=1&slug-hash=MYwEjoX&default-tab=result\" height=\"500\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed MYwEjoX\" title=\"CodePen Embed MYwEjoX\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>Let’s check if it passes our requirements:</p>\r\n\r\n\r\n\r\n<ol class=\"wp-block-list\">\r\n<li>Yes, they can be made of a single element.</li>\r\n\r\n\r\n\r\n<li>Yes, they can also be created in a generator and then translated into CSS.</li>\r\n\r\n\r\n\r\n<li>Yes, we can use gradient backgrounds, but due to the nature of <code>clip-path()</code>, borders and shadows get cut out.</li>\r\n</ol>\r\n\r\n\r\n\r\n<p>Two out of three? Maybe two and a half of three? That’s a big improvement over the other approaches, even if it’s not perfect.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"conclusion\">Conclusion</h3>\r\n\r\n\r\n<p>So, alas, we failed to find what I believe is the perfect CSS approach to blobs. I am, however, amazed how something so trivial designing blobs can teach us about so many tricks and new CSS features, many of which I didn’t know myself.</p>\r\n<hr />\r\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/css-blob-recipes/\">CSS Blob Recipes</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&utm_source=css-tricks.com&utm_campaign=family_&utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
    "createdAt": "2025-06-27T13:48:41.000+00:00",
    "link": "https://css-tricks.com/css-blob-recipes/",
    "author": "",
    "site": {
      "id": "5",
      "url": "https://css-tricks.com/category/articles/feed",
      "name": "cssTrick"
    }
  },
  {
    "title": "[Korean FE Article] 타입스크립트 네이티브 프리뷰 소개",
    "content": "<div class=\"captioned-image-container\"><figure><a class=\"image-link image2 is-viewable-img\" target=\"_blank\" href=\"https://substackcdn.com/image/fetch/$s_!dA7a!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8efd9449-f3c6-4303-b7c1-fb9108dc0968_1920x1080.png\" data-component-name=\"Image2ToDOM\"><div class=\"image2-inset\"><picture><source type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/$s_!dA7a!,w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8efd9449-f3c6-4303-b7c1-fb9108dc0968_1920x1080.png 424w, https://substackcdn.com/image/fetch/$s_!dA7a!,w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8efd9449-f3c6-4303-b7c1-fb9108dc0968_1920x1080.png 848w, https://substackcdn.com/image/fetch/$s_!dA7a!,w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8efd9449-f3c6-4303-b7c1-fb9108dc0968_1920x1080.png 1272w, https://substackcdn.com/image/fetch/$s_!dA7a!,w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8efd9449-f3c6-4303-b7c1-fb9108dc0968_1920x1080.png 1456w\" sizes=\"100vw\"><img src=\"https://substackcdn.com/image/fetch/$s_!dA7a!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8efd9449-f3c6-4303-b7c1-fb9108dc0968_1920x1080.png\" width=\"1456\" height=\"819\" data-attrs=\"{\"src\":\"https://substack-post-media.s3.amazonaws.com/public/images/8efd9449-f3c6-4303-b7c1-fb9108dc0968_1920x1080.png\",\"srcNoWatermark\":null,\"fullscreen\":null,\"imageSize\":null,\"height\":819,\"width\":1456,\"resizeWidth\":null,\"bytes\":101752,\"alt\":null,\"title\":null,\"type\":\"image/png\",\"href\":null,\"belowTheFold\":false,\"topImage\":true,\"internalRedirect\":\"https://kofearticle.substack.com/i/166817177?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8efd9449-f3c6-4303-b7c1-fb9108dc0968_1920x1080.png\",\"isProcessing\":false,\"align\":null,\"offset\":false}\" class=\"sizing-normal\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/$s_!dA7a!,w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8efd9449-f3c6-4303-b7c1-fb9108dc0968_1920x1080.png 424w, https://substackcdn.com/image/fetch/$s_!dA7a!,w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8efd9449-f3c6-4303-b7c1-fb9108dc0968_1920x1080.png 848w, https://substackcdn.com/image/fetch/$s_!dA7a!,w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8efd9449-f3c6-4303-b7c1-fb9108dc0968_1920x1080.png 1272w, https://substackcdn.com/image/fetch/$s_!dA7a!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8efd9449-f3c6-4303-b7c1-fb9108dc0968_1920x1080.png 1456w\" sizes=\"100vw\" fetchpriority=\"high\"></picture><div class=\"image-link-expand\"><div class=\"pencraft pc-display-flex pc-gap-8 pc-reset\"><div class=\"pencraft pc-reset icon-container restack-image\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-refresh-cw\"><path d=\"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\"></path><path d=\"M21 3v5h-5\"></path><path d=\"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\"></path><path d=\"M8 16H3v5\"></path></svg></div><div class=\"pencraft pc-reset icon-container view-image\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-maximize2\"><polyline points=\"15 3 21 3 21 9\"></polyline><polyline points=\"9 21 3 21 3 15\"></polyline><line x1=\"21\" x2=\"14\" y1=\"3\" y2=\"10\"></line><line x1=\"3\" x2=\"10\" y1=\"21\" y2=\"14\"></line></svg></div></div></div></div></a></figure></div><blockquote><p>글 링크 : <a href=\"https://velog.io/@sehyunny/ts-native-preview\">https://velog.io/@sehyunny/ts-native-preview</a></p></blockquote><h2><strong>소개</strong></h2><p>타입스크립트 컴파일 속도가 10배 빨라진다면 어떤 변화가 일어날까요?</p><p>Microsoft에서 새롭게 공개한 <strong>타입스크립트 네이티브 프리뷰</strong>는 타입스크립트를 기존 JS 기반에서 Go 기반 네이티브 코드로 포팅하여, 대규모 프로젝트에서의 빌드 속도를 획기적으로 향상시킵니다. 이제 JSX, 자바스크립트(JSDoc)에 대한 타입 검사가 지원되며, VS Code 확장 프로그램도 함께 출시되어 직접 경험해볼 수 있습니다. 일부 기능은 아직 개발 중이지만, 매일 업데이트되며 빠르게 발전 중입니다.</p><p>차세대 타입스크립트가 어떤 방향으로 진화하고 있는지 궁금하다면, 이 글을 읽어보길 추천해 드립니다 🤓</p><h2><strong>목차</strong></h2><ul><li><p>업데이트, 릴리즈 주기 및 로드맵</p></li><li><p>새로운 기능은 무엇인가요?</p><ul><li><p>더욱 완전해진 타입 검사 지원</p></li><li><p>JSX 검사 지원</p></li><li><p>자바스크립트 검사</p></li><li><p>편집기 지원 및 LSP 진행 상황</p></li><li><p>API 진행 상황</p></li></ul></li><li><p>알려진 차이점 및 주목할 만한 차이점</p></li><li><p>다음 단계는 무엇인가요?</p></li></ul>",
    "createdAt": "2025-06-27T00:30:20.000+00:00",
    "link": "https://kofearticle.substack.com/p/korean-fe-article-7d0",
    "author": "",
    "site": {
      "id": "3",
      "url": "https://kofearticle.substack.com/feed",
      "name": "kofearticle"
    }
  },
  {
    "title": "[Korean FE Article] 소프트웨어 아키텍처 시각화를 위한 C4 모델",
    "content": "<div class=\"captioned-image-container\"><figure><a class=\"image-link image2 is-viewable-img\" target=\"_blank\" href=\"https://substackcdn.com/image/fetch/$s_!LUZy!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2fbf6986-00bc-4d97-bbf8-d5ac70f5cabd_1920x1080.png\" data-component-name=\"Image2ToDOM\"><div class=\"image2-inset\"><picture><source type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/$s_!LUZy!,w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2fbf6986-00bc-4d97-bbf8-d5ac70f5cabd_1920x1080.png 424w, https://substackcdn.com/image/fetch/$s_!LUZy!,w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2fbf6986-00bc-4d97-bbf8-d5ac70f5cabd_1920x1080.png 848w, https://substackcdn.com/image/fetch/$s_!LUZy!,w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2fbf6986-00bc-4d97-bbf8-d5ac70f5cabd_1920x1080.png 1272w, https://substackcdn.com/image/fetch/$s_!LUZy!,w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2fbf6986-00bc-4d97-bbf8-d5ac70f5cabd_1920x1080.png 1456w\" sizes=\"100vw\"><img src=\"https://substackcdn.com/image/fetch/$s_!LUZy!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2fbf6986-00bc-4d97-bbf8-d5ac70f5cabd_1920x1080.png\" width=\"1456\" height=\"819\" data-attrs=\"{\"src\":\"https://substack-post-media.s3.amazonaws.com/public/images/2fbf6986-00bc-4d97-bbf8-d5ac70f5cabd_1920x1080.png\",\"srcNoWatermark\":null,\"fullscreen\":null,\"imageSize\":null,\"height\":819,\"width\":1456,\"resizeWidth\":null,\"bytes\":null,\"alt\":\"소프트웨어 아키텍처 시각화를 위한 C4 모델 개요\",\"title\":null,\"type\":null,\"href\":null,\"belowTheFold\":false,\"topImage\":true,\"internalRedirect\":null,\"isProcessing\":false,\"align\":null,\"offset\":false}\" class=\"sizing-normal\" alt=\"소프트웨어 아키텍처 시각화를 위한 C4 모델 개요\" title=\"소프트웨어 아키텍처 시각화를 위한 C4 모델 개요\" srcset=\"https://substackcdn.com/image/fetch/$s_!LUZy!,w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2fbf6986-00bc-4d97-bbf8-d5ac70f5cabd_1920x1080.png 424w, https://substackcdn.com/image/fetch/$s_!LUZy!,w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2fbf6986-00bc-4d97-bbf8-d5ac70f5cabd_1920x1080.png 848w, https://substackcdn.com/image/fetch/$s_!LUZy!,w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2fbf6986-00bc-4d97-bbf8-d5ac70f5cabd_1920x1080.png 1272w, https://substackcdn.com/image/fetch/$s_!LUZy!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2fbf6986-00bc-4d97-bbf8-d5ac70f5cabd_1920x1080.png 1456w\" sizes=\"100vw\" fetchpriority=\"high\"></picture><div class=\"image-link-expand\"><div class=\"pencraft pc-display-flex pc-gap-8 pc-reset\"><div class=\"pencraft pc-reset icon-container restack-image\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-refresh-cw\"><path d=\"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\"></path><path d=\"M21 3v5h-5\"></path><path d=\"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\"></path><path d=\"M8 16H3v5\"></path></svg></div><div class=\"pencraft pc-reset icon-container view-image\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-maximize2\"><polyline points=\"15 3 21 3 21 9\"></polyline><polyline points=\"9 21 3 21 3 15\"></polyline><line x1=\"21\" x2=\"14\" y1=\"3\" y2=\"10\"></line><line x1=\"3\" x2=\"10\" y1=\"21\" y2=\"14\"></line></svg></div></div></div></div></a></figure></div><blockquote><p>글 링크: <a href=\"https://korean-fe-article.github.io/c4model-kr/\">https://korean-fe-article.github.io/c4model-kr/</a></p></blockquote><h2><strong>소개</strong></h2><p>이전에 소개 드린 적 있는 C4 모델의 공식 사이트 번역글입니다. C4 모델은 <strong>계층적 추상화</strong>를 사용해 각 추상화 수준에 해당하는 <strong>계층적 다이어그램</strong>을 제공하여 시각적인 이해를 돕습니다. 또한, C4 모델은 <strong>특정 표기법이나 도구에 얽매이지 않는</strong> 유연성을 지녀 소프트웨어 개발팀 내외부의 <strong>원활한 의사소통</strong>과 효율적인 온보딩, 그리고 아키텍처 검토 및 위험 식별에 기여하는 <strong>다양한 이점</strong>을 제공한다고 하는데요. 여러 구체적인 예시를 살펴보시고 적절한 상황에 사용해보신다면 좋을 것 같습니다.</p><p>Korean FE Article에서 전체를 번역해 제공하는 첫 번째 사이트인데요. 앞으로도 비슷한 작업을 꾸준히 진행할 예정이니, 함께 한글로 읽고 싶은 사이트가 있으시면 언제든지 편하게 이슈 남겨주시면 감사하겠습니다.</p><h2><strong>목차</strong></h2><ul><li><p>홈</p></li><li><p>개요</p></li><li><p>추상화</p></li><li><p>다이어그램</p></li><li><p>도구 선택(Tooling)</p></li><li><p>자주 묻는 질문</p></li><li><p>더 많은 정보</p></li><li><p>라이센스</p></li><li><p>연수/워크숍</p></li></ul>",
    "createdAt": "2025-06-25T23:30:26.000+00:00",
    "link": "https://kofearticle.substack.com/p/korean-fe-article-c4",
    "author": "",
    "site": {
      "id": "3",
      "url": "https://kofearticle.substack.com/feed",
      "name": "kofearticle"
    }
  },
  {
    "title": "Poking at the CSS if() Function a Little More: Conditional Color Theming",
    "content": "<p><a href=\"https://developer.chrome.com/release-notes/137\" rel=\"noopener\">Chrome 137</a> shipped the <a href=\"https://css-tricks.com/if-css-gets-inline-conditionals/\"><code>if()</code> CSS function</a>, so it’s totally possible we’ll see other browsers implement it, though it’s tough to know exactly when. Whatever the case, <code>if()</code> enables us to use values conditionally, which we can already do with queries and other functions (e.g., media queries and the <a href=\"https://css-tricks.com/almanac/functions/l/light-dark/\"><code>light-dark()</code></a> function), so I’m sure you’re wondering: What exactly does <code>if()</code> do?</p>\r\n\r\n\r\n\r\n<p><a href=\"https://css-tricks.com/lightly-poking-at-the-css-if-function-in-chrome-137/\">Sunkanmi gave us a nice overview of the function yesterday</a>, poking at the syntax at a high level. I’d like to poke at it a little harder in this article, getting into some possible real-world usage.</p>\r\n\r\n\r\n\r\n<span id=\"more-387215\"></span>\r\n\r\n\r\n\r\n<p>To recap, <code>if()</code> conditionally assigns a value to a property based on the value of a CSS variable. For example, we could assign different values to the <a href=\"https://css-tricks.com/almanac/properties/c/color/\"><code>color</code></a> and <a href=\"https://css-tricks.com/almanac/properties/b/background/\"><code>background</code></a> properties based on the value of <code>--theme</code>:</p>\r\n\r\n\r\n\r\n<ul class=\"wp-block-list\">\r\n<li><code>--theme</code>: <code>\"Shamrock\"</code>\r\n<ul class=\"wp-block-list\">\r\n<li><code>color</code>: <code>‌hsl(146 50% 3%)</code></li>\r\n\r\n\r\n\r\n<li><code>background</code>: <code>hsl(146 50% 40%)</code></li>\r\n</ul>\r\n</li>\r\n\r\n\r\n\r\n<li><code>--theme</code>: Anything else\r\n<ul class=\"wp-block-list\">\r\n<li><code>color</code>: <code>hsl(43 74% 3%)</code></li>\r\n\r\n\r\n\r\n<li><code>background</code>: <code>hsl(43 74% 64%)</code></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">:root {\r\n  /* Change to fall back to the ‘else’ values */\r\n  --theme: \"Shamrock\";\r\n\r\n  body {\r\n    color: if(style(--theme: \"Shamrock\"): hsl(146 50% 3%); else: hsl(43 74% 3%));\r\n    background: if(style(--theme: \"Shamrock\"): hsl(146 50% 40%); else: hsl(43 74% 64%));\r\n  }\r\n}</code></pre>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_ByNzRBZ\" src=\"//codepen.io/anon/embed/preview/ByNzRBZ?height=450&theme-id=1&slug-hash=ByNzRBZ&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed ByNzRBZ\" title=\"CodePen Embed ByNzRBZ\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>I don’t love the syntax (too many colons, brackets, and so on), but we can format it like this (which I think is a bit clearer):</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">color: if(\r\n  style(--theme: \"Shamrock\"): hsl(146 50% 3%);\r\n  else: hsl(43 74% 3%)\r\n);</code></pre>\r\n\r\n\r\n\r\n<p>We should be able to do a crazy number of things with <code>if()</code>, and I hope that becomes the case eventually, but I did some testing and learned that the syntax above is the only one that works. We can’t base the condition on the value of an ordinary CSS property (instead of a custom property), HTML attribute (using <a href=\"https://css-tricks.com/almanac/functions/a/attr/\"><code>attr()</code></a>), or any other value. For now, at least, the condition must be based on the value of a custom property (CSS variable).</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"exploring-what-we-can-do-with-if-\">Exploring what we can do with <code>if()</code></h3>\r\n\r\n\r\n<p>Judging from that first example, it’s clear that we can use <code>if()</code> for theming (and design systems overall). While we could utilize the <code>light-dark()</code> function for this, what if the themes aren’t strictly light and dark, or what if we want to have more than two themes or light and dark modes for each theme? Well, that’s what <code>if()</code> can be used for.</p>\r\n\r\n\r\n\r\n<p>First, let’s create more themes/more conditions:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">:root {\r\n  /* Shamrock | Saffron | Amethyst */\r\n  --theme: \"Saffron\"; /* ...I choose you! */\r\n\r\n  body {\r\n    color: if(\r\n      style(--theme: \"Shamrock\"): hsl(146 50% 3%);\r\n      style(--theme: \"Saffron\"): hsl(43 74% 3%);\r\n      style(--theme: \"Amethyst\"): hsl(282 47% 3%)\r\n    );\r\n    background: if(\r\n      style(--theme: \"Shamrock\"): hsl(146 50% 40%);\r\n      style(--theme: \"Saffron\"): hsl(43 74% 64%);\r\n      style(--theme: \"Amethyst\"): hsl(282 47% 56%)\r\n    );\r\n    transition: 300ms;\r\n  }\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>Pretty simple really, but there are a few easy-to-miss things. Firstly, there’s no “else condition” this time, which means that if the theme isn’t <code>Shamrock</code>, <code>Saffron</code>, or <code>Amethyst</code>, the default browser styles are used. Otherwise, the <code>if()</code> function <em>resolves to the value of the first true statement</em>, which is the <code>Saffron</code> theme in this case. Secondly, transitions work right out of the box; in the demo below, I’ve added a user interface for toggling the <code>--theme</code>, and for the transition, <em>literally</em> just <code>transition: 300ms</code> alongside the <code>if()</code> functions:</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_WbvpdMB\" src=\"//codepen.io/anon/embed/preview/WbvpdMB?height=450&theme-id=1&slug-hash=WbvpdMB&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed WbvpdMB\" title=\"CodePen Embed WbvpdMB\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p class=\"is-style-explanation\"><strong>Note:</strong> if theme-swapping is user-controlled, such as selecting an option, you don’t actually need <code>if()</code> at all. You can just use the logic that I’ve used at the beginning of the demo (<code>:root:has(#shamrock:checked) { /* Styles */ }</code>). Amit Sheen has an <a href=\"https://www.smashingmagazine.com/2024/05/combining-css-has-html-select-conditional-styling/\" rel=\"noopener\">excellent demonstration over at Smashing Magazine</a>.</p>\r\n\r\n\r\n\r\n<p>To make the code more maintainable though, we can slide the colors into CSS variables as well, then use them in the <code>if()</code> functions, <em>then</em> slide the <code>if()</code> functions themselves into CSS variables:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* Setup */\r\n:root {\r\n  /* Shamrock | Saffron | Amethyst */\r\n  --theme: \"Shamrock\"; /* ...I choose you! */\r\n\r\n  /* Base colors */\r\n  --shamrock: hsl(146 50% 40%);\r\n  --saffron: hsl(43 74% 64%);\r\n  --amethyst: hsl(282 47% 56%);\r\n\r\n  /* Base colors, but at 3% lightness */\r\n  --shamrock-complementary: hsl(from var(--shamrock) h s 3%);\r\n  --saffron-complementary: hsl(from var(--saffron) h s 3%);\r\n  --amethyst-complementary: hsl(from var(--amethyst) h s 3%);\r\n\r\n  --background: if(\r\n    style(--theme: \"Shamrock\"): var(--shamrock);\r\n    style(--theme: \"Saffron\"): var(--saffron);\r\n    style(--theme: \"Amethyst\"): var(--amethyst)\r\n  );\r\n\r\n  --color: if(\r\n    style(--theme: \"Shamrock\"): var(--shamrock-complementary);\r\n    style(--theme: \"Saffron\"): var(--saffron-complementary);\r\n    style(--theme: \"Amethyst\"): var(--amethyst-complementary)\r\n  );\r\n\r\n  /* Usage */\r\n  body {\r\n    /* One variable, all ifs! */\r\n    background: var(--background);\r\n    color: var(--color);\r\n    accent-color: var(--color);\r\n\r\n    /* Can’t forget this! */\r\n    transition: 300ms;\r\n  }\r\n}</code></pre>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_ogXemww\" src=\"//codepen.io/anon/embed/preview/ogXemww?height=450&theme-id=1&slug-hash=ogXemww&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed ogXemww\" title=\"CodePen Embed ogXemww\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>As well as using CSS variables within the <code>if()</code> function, we can also nest other functions. In the example below, I’ve thrown <code>light-dark()</code> in there, which basically inverts the colors for dark mode:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">--background: if(\r\n  style(--theme: \"Shamrock\"): light-dark(var(--shamrock), var(--shamrock-complementary));\r\n  style(--theme: \"Saffron\"): light-dark(var(--saffron), var(--saffron-complementary));\r\n  style(--theme: \"Amethyst\"): light-dark(var(--amethyst), var(--amethyst-complementary))\r\n);</code></pre>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_MYwvNYQ\" src=\"//codepen.io/anon/embed/preview/MYwvNYQ?height=450&theme-id=1&slug-hash=MYwvNYQ&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed MYwvNYQ\" title=\"CodePen Embed MYwvNYQ\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"-if-vs-container-style-queries\"><code>if()</code> vs. Container style queries</h3>\r\n\r\n\r\n<p>If you haven’t used <a href=\"https://css-tricks.com/css-container-queries/#aa-container-style-queries\">container style queries</a> before, they basically check if a container has a certain CSS variable (much like the <code>if()</code> function). Here’s the exact same example/demo but with container style queries instead of the <code>if()</code> function:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">:root {\r\n  /* Shamrock | Saffron | Amethyst */\r\n  --theme: \"Shamrock\"; /* ...I choose you! */\r\n\r\n  --shamrock: hsl(146 50% 40%);\r\n  --saffron: hsl(43 74% 64%);\r\n  --amethyst: hsl(282 47% 56%);\r\n\r\n  --shamrock-complementary: hsl(from var(--shamrock) h s 3%);\r\n  --saffron-complementary: hsl(from var(--saffron) h s 3%);\r\n  --amethyst-complementary: hsl(from var(--amethyst) h s 3%);\r\n\r\n  body {\r\n    /* Container has chosen Shamrock! */\r\n    @container style(--theme: \"Shamrock\") {\r\n      --background: light-dark(var(--shamrock), var(--shamrock-complementary));\r\n      --color: light-dark(var(--shamrock-complementary), var(--shamrock));\r\n    }\r\n\r\n    @container style(--theme: \"Saffron\") {\r\n      --background: light-dark(var(--saffron), var(--saffron-complementary));\r\n      --color: light-dark(var(--saffron-complementary), var(--saffron));\r\n    }\r\n\r\n    @container style(--theme: \"Amethyst\") {\r\n      --background: light-dark(var(--amethyst), var(--amethyst-complementary));\r\n      --color: light-dark(var(--amethyst-complementary), var(--amethyst));\r\n    }\r\n\r\n    background: var(--background);\r\n    color: var(--color);\r\n    accent-color: var(--color);\r\n    transition: 300ms;\r\n  }\r\n}</code></pre>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_GgJOGBO\" src=\"//codepen.io/anon/embed/preview/GgJOGBO?height=450&theme-id=1&slug-hash=GgJOGBO&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed GgJOGBO\" title=\"CodePen Embed GgJOGBO\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>As you can see, where <code>if()</code> facilitates conditional values, container style queries facilitate conditional properties <em>and</em> values. Other than that, it really is just a different syntax.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"additional-things-you-can-do-with-if-but-might-not-realize-\">Additional things you can do with <code>if()</code> (but might not realize)</h3>\r\n\r\n\r\n<p>Check if a CSS variable exists:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* Hide icons if variable isn’t set */\r\n.icon {\r\n  display: if(\r\n    style(--icon-family): inline-block;\r\n    else: none\r\n  );\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>Create more-complex conditional statements:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">h1 {\r\n  font-size: if(\r\n    style(--largerHeadings: true): xxx-large;\r\n    style(--theme: \"themeWithLargerHeadings\"): xxx-large\r\n  );\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>Check if two CSS variables match:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* If #s2 has the same background as #s1, add a border */\r\n#s2 {\r\n  border-top: if(\r\n    style(--s2-background: var(--s1-background)): thin solid red\r\n  );\r\n}</code></pre>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"-if-and-calc-when-the-math-isn-t-mathing\"><code>if()</code> and <code>calc()</code>: When the math isn’t mathing</h3>\r\n\r\n\r\n<p>This won’t work (maybe someone can help me pinpoint why):</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">div {\r\n  /* 3/3 = 1 */\r\n  --calc: calc(3/3);\r\n  /* Blue, because if() won’t calculate --calc */\r\n  background: if(style(--calc: 1): red; else: blue);\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>To make <code>if()</code> calculate <code>--calc</code>, we’ll need to register the CSS variable using <code><a href=\"https://css-tricks.com/almanac/rules/p/property/\">@property</a></code> first, like this:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@property --calc {\r\n  syntax: \"<number>\";\r\n  initial-value: 0;\r\n  inherits: false;\r\n}</code></pre>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"closing-thoughts\">Closing thoughts</h3>\r\n\r\n\r\n<p>Although I’m not keen on the syntax and how unreadable it can sometimes look (especially if it’s formatted on one line), I’m mega excited to see how <code>if()</code> evolves. I’d love to be able to use it with ordinary properties (e.g., <code>color: if(style(background: white): black; style(background: black): white);</code>) to avoid having to set CSS variables where possible.</p>\r\n\r\n\r\n\r\n<p>It’d also be awesome if <code>calc()</code> calculations could be calculated on the fly without having to register the variable.</p>\r\n\r\n\r\n\r\n<p>That being said, I’m still super happy with what <code>if()</code> does currently, and can’t wait to build even simpler design systems.</p>\r\n<hr />\r\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/poking-at-the-css-if-function-a-little-more-conditional-color-theming/\">Poking at the CSS if() Function a Little More: Conditional Color Theming</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&utm_source=css-tricks.com&utm_campaign=family_&utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
    "createdAt": "2025-06-25T14:33:45.000+00:00",
    "link": "https://css-tricks.com/poking-at-the-css-if-function-a-little-more-conditional-color-theming/",
    "author": "",
    "site": {
      "id": "4",
      "url": "https://css-tricks.com/category/articles/feed",
      "name": "cssTrick"
    }
  },
  {
    "title": "Poking at the CSS if() Function a Little More: Conditional Color Theming",
    "content": "<p><a href=\"https://developer.chrome.com/release-notes/137\" rel=\"noopener\">Chrome 137</a> shipped the <a href=\"https://css-tricks.com/if-css-gets-inline-conditionals/\"><code>if()</code> CSS function</a>, so it’s totally possible we’ll see other browsers implement it, though it’s tough to know exactly when. Whatever the case, <code>if()</code> enables us to use values conditionally, which we can already do with queries and other functions (e.g., media queries and the <a href=\"https://css-tricks.com/almanac/functions/l/light-dark/\"><code>light-dark()</code></a> function), so I’m sure you’re wondering: What exactly does <code>if()</code> do?</p>\r\n\r\n\r\n\r\n<p><a href=\"https://css-tricks.com/lightly-poking-at-the-css-if-function-in-chrome-137/\">Sunkanmi gave us a nice overview of the function yesterday</a>, poking at the syntax at a high level. I’d like to poke at it a little harder in this article, getting into some possible real-world usage.</p>\r\n\r\n\r\n\r\n<span id=\"more-387215\"></span>\r\n\r\n\r\n\r\n<p>To recap, <code>if()</code> conditionally assigns a value to a property based on the value of a CSS variable. For example, we could assign different values to the <a href=\"https://css-tricks.com/almanac/properties/c/color/\"><code>color</code></a> and <a href=\"https://css-tricks.com/almanac/properties/b/background/\"><code>background</code></a> properties based on the value of <code>--theme</code>:</p>\r\n\r\n\r\n\r\n<ul class=\"wp-block-list\">\r\n<li><code>--theme</code>: <code>\"Shamrock\"</code>\r\n<ul class=\"wp-block-list\">\r\n<li><code>color</code>: <code>‌hsl(146 50% 3%)</code></li>\r\n\r\n\r\n\r\n<li><code>background</code>: <code>hsl(146 50% 40%)</code></li>\r\n</ul>\r\n</li>\r\n\r\n\r\n\r\n<li><code>--theme</code>: Anything else\r\n<ul class=\"wp-block-list\">\r\n<li><code>color</code>: <code>hsl(43 74% 3%)</code></li>\r\n\r\n\r\n\r\n<li><code>background</code>: <code>hsl(43 74% 64%)</code></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">:root {\r\n  /* Change to fall back to the ‘else’ values */\r\n  --theme: \"Shamrock\";\r\n\r\n  body {\r\n    color: if(style(--theme: \"Shamrock\"): hsl(146 50% 3%); else: hsl(43 74% 3%));\r\n    background: if(style(--theme: \"Shamrock\"): hsl(146 50% 40%); else: hsl(43 74% 64%));\r\n  }\r\n}</code></pre>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_ByNzRBZ\" src=\"//codepen.io/anon/embed/preview/ByNzRBZ?height=450&theme-id=1&slug-hash=ByNzRBZ&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed ByNzRBZ\" title=\"CodePen Embed ByNzRBZ\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>I don’t love the syntax (too many colons, brackets, and so on), but we can format it like this (which I think is a bit clearer):</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">color: if(\r\n  style(--theme: \"Shamrock\"): hsl(146 50% 3%);\r\n  else: hsl(43 74% 3%)\r\n);</code></pre>\r\n\r\n\r\n\r\n<p>We should be able to do a crazy number of things with <code>if()</code>, and I hope that becomes the case eventually, but I did some testing and learned that the syntax above is the only one that works. We can’t base the condition on the value of an ordinary CSS property (instead of a custom property), HTML attribute (using <a href=\"https://css-tricks.com/almanac/functions/a/attr/\"><code>attr()</code></a>), or any other value. For now, at least, the condition must be based on the value of a custom property (CSS variable).</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"exploring-what-we-can-do-with-if-\">Exploring what we can do with <code>if()</code></h3>\r\n\r\n\r\n<p>Judging from that first example, it’s clear that we can use <code>if()</code> for theming (and design systems overall). While we could utilize the <code>light-dark()</code> function for this, what if the themes aren’t strictly light and dark, or what if we want to have more than two themes or light and dark modes for each theme? Well, that’s what <code>if()</code> can be used for.</p>\r\n\r\n\r\n\r\n<p>First, let’s create more themes/more conditions:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">:root {\r\n  /* Shamrock | Saffron | Amethyst */\r\n  --theme: \"Saffron\"; /* ...I choose you! */\r\n\r\n  body {\r\n    color: if(\r\n      style(--theme: \"Shamrock\"): hsl(146 50% 3%);\r\n      style(--theme: \"Saffron\"): hsl(43 74% 3%);\r\n      style(--theme: \"Amethyst\"): hsl(282 47% 3%)\r\n    );\r\n    background: if(\r\n      style(--theme: \"Shamrock\"): hsl(146 50% 40%);\r\n      style(--theme: \"Saffron\"): hsl(43 74% 64%);\r\n      style(--theme: \"Amethyst\"): hsl(282 47% 56%)\r\n    );\r\n    transition: 300ms;\r\n  }\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>Pretty simple really, but there are a few easy-to-miss things. Firstly, there’s no “else condition” this time, which means that if the theme isn’t <code>Shamrock</code>, <code>Saffron</code>, or <code>Amethyst</code>, the default browser styles are used. Otherwise, the <code>if()</code> function <em>resolves to the value of the first true statement</em>, which is the <code>Saffron</code> theme in this case. Secondly, transitions work right out of the box; in the demo below, I’ve added a user interface for toggling the <code>--theme</code>, and for the transition, <em>literally</em> just <code>transition: 300ms</code> alongside the <code>if()</code> functions:</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_WbvpdMB\" src=\"//codepen.io/anon/embed/preview/WbvpdMB?height=450&theme-id=1&slug-hash=WbvpdMB&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed WbvpdMB\" title=\"CodePen Embed WbvpdMB\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p class=\"is-style-explanation\"><strong>Note:</strong> if theme-swapping is user-controlled, such as selecting an option, you don’t actually need <code>if()</code> at all. You can just use the logic that I’ve used at the beginning of the demo (<code>:root:has(#shamrock:checked) { /* Styles */ }</code>). Amit Sheen has an <a href=\"https://www.smashingmagazine.com/2024/05/combining-css-has-html-select-conditional-styling/\" rel=\"noopener\">excellent demonstration over at Smashing Magazine</a>.</p>\r\n\r\n\r\n\r\n<p>To make the code more maintainable though, we can slide the colors into CSS variables as well, then use them in the <code>if()</code> functions, <em>then</em> slide the <code>if()</code> functions themselves into CSS variables:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* Setup */\r\n:root {\r\n  /* Shamrock | Saffron | Amethyst */\r\n  --theme: \"Shamrock\"; /* ...I choose you! */\r\n\r\n  /* Base colors */\r\n  --shamrock: hsl(146 50% 40%);\r\n  --saffron: hsl(43 74% 64%);\r\n  --amethyst: hsl(282 47% 56%);\r\n\r\n  /* Base colors, but at 3% lightness */\r\n  --shamrock-complementary: hsl(from var(--shamrock) h s 3%);\r\n  --saffron-complementary: hsl(from var(--saffron) h s 3%);\r\n  --amethyst-complementary: hsl(from var(--amethyst) h s 3%);\r\n\r\n  --background: if(\r\n    style(--theme: \"Shamrock\"): var(--shamrock);\r\n    style(--theme: \"Saffron\"): var(--saffron);\r\n    style(--theme: \"Amethyst\"): var(--amethyst)\r\n  );\r\n\r\n  --color: if(\r\n    style(--theme: \"Shamrock\"): var(--shamrock-complementary);\r\n    style(--theme: \"Saffron\"): var(--saffron-complementary);\r\n    style(--theme: \"Amethyst\"): var(--amethyst-complementary)\r\n  );\r\n\r\n  /* Usage */\r\n  body {\r\n    /* One variable, all ifs! */\r\n    background: var(--background);\r\n    color: var(--color);\r\n    accent-color: var(--color);\r\n\r\n    /* Can’t forget this! */\r\n    transition: 300ms;\r\n  }\r\n}</code></pre>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_ogXemww\" src=\"//codepen.io/anon/embed/preview/ogXemww?height=450&theme-id=1&slug-hash=ogXemww&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed ogXemww\" title=\"CodePen Embed ogXemww\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>As well as using CSS variables within the <code>if()</code> function, we can also nest other functions. In the example below, I’ve thrown <code>light-dark()</code> in there, which basically inverts the colors for dark mode:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">--background: if(\r\n  style(--theme: \"Shamrock\"): light-dark(var(--shamrock), var(--shamrock-complementary));\r\n  style(--theme: \"Saffron\"): light-dark(var(--saffron), var(--saffron-complementary));\r\n  style(--theme: \"Amethyst\"): light-dark(var(--amethyst), var(--amethyst-complementary))\r\n);</code></pre>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_MYwvNYQ\" src=\"//codepen.io/anon/embed/preview/MYwvNYQ?height=450&theme-id=1&slug-hash=MYwvNYQ&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed MYwvNYQ\" title=\"CodePen Embed MYwvNYQ\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"-if-vs-container-style-queries\"><code>if()</code> vs. Container style queries</h3>\r\n\r\n\r\n<p>If you haven’t used <a href=\"https://css-tricks.com/css-container-queries/#aa-container-style-queries\">container style queries</a> before, they basically check if a container has a certain CSS variable (much like the <code>if()</code> function). Here’s the exact same example/demo but with container style queries instead of the <code>if()</code> function:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">:root {\r\n  /* Shamrock | Saffron | Amethyst */\r\n  --theme: \"Shamrock\"; /* ...I choose you! */\r\n\r\n  --shamrock: hsl(146 50% 40%);\r\n  --saffron: hsl(43 74% 64%);\r\n  --amethyst: hsl(282 47% 56%);\r\n\r\n  --shamrock-complementary: hsl(from var(--shamrock) h s 3%);\r\n  --saffron-complementary: hsl(from var(--saffron) h s 3%);\r\n  --amethyst-complementary: hsl(from var(--amethyst) h s 3%);\r\n\r\n  body {\r\n    /* Container has chosen Shamrock! */\r\n    @container style(--theme: \"Shamrock\") {\r\n      --background: light-dark(var(--shamrock), var(--shamrock-complementary));\r\n      --color: light-dark(var(--shamrock-complementary), var(--shamrock));\r\n    }\r\n\r\n    @container style(--theme: \"Saffron\") {\r\n      --background: light-dark(var(--saffron), var(--saffron-complementary));\r\n      --color: light-dark(var(--saffron-complementary), var(--saffron));\r\n    }\r\n\r\n    @container style(--theme: \"Amethyst\") {\r\n      --background: light-dark(var(--amethyst), var(--amethyst-complementary));\r\n      --color: light-dark(var(--amethyst-complementary), var(--amethyst));\r\n    }\r\n\r\n    background: var(--background);\r\n    color: var(--color);\r\n    accent-color: var(--color);\r\n    transition: 300ms;\r\n  }\r\n}</code></pre>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_GgJOGBO\" src=\"//codepen.io/anon/embed/preview/GgJOGBO?height=450&theme-id=1&slug-hash=GgJOGBO&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed GgJOGBO\" title=\"CodePen Embed GgJOGBO\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>As you can see, where <code>if()</code> facilitates conditional values, container style queries facilitate conditional properties <em>and</em> values. Other than that, it really is just a different syntax.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"additional-things-you-can-do-with-if-but-might-not-realize-\">Additional things you can do with <code>if()</code> (but might not realize)</h3>\r\n\r\n\r\n<p>Check if a CSS variable exists:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* Hide icons if variable isn’t set */\r\n.icon {\r\n  display: if(\r\n    style(--icon-family): inline-block;\r\n    else: none\r\n  );\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>Create more-complex conditional statements:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">h1 {\r\n  font-size: if(\r\n    style(--largerHeadings: true): xxx-large;\r\n    style(--theme: \"themeWithLargerHeadings\"): xxx-large\r\n  );\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>Check if two CSS variables match:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* If #s2 has the same background as #s1, add a border */\r\n#s2 {\r\n  border-top: if(\r\n    style(--s2-background: var(--s1-background)): thin solid red\r\n  );\r\n}</code></pre>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"-if-and-calc-when-the-math-isn-t-mathing\"><code>if()</code> and <code>calc()</code>: When the math isn’t mathing</h3>\r\n\r\n\r\n<p>This won’t work (maybe someone can help me pinpoint why):</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">div {\r\n  /* 3/3 = 1 */\r\n  --calc: calc(3/3);\r\n  /* Blue, because if() won’t calculate --calc */\r\n  background: if(style(--calc: 1): red; else: blue);\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>To make <code>if()</code> calculate <code>--calc</code>, we’ll need to register the CSS variable using <code><a href=\"https://css-tricks.com/almanac/rules/p/property/\">@property</a></code> first, like this:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@property --calc {\r\n  syntax: \"<number>\";\r\n  initial-value: 0;\r\n  inherits: false;\r\n}</code></pre>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"closing-thoughts\">Closing thoughts</h3>\r\n\r\n\r\n<p>Although I’m not keen on the syntax and how unreadable it can sometimes look (especially if it’s formatted on one line), I’m mega excited to see how <code>if()</code> evolves. I’d love to be able to use it with ordinary properties (e.g., <code>color: if(style(background: white): black; style(background: black): white);</code>) to avoid having to set CSS variables where possible.</p>\r\n\r\n\r\n\r\n<p>It’d also be awesome if <code>calc()</code> calculations could be calculated on the fly without having to register the variable.</p>\r\n\r\n\r\n\r\n<p>That being said, I’m still super happy with what <code>if()</code> does currently, and can’t wait to build even simpler design systems.</p>\r\n<hr />\r\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/poking-at-the-css-if-function-a-little-more-conditional-color-theming/\">Poking at the CSS if() Function a Little More: Conditional Color Theming</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&utm_source=css-tricks.com&utm_campaign=family_&utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
    "createdAt": "2025-06-25T14:33:45.000+00:00",
    "link": "https://css-tricks.com/poking-at-the-css-if-function-a-little-more-conditional-color-theming/",
    "author": "",
    "site": {
      "id": "5",
      "url": "https://css-tricks.com/category/articles/feed",
      "name": "cssTrick"
    }
  },
  {
    "title": "Lightly Poking at the CSS if() Function in Chrome 137",
    "content": "<p>We’ve known it for a few weeks now, but the CSS <code>if()</code> function <a href=\"https://css-tricks.com/quick-hit-49/\">officially shipped in Chrome 137 version</a>. It’s really fast development for a feature that <a href=\"https://css-tricks.com/if-css-gets-inline-conditionals/\">the CSSWG resolved to add less than a year ago</a>. We can typically expect this sort of thing — especially one that is unlike anything we currently have in CSS — to develop over a number of years before we can get our dirty hands on it. But here we are!</p>\r\n\r\n\r\n\r\n<p>I’m not here to debate whether <code>if()</code> in CSS should exist, nor do I want to answer whether CSS is a programming language; <a href=\"https://css-tricks.com/is-css-a-programming-language/\">Chris already did that</a> and definitely explained how exhausting that <em>fun </em>little argument can be.</p>\r\n\r\n\r\n\r\n<p>What I <em>am</em> here to do is poke at <code>if()</code> in these early days of support and explore what we know about it today at a pretty high level to get a feel for its syntax. <a href=\"https://css-tricks.com/poking-at-the-css-if-function-a-little-more-conditional-color-theming/\">We poke a little harder at it in another post</a> where we’ll look at a more heady real-world example.</p>\r\n\r\n\r\n\r\n<span id=\"more-387422\"></span>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"it-s-finally-here-\">Yes, it’s already here!</h3>\r\n\r\n\r\n<p>Conditional statements exist everywhere in CSS. From at-rules to the parsing and matching of every statement to the DOM, CSS has always had conditionals. And, <a href=\"https://lea.verou.me/blog/2024/css-conditionals/\" rel=\"noopener\">as Lea Verou put it</a>, every selector is essentially a conditional! What we haven’t had, however, is a way to style an element against multiple conditions in one line, and then have it return a result <em>conditionally</em>.</p>\r\n\r\n\r\n\r\n<p>The <code>if()</code> function is a more advanced level of conditionals, where you can manipulate and have all your conditional statements assigned to a single property.</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.element {\r\n  color: if(style(--theme: dark): oklch(52% 0.18 140); else: oklch(65% 0.05 220));\r\n}</code></pre>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_NPPZjPX\" src=\"//codepen.io/anon/embed/preview/NPPZjPX?height=500&theme-id=1&slug-hash=NPPZjPX&default-tab=result\" height=\"500\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed NPPZjPX\" title=\"CodePen Embed NPPZjPX\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"how-does-if-work-\">How does <code>if()</code> work?</h3>\r\n\r\n\r\n<p>Well before Chrome implemented the feature, back in 2021 when it was first proposed, the early syntax was like this:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\"><if()> = if( <container-query>, [<declaration-value>]{1, 2} )</code></pre>\r\n\r\n\r\n\r\n<p>Now we’re looking at this instead:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\"><if()> = if(\r\n  [<if-statement>: <result>]*;\r\n  <if-statement>: <result> ;?\r\n)</code></pre>\r\n\r\n\r\n\r\n<p>Where…</p>\r\n\r\n\r\n\r\n<ul class=\"wp-block-list\">\r\n<li>The first <code><if-statement></code> represents conditions inside either <code>style()</code>, <code>media()</code>, or <code>supports()</code> wrapper functions. This allows us to write multiple if statements, as many as we may desire. Yes, you read that right. As many as we want!</li>\r\n\r\n\r\n\r\n<li>The final <code><if-statement></code> condition (<code>else</code>) is the default value when all other if statements fail.</li>\r\n</ul>\r\n\r\n\r\n\r\n<p>That’s the “easy” way to read the syntax. This is what’s <a href=\"https://www.w3.org/TR/css-values-5/#if-notation\" rel=\"noopener\">in the spec</a>:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\"><if()> = if( [ <if-branch> ; ]* <if-branch> ;? )\r\n<if-branch> = <if-condition> : <declaration-value>?\r\n<if-condition> = <boolean-expr[ <if-test> ]> | else\r\n<if-test> =\r\n  supports( [ <ident> : <declaration-value> ] | <supports-condition> )\r\n  media( <media-feature> | <media-condition> ) |\r\n  style( <style-query> )</code></pre>\r\n\r\n\r\n\r\n<p>A little wordy, right? So, let’s look at an example to wrap our heads around it. Say we want to change an element’s padding depending on a given active color scheme. We would set an <code>if()</code> statement with a <code>style()</code> function inside, and that would compare a given value with something like a custom variable to output a result. All this talk sounds so complicated, so let’s jump into code:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.element {\r\n  padding: if(style(--theme: dark): 2rem; else: 3rem);\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>The example above sets the padding to <code>2rem</code>… <em>if</em> the <code>--theme</code> variable is set to <code>dark</code>. <em>If</em> not, it defaults to <code>3rem</code>. I know, not exactly the sort of thing you might actually use the function for, but it’s merely to illustrate the basic idea.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"make-the-syntax-clean-\">Make the syntax clean!</h3>\r\n\r\n\r\n<p>One thing I noticed, though, is that things can get convoluted very <em>very</em> fast. Imagine you have three <code>if()</code> statements like this:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">:root {\r\n  --height: 12.5rem;\r\n  --width: 4rem;\r\n  --weight: 2rem;\r\n}\r\n\r\n.element {\r\n  height: if(\r\n    style(--height: 3rem): 14.5rem; style(--width: 7rem): 10rem; style(--weight: 100rem): 2rem; else: var(--height)\r\n  );\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>We’re only working with three statements and, I’ll be honest, it makes my eyes hurt with complexity. So, I’m anticipating <code>if()</code> style patterns to be developed soon or <em>prettier</em> versions to adopt a formatting style for this.</p>\r\n\r\n\r\n\r\n<p>For example, if I were to break things out to be more readable, I would likely do something like this:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">:root {\r\n  --height: 12.5rem;\r\n  --width: 4rem;\r\n  --weight: 2rem;\r\n}\r\n\r\n/* This is much cleaner, don't you think? */\r\n.element {\r\n  height: if(\r\n    style(--height: 3rem): 14.5rem; \r\n    style(--width: 7rem): 10rem; \r\n    style(--weight: 100rem): 2rem; \r\n    else: var(--height)\r\n  );\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>Much better, right? Now, you can definitely understand what is going on at a glance. That’s just me, though. Maybe you have different ideas… and <em>if</em> you do, I’d love to see them in the comments.</p>\r\n\r\n\r\n\r\n<p>Here’s a quick demo showing multiple conditionals in CSS for this animated ball to work. The width of the ball changes based on some custom variable values set. Gentle reminder that this is only supported in Chrome 137+ at the time I’m writing this:</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_yyNNbZX\" src=\"//codepen.io/anon/embed/preview/yyNNbZX?height=450&theme-id=1&slug-hash=yyNNbZX&default-tab=css,result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed yyNNbZX\" title=\"CodePen Embed yyNNbZX\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"how-do-supports-and-media-work-in-if-\">The <code>supports()</code> and <code>media()</code> statements</h3>\r\n\r\n\r\n<p>Think of <code>supports()</code> the same way you would use the <a href=\"https://css-tricks.com/almanac/rules/s/supports/\"><code>@supports</code></a> at-rule. In fact, they work about the same, at least conceptually:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* formal syntax for @supports */\r\n@supports <supports-condition> {\r\n  <rule-list>\r\n}\r\n\r\n/* formal syntax for supports() */\r\nsupports( [ <ident> : <declaration-value> ] | <supports-condition> )</code></pre>\r\n\r\n\r\n\r\n<p>The only difference here is that <code>supports()</code> returns a value instead of matching a block of code. But, how does this work in <em>real code?</em></p>\r\n\r\n\r\n\r\n<blockquote class=\"wp-block-quote is-layout-flow wp-block-quote-is-layout-flow\">\r\n<p>The <code><ident>: <declaration-value></code> you see here is, in this case, the <strong>property name: property value</strong> e.g. <code>display: flex</code>.</p>\r\n</blockquote>\r\n\r\n\r\n\r\n<p>Let’s say you want to check for support for the <code><a href=\"https://css-tricks.com/almanac/properties/b/backdrop-filter/\">backdrop-filter</a></code> property, particularly the <code>blur()</code> function. Typically, you can do this with <code>@supports</code>:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* Fallback in case the browser doesn't support backdrop-filter */\r\n.card {\r\n  backdrop-filter: unset;\r\n  background-color: oklch(20% 50% 40% / 0.8);\r\n}\r\n\r\n@supports (backdrop-filter: blur(10px)) {\r\n  .card {\r\n    backdrop-filter: blur(10px);\r\n    background-color: oklch(20% 50% 40% / 0.8);\r\n  }\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>But, with CSS <code>if()</code>, we can also do this:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.card {\r\n  backdrop-filter: if(\r\n    supports(backdrop-filter: blur(10px)): blur(10px);\r\n    else: unset\r\n  );\r\n}</code></pre>\r\n\r\n\r\n\r\n<p class=\"is-style-explanation\"><strong>Note:</strong> Think of <code>unset</code> here as a possible fallback for graceful degradation.</p>\r\n\r\n\r\n\r\n<p>That looks awesome, right? Multiple conditions can be checked as well for <code>supports()</code> and any of the supported functions. For example:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.card {\r\n  backdrop-filter: if(\r\n    supports(backdrop-filter: blur(10px)): blur(10px);\r\n    supports(backdrop-filter: invert(50%)): invert(50%);\r\n    supports(backdrop-filter: hue-rotate(230deg)): hue-rotate(230deg);;\r\n    else: unset\r\n  );\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>Now, take a look at the <code><a href=\"https://css-tricks.com/almanac/rules/m/media/\">@media</a></code> at-rule. <a href=\"https://css-tricks.com/a-complete-guide-to-css-media-queries/\">You can compare and check for a bunch of stuff</a>, but I’d like to keep it simple and check for whether or not a screen size is a certain width and apply styles based on that:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">h1 {\r\n  font-size: 2rem;\r\n}\r\n\r\n@media (min-width: 768px) {\r\n  h1 {\r\n    font-size: 2.5rem;\r\n  }\r\n}\r\n\r\n@media (min-width: 1200px) {\r\n  h1 {\r\n    font-size: 3rem;\r\n  }\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>The <code>media()</code> wrapper works almost the same way as its at-rule counterpart. Note its syntax from the spec:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* formal syntax for @media */\r\n@media <media-query-list> {\r\n  <rule-list>\r\n}\r\n\r\n/* formal syntax for media() */\r\nmedia( <media-feature> | <media-condition> )</code></pre>\r\n\r\n\r\n\r\n<p>Notice how at the <em>end of the day</em>, the formal syntax (<code><media-query></code>) is the same as the syntax for the <code>media()</code> function. And instead of returning a block of code in <code>@media</code>, you’d have something like this in the CSS inline <code>if()</code>:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">h1 {\r\n  font-size: if(\r\n    media(width >= 1200px): 3rem;\r\n    media(width >= 768px): 2.5rem;\r\n    else: 2rem\r\n  );\r\n}</code></pre>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"how-is-browser-support-for-if-\">Again, these are early days</h3>\r\n\r\n\r\n<p>As of the time of this writing, only the <a href=\"https://caniuse.com/?search=if(\" rel=\"noopener\">latest update of Chrome supports <code>if()</code></a>). I’m guessing other browsers will follow suit once usage and interest come in. I have no idea when that will happen. Until then, I think it’s fun to experiment with this stuff, just as others have been doing:</p>\r\n\r\n\r\n\r\n<ul class=\"wp-block-list\">\r\n<li><a href=\"https://css-tricks.com/the-what-if-machine-bringing-the-iffy-future-of-css-into-the-present/\">The What If Machine: Bringing the “Iffy” Future of CSS into the Present</a> (Lee Meyer)</li>\r\n\r\n\r\n\r\n<li><a href=\"https://css-tip.com/inline-if/\" rel=\"noopener\">How To Correctly Use <code>if()</code> In CSS</a> (Temani Afif)</li>\r\n\r\n\r\n\r\n<li><a href=\"https://blog.kizu.dev/future-proofing-indirect-cyclic-conditions/\" rel=\"noopener\">Future-Proofing Indirect Cyclical Conditions</a> (Roma Komarov)</li>\r\n\r\n\r\n\r\n<li><a href=\"https://www.amitmerchant.com/the-if-function-in-css/\" rel=\"noopener\">The new <code>if()</code> function in CSS has landed in the latest Chrome</a> (Amit Merchant)</li>\r\n</ul>\r\n\r\n\r\n\r\n<p>Experimenting with early features is how we help CSS evolve. If you’re trying things out, consider adding your feedback to the <a href=\"https://github.com/w3c/csswg-drafts/issues/\" rel=\"noopener\">CSSWG</a> and <a href=\"https://issues.chromium.org/issues/wizard?pli=1\" rel=\"noopener\">Chromium</a>. The more use cases, the better, and that will certain help make future implementations better as well.</p>\r\n\r\n\r\n\r\n<p>Now that we have a high-level feel for the <code>if()</code>syntax, <a href=\"https://css-tricks.com/poking-at-the-css-if-function-a-little-more-conditional-color-theming/\">we’ll poke a little harder at the function in another article</a> where we put it up against a real-world use case.</p>\r\n<hr />\r\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/lightly-poking-at-the-css-if-function-in-chrome-137/\">Lightly Poking at the CSS if() Function in Chrome 137</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&utm_source=css-tricks.com&utm_campaign=family_&utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
    "createdAt": "2025-06-24T15:17:10.000+00:00",
    "link": "https://css-tricks.com/lightly-poking-at-the-css-if-function-in-chrome-137/",
    "author": "",
    "site": {
      "id": "4",
      "url": "https://css-tricks.com/category/articles/feed",
      "name": "cssTrick"
    }
  },
  {
    "title": "Lightly Poking at the CSS if() Function in Chrome 137",
    "content": "<p>We’ve known it for a few weeks now, but the CSS <code>if()</code> function <a href=\"https://css-tricks.com/quick-hit-49/\">officially shipped in Chrome 137 version</a>. It’s really fast development for a feature that <a href=\"https://css-tricks.com/if-css-gets-inline-conditionals/\">the CSSWG resolved to add less than a year ago</a>. We can typically expect this sort of thing — especially one that is unlike anything we currently have in CSS — to develop over a number of years before we can get our dirty hands on it. But here we are!</p>\r\n\r\n\r\n\r\n<p>I’m not here to debate whether <code>if()</code> in CSS should exist, nor do I want to answer whether CSS is a programming language; <a href=\"https://css-tricks.com/is-css-a-programming-language/\">Chris already did that</a> and definitely explained how exhausting that <em>fun </em>little argument can be.</p>\r\n\r\n\r\n\r\n<p>What I <em>am</em> here to do is poke at <code>if()</code> in these early days of support and explore what we know about it today at a pretty high level to get a feel for its syntax. <a href=\"https://css-tricks.com/poking-at-the-css-if-function-a-little-more-conditional-color-theming/\">We poke a little harder at it in another post</a> where we’ll look at a more heady real-world example.</p>\r\n\r\n\r\n\r\n<span id=\"more-387422\"></span>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"it-s-finally-here-\">Yes, it’s already here!</h3>\r\n\r\n\r\n<p>Conditional statements exist everywhere in CSS. From at-rules to the parsing and matching of every statement to the DOM, CSS has always had conditionals. And, <a href=\"https://lea.verou.me/blog/2024/css-conditionals/\" rel=\"noopener\">as Lea Verou put it</a>, every selector is essentially a conditional! What we haven’t had, however, is a way to style an element against multiple conditions in one line, and then have it return a result <em>conditionally</em>.</p>\r\n\r\n\r\n\r\n<p>The <code>if()</code> function is a more advanced level of conditionals, where you can manipulate and have all your conditional statements assigned to a single property.</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.element {\r\n  color: if(style(--theme: dark): oklch(52% 0.18 140); else: oklch(65% 0.05 220));\r\n}</code></pre>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_NPPZjPX\" src=\"//codepen.io/anon/embed/preview/NPPZjPX?height=500&theme-id=1&slug-hash=NPPZjPX&default-tab=result\" height=\"500\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed NPPZjPX\" title=\"CodePen Embed NPPZjPX\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"how-does-if-work-\">How does <code>if()</code> work?</h3>\r\n\r\n\r\n<p>Well before Chrome implemented the feature, back in 2021 when it was first proposed, the early syntax was like this:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\"><if()> = if( <container-query>, [<declaration-value>]{1, 2} )</code></pre>\r\n\r\n\r\n\r\n<p>Now we’re looking at this instead:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\"><if()> = if(\r\n  [<if-statement>: <result>]*;\r\n  <if-statement>: <result> ;?\r\n)</code></pre>\r\n\r\n\r\n\r\n<p>Where…</p>\r\n\r\n\r\n\r\n<ul class=\"wp-block-list\">\r\n<li>The first <code><if-statement></code> represents conditions inside either <code>style()</code>, <code>media()</code>, or <code>supports()</code> wrapper functions. This allows us to write multiple if statements, as many as we may desire. Yes, you read that right. As many as we want!</li>\r\n\r\n\r\n\r\n<li>The final <code><if-statement></code> condition (<code>else</code>) is the default value when all other if statements fail.</li>\r\n</ul>\r\n\r\n\r\n\r\n<p>That’s the “easy” way to read the syntax. This is what’s <a href=\"https://www.w3.org/TR/css-values-5/#if-notation\" rel=\"noopener\">in the spec</a>:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\"><if()> = if( [ <if-branch> ; ]* <if-branch> ;? )\r\n<if-branch> = <if-condition> : <declaration-value>?\r\n<if-condition> = <boolean-expr[ <if-test> ]> | else\r\n<if-test> =\r\n  supports( [ <ident> : <declaration-value> ] | <supports-condition> )\r\n  media( <media-feature> | <media-condition> ) |\r\n  style( <style-query> )</code></pre>\r\n\r\n\r\n\r\n<p>A little wordy, right? So, let’s look at an example to wrap our heads around it. Say we want to change an element’s padding depending on a given active color scheme. We would set an <code>if()</code> statement with a <code>style()</code> function inside, and that would compare a given value with something like a custom variable to output a result. All this talk sounds so complicated, so let’s jump into code:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.element {\r\n  padding: if(style(--theme: dark): 2rem; else: 3rem);\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>The example above sets the padding to <code>2rem</code>… <em>if</em> the <code>--theme</code> variable is set to <code>dark</code>. <em>If</em> not, it defaults to <code>3rem</code>. I know, not exactly the sort of thing you might actually use the function for, but it’s merely to illustrate the basic idea.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"make-the-syntax-clean-\">Make the syntax clean!</h3>\r\n\r\n\r\n<p>One thing I noticed, though, is that things can get convoluted very <em>very</em> fast. Imagine you have three <code>if()</code> statements like this:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">:root {\r\n  --height: 12.5rem;\r\n  --width: 4rem;\r\n  --weight: 2rem;\r\n}\r\n\r\n.element {\r\n  height: if(\r\n    style(--height: 3rem): 14.5rem; style(--width: 7rem): 10rem; style(--weight: 100rem): 2rem; else: var(--height)\r\n  );\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>We’re only working with three statements and, I’ll be honest, it makes my eyes hurt with complexity. So, I’m anticipating <code>if()</code> style patterns to be developed soon or <em>prettier</em> versions to adopt a formatting style for this.</p>\r\n\r\n\r\n\r\n<p>For example, if I were to break things out to be more readable, I would likely do something like this:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">:root {\r\n  --height: 12.5rem;\r\n  --width: 4rem;\r\n  --weight: 2rem;\r\n}\r\n\r\n/* This is much cleaner, don't you think? */\r\n.element {\r\n  height: if(\r\n    style(--height: 3rem): 14.5rem; \r\n    style(--width: 7rem): 10rem; \r\n    style(--weight: 100rem): 2rem; \r\n    else: var(--height)\r\n  );\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>Much better, right? Now, you can definitely understand what is going on at a glance. That’s just me, though. Maybe you have different ideas… and <em>if</em> you do, I’d love to see them in the comments.</p>\r\n\r\n\r\n\r\n<p>Here’s a quick demo showing multiple conditionals in CSS for this animated ball to work. The width of the ball changes based on some custom variable values set. Gentle reminder that this is only supported in Chrome 137+ at the time I’m writing this:</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_yyNNbZX\" src=\"//codepen.io/anon/embed/preview/yyNNbZX?height=450&theme-id=1&slug-hash=yyNNbZX&default-tab=css,result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed yyNNbZX\" title=\"CodePen Embed yyNNbZX\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"how-do-supports-and-media-work-in-if-\">The <code>supports()</code> and <code>media()</code> statements</h3>\r\n\r\n\r\n<p>Think of <code>supports()</code> the same way you would use the <a href=\"https://css-tricks.com/almanac/rules/s/supports/\"><code>@supports</code></a> at-rule. In fact, they work about the same, at least conceptually:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* formal syntax for @supports */\r\n@supports <supports-condition> {\r\n  <rule-list>\r\n}\r\n\r\n/* formal syntax for supports() */\r\nsupports( [ <ident> : <declaration-value> ] | <supports-condition> )</code></pre>\r\n\r\n\r\n\r\n<p>The only difference here is that <code>supports()</code> returns a value instead of matching a block of code. But, how does this work in <em>real code?</em></p>\r\n\r\n\r\n\r\n<blockquote class=\"wp-block-quote is-layout-flow wp-block-quote-is-layout-flow\">\r\n<p>The <code><ident>: <declaration-value></code> you see here is, in this case, the <strong>property name: property value</strong> e.g. <code>display: flex</code>.</p>\r\n</blockquote>\r\n\r\n\r\n\r\n<p>Let’s say you want to check for support for the <code><a href=\"https://css-tricks.com/almanac/properties/b/backdrop-filter/\">backdrop-filter</a></code> property, particularly the <code>blur()</code> function. Typically, you can do this with <code>@supports</code>:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* Fallback in case the browser doesn't support backdrop-filter */\r\n.card {\r\n  backdrop-filter: unset;\r\n  background-color: oklch(20% 50% 40% / 0.8);\r\n}\r\n\r\n@supports (backdrop-filter: blur(10px)) {\r\n  .card {\r\n    backdrop-filter: blur(10px);\r\n    background-color: oklch(20% 50% 40% / 0.8);\r\n  }\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>But, with CSS <code>if()</code>, we can also do this:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.card {\r\n  backdrop-filter: if(\r\n    supports(backdrop-filter: blur(10px)): blur(10px);\r\n    else: unset\r\n  );\r\n}</code></pre>\r\n\r\n\r\n\r\n<p class=\"is-style-explanation\"><strong>Note:</strong> Think of <code>unset</code> here as a possible fallback for graceful degradation.</p>\r\n\r\n\r\n\r\n<p>That looks awesome, right? Multiple conditions can be checked as well for <code>supports()</code> and any of the supported functions. For example:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.card {\r\n  backdrop-filter: if(\r\n    supports(backdrop-filter: blur(10px)): blur(10px);\r\n    supports(backdrop-filter: invert(50%)): invert(50%);\r\n    supports(backdrop-filter: hue-rotate(230deg)): hue-rotate(230deg);;\r\n    else: unset\r\n  );\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>Now, take a look at the <code><a href=\"https://css-tricks.com/almanac/rules/m/media/\">@media</a></code> at-rule. <a href=\"https://css-tricks.com/a-complete-guide-to-css-media-queries/\">You can compare and check for a bunch of stuff</a>, but I’d like to keep it simple and check for whether or not a screen size is a certain width and apply styles based on that:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">h1 {\r\n  font-size: 2rem;\r\n}\r\n\r\n@media (min-width: 768px) {\r\n  h1 {\r\n    font-size: 2.5rem;\r\n  }\r\n}\r\n\r\n@media (min-width: 1200px) {\r\n  h1 {\r\n    font-size: 3rem;\r\n  }\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>The <code>media()</code> wrapper works almost the same way as its at-rule counterpart. Note its syntax from the spec:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* formal syntax for @media */\r\n@media <media-query-list> {\r\n  <rule-list>\r\n}\r\n\r\n/* formal syntax for media() */\r\nmedia( <media-feature> | <media-condition> )</code></pre>\r\n\r\n\r\n\r\n<p>Notice how at the <em>end of the day</em>, the formal syntax (<code><media-query></code>) is the same as the syntax for the <code>media()</code> function. And instead of returning a block of code in <code>@media</code>, you’d have something like this in the CSS inline <code>if()</code>:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">h1 {\r\n  font-size: if(\r\n    media(width >= 1200px): 3rem;\r\n    media(width >= 768px): 2.5rem;\r\n    else: 2rem\r\n  );\r\n}</code></pre>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"how-is-browser-support-for-if-\">Again, these are early days</h3>\r\n\r\n\r\n<p>As of the time of this writing, only the <a href=\"https://caniuse.com/?search=if(\" rel=\"noopener\">latest update of Chrome supports <code>if()</code></a>). I’m guessing other browsers will follow suit once usage and interest come in. I have no idea when that will happen. Until then, I think it’s fun to experiment with this stuff, just as others have been doing:</p>\r\n\r\n\r\n\r\n<ul class=\"wp-block-list\">\r\n<li><a href=\"https://css-tricks.com/the-what-if-machine-bringing-the-iffy-future-of-css-into-the-present/\">The What If Machine: Bringing the “Iffy” Future of CSS into the Present</a> (Lee Meyer)</li>\r\n\r\n\r\n\r\n<li><a href=\"https://css-tip.com/inline-if/\" rel=\"noopener\">How To Correctly Use <code>if()</code> In CSS</a> (Temani Afif)</li>\r\n\r\n\r\n\r\n<li><a href=\"https://blog.kizu.dev/future-proofing-indirect-cyclic-conditions/\" rel=\"noopener\">Future-Proofing Indirect Cyclical Conditions</a> (Roma Komarov)</li>\r\n\r\n\r\n\r\n<li><a href=\"https://www.amitmerchant.com/the-if-function-in-css/\" rel=\"noopener\">The new <code>if()</code> function in CSS has landed in the latest Chrome</a> (Amit Merchant)</li>\r\n</ul>\r\n\r\n\r\n\r\n<p>Experimenting with early features is how we help CSS evolve. If you’re trying things out, consider adding your feedback to the <a href=\"https://github.com/w3c/csswg-drafts/issues/\" rel=\"noopener\">CSSWG</a> and <a href=\"https://issues.chromium.org/issues/wizard?pli=1\" rel=\"noopener\">Chromium</a>. The more use cases, the better, and that will certain help make future implementations better as well.</p>\r\n\r\n\r\n\r\n<p>Now that we have a high-level feel for the <code>if()</code>syntax, <a href=\"https://css-tricks.com/poking-at-the-css-if-function-a-little-more-conditional-color-theming/\">we’ll poke a little harder at the function in another article</a> where we put it up against a real-world use case.</p>\r\n<hr />\r\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/lightly-poking-at-the-css-if-function-in-chrome-137/\">Lightly Poking at the CSS if() Function in Chrome 137</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&utm_source=css-tricks.com&utm_campaign=family_&utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
    "createdAt": "2025-06-24T15:17:10.000+00:00",
    "link": "https://css-tricks.com/lightly-poking-at-the-css-if-function-in-chrome-137/",
    "author": "",
    "site": {
      "id": "5",
      "url": "https://css-tricks.com/category/articles/feed",
      "name": "cssTrick"
    }
  },
  {
    "title": "[Korean FE Article] 클린 코드의 심리학: 우리가 지저분한 리액트 컴포넌트를 작성하는 이유",
    "content": "<div class=\"captioned-image-container\"><figure><a class=\"image-link image2 is-viewable-img\" target=\"_blank\" href=\"https://substackcdn.com/image/fetch/$s_!zbKl!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F69defa08-b036-466b-8236-ef5a5e24a172_1920x1080.png\" data-component-name=\"Image2ToDOM\"><div class=\"image2-inset\"><picture><source type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/$s_!zbKl!,w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F69defa08-b036-466b-8236-ef5a5e24a172_1920x1080.png 424w, https://substackcdn.com/image/fetch/$s_!zbKl!,w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F69defa08-b036-466b-8236-ef5a5e24a172_1920x1080.png 848w, https://substackcdn.com/image/fetch/$s_!zbKl!,w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F69defa08-b036-466b-8236-ef5a5e24a172_1920x1080.png 1272w, https://substackcdn.com/image/fetch/$s_!zbKl!,w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F69defa08-b036-466b-8236-ef5a5e24a172_1920x1080.png 1456w\" sizes=\"100vw\"><img src=\"https://substackcdn.com/image/fetch/$s_!zbKl!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F69defa08-b036-466b-8236-ef5a5e24a172_1920x1080.png\" width=\"1456\" height=\"819\" data-attrs=\"{\"src\":\"https://substack-post-media.s3.amazonaws.com/public/images/69defa08-b036-466b-8236-ef5a5e24a172_1920x1080.png\",\"srcNoWatermark\":null,\"fullscreen\":null,\"imageSize\":null,\"height\":819,\"width\":1456,\"resizeWidth\":null,\"bytes\":356262,\"alt\":null,\"title\":null,\"type\":\"image/png\",\"href\":null,\"belowTheFold\":false,\"topImage\":true,\"internalRedirect\":\"https://kofearticle.substack.com/i/166451678?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F69defa08-b036-466b-8236-ef5a5e24a172_1920x1080.png\",\"isProcessing\":false,\"align\":null,\"offset\":false}\" class=\"sizing-normal\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/$s_!zbKl!,w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F69defa08-b036-466b-8236-ef5a5e24a172_1920x1080.png 424w, https://substackcdn.com/image/fetch/$s_!zbKl!,w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F69defa08-b036-466b-8236-ef5a5e24a172_1920x1080.png 848w, https://substackcdn.com/image/fetch/$s_!zbKl!,w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F69defa08-b036-466b-8236-ef5a5e24a172_1920x1080.png 1272w, https://substackcdn.com/image/fetch/$s_!zbKl!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F69defa08-b036-466b-8236-ef5a5e24a172_1920x1080.png 1456w\" sizes=\"100vw\" fetchpriority=\"high\"></picture><div class=\"image-link-expand\"><div class=\"pencraft pc-display-flex pc-gap-8 pc-reset\"><div class=\"pencraft pc-reset icon-container restack-image\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-refresh-cw\"><path d=\"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\"></path><path d=\"M21 3v5h-5\"></path><path d=\"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\"></path><path d=\"M8 16H3v5\"></path></svg></div><div class=\"pencraft pc-reset icon-container view-image\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-maximize2\"><polyline points=\"15 3 21 3 21 9\"></polyline><polyline points=\"9 21 3 21 3 15\"></polyline><line x1=\"21\" x2=\"14\" y1=\"3\" y2=\"10\"></line><line x1=\"3\" x2=\"10\" y1=\"21\" y2=\"14\"></line></svg></div></div></div></div></a></figure></div><blockquote><p>글 링크: <a href=\"https://imnotadevleoper.tistory.com/362\">https://imnotadevleoper.tistory.com/362</a></p></blockquote><h2><strong>소개</strong></h2><p>“클린 코드를 써야 한다는 건 알지만, 왜 나는 여전히 지저분한 리액트 컴포넌트를 작성하고 있을까?”</p><p>이 글은 단순히 코딩 스타일의 문제가 아니라, <em>우리의 심리적 습관과 인지적 한계</em>에서 비롯된다는 흥미로운 통찰로 시작합니다.</p><p>인지 부하, 계획 오류, 매몰 비용, 복잡성 편향 같은 심리적 요인들이 어떻게 우리를 ‘나쁜 코드’로 이끄는지를 실제 코드 예시와 함께 짚어주며, 그 악순환을 끊기 위한 <strong>실용적이고 심리학적으로 근거 있는 전략들</strong>을 제안합니다.</p><p>“클린 코드”를 단지 원칙으로만 배워왔던 분이라면, 이번 글을 통해 <em>왜 우리가 그 원칙을 지키지 못하는지</em>, 그리고 <em>어떻게 하면 진짜로 실천할 수 있을지</em>에 대한 깊은 통찰을 얻게 될 것입니다.</p><p><strong>지금, 코드를 고치기 전에 이 글을 먼저 읽어보세요.</strong></p><p>작고 점진적인 변화가 진짜 클린 코드를 만듭니다.</p><h2><strong>목차</strong></h2><ul><li><p>인지 부하의 함정</p></li><li><p>우리가 지저분한 코드를 작성하는 이유</p><ul><li><p>계획 오류</p></li><li><p>매몰 비용 오류</p></li><li><p>복잡성 편향</p></li><li><p>결정 피로와 인지 부하</p></li></ul></li><li><p>악순환 끊어내기</p><ul><li><p>작게 시작하고 점진적으로 발전시키기</p></li><li><p>심리적 안전감 조성하기</p></li><li><p>“보이스카웃 규칙” 활용하기</p></li></ul></li><li><p>실용적인 전략들</p><ul><li><p>5분 규칙</p></li><li><p>“코드 리뷰” 테스트</p></li><li><p>“미래의 나” 테스트</p></li></ul></li><li><p>결론</p></li><li><p>추가 읽을거리</p><ul><li><p>책과 개요</p></li><li><p>학술 연구</p></li></ul></li></ul>",
    "createdAt": "2025-06-24T00:33:17.000+00:00",
    "link": "https://kofearticle.substack.com/p/korean-fe-article-aa9",
    "author": "",
    "site": {
      "id": "3",
      "url": "https://kofearticle.substack.com/feed",
      "name": "kofearticle"
    }
  },
  {
    "title": "A Better API for the Intersection and Mutation Observers",
    "content": "<p>In a <a href=\"https://css-tricks.com/a-better-api-for-the-resize-observer/\">previous article</a>, I showed you how to refactor the Resize Observer API into something way simpler to use:</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// From this\r\nconst observer = new ResizeObserver(observerFn)\r\n\r\nfunction observerFn (entries) {\r\n  for (let entry of entries) {\r\n    // Do something with each entry\r\n  }\r\n}\r\n\r\nconst element = document.querySelector('#some-element')\r\nobserver.observe(element);</code></pre>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// To this \r\nconst node = document.querySelector('#some-element')\r\nconst obs = resizeObserver(node, {\r\n  callback({ entry }) {\r\n    // Do something with each entry\r\n  }\r\n})</code></pre>\r\n\r\n\r\n\r\n<p>Today, we’re going to do the same for <code>MutationObserver</code> and <code>IntersectionObserver</code>.</p>\r\n\r\n\r\n\r\n<span id=\"more-386344\"></span>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"refactoring-mutationobserver\">Refactoring Mutation Observer</h3>\r\n\r\n\r\n<p><code>MutationObserver</code> has almost the same API as that of <code>ResizeObserver</code>. So we can practically copy-paste the entire chunk of code we wrote for <code>resizeObserver</code> to <code>mutationObserver</code>.</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">export function mutationObserver(node, options = {}) {\r\n  const observer = new MutationObserver(observerFn)\r\n  const { callback, ...opts } = options\r\n  observer.observe(node, opts)\r\n\r\n  function observerFn(entries) {\r\n    for (const entry of entries) {\r\n      // Callback pattern\r\n      if (options.callback) options.callback({ entry, entries, observer })\r\n      // Event listener pattern\r\n      else {\r\n        node.dispatchEvent(\r\n          new CustomEvent('mutate', {\r\n            detail: { entry, entries, observer },\r\n          })\r\n        )\r\n      }\r\n    }\r\n  }\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>You can now use <code>mutationObserver</code> with the <code>callback</code> pattern or event listener pattern.</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const node = document.querySelector('.some-element')\r\n\r\n// Callback pattern \r\nconst obs = mutationObserver(node, {\r\n  callback ({ entry, entries }) {\r\n    // Do what you want with each entry\r\n  }\r\n})\r\n\r\n// Event listener pattern\r\nnode.addEventListener('mutate', event => {\r\n  const { entry } = event.detail\r\n  // Do what you want with each entry\r\n})</code></pre>\r\n\r\n\r\n\r\n<p>Much easier!</p>\r\n\r\n\r\n<h4 class=\"wp-block-heading\" id=\"disconnecting-the-observer\">Disconnecting the observer</h4>\r\n\r\n\r\n<p>Unlike <code>ResizeObserver</code> who has two methods to stop observing elements, <code>MutationObserver</code> only has one, the <code>disconnect</code> method.</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">export function mutationObserver(node, options = {}) {\r\n  // ... \r\n  return {\r\n    disconnect() {\r\n      observer.disconnect()\r\n    }\r\n  }\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>But, <code>MutationObserver</code> has a <code>takeRecords</code> method that lets you <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver/takeRecords#examples\" target=\"_blank\" rel=\"noreferrer noopener\">get unprocessed records</a> before you disconnect. Since we should <code>takeRecords</code> before we <code>disconnect</code>, let’s use it inside <code>disconnect</code>.</p>\r\n\r\n\r\n\r\n<p>To create a complete API, we can return this method as well.</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">export function mutationObserver(node, options = {}) {\r\n  // ... \r\n  return {\r\n    // ...\r\n    disconnect() {\r\n      const records = observer.takeRecords()\r\n      observer.disconnect()\r\n      if (records.length > 0) observerFn(records)\r\n    }\r\n  }\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>Now we can disconnect our mutation observer easily with <code>disconnect</code>.</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const node = document.querySelector('.some-element')\r\nconst obs = mutationObserver(/* ... */)\r\n\r\nobs.disconnect()</code></pre>\r\n\r\n\r\n<h4 class=\"wp-block-heading\" id=\"mutationobserver-s-observe-options\">MutationObserver’s observe options</h4>\r\n\r\n\r\n<p>In case you were wondering, <code>MutationObserver</code>’s <code>observe</code> method can take in 7 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver/observe#options\" rel=\"noopener\">options</a>. Each one of them determines what to observe, and they all default to <code>false</code>.</p>\r\n\r\n\r\n\r\n<ul class=\"wp-block-list\">\r\n<li><code>subtree</code>: Monitors the entire subtree of nodes</li>\r\n\r\n\r\n\r\n<li><code>childList</code>: Monitors for addition or removal children elements. If <code>subtree</code> is <code>true</code>, this monitors all descendant elements.</li>\r\n\r\n\r\n\r\n<li><code>attributes</code>: Monitors for a change of attributes</li>\r\n\r\n\r\n\r\n<li><code>attributeFilter</code>: Array of specific attributes to monitor</li>\r\n\r\n\r\n\r\n<li><code>attributeOldValue</code>: Whether to record the previous attribute value if it was changed</li>\r\n\r\n\r\n\r\n<li><code>characterData</code>: Monitors for change in character data</li>\r\n\r\n\r\n\r\n<li><code>characterDataOldValue</code>: Whether to record the previous character data value</li>\r\n</ul>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"refactoring-intersection-observer\">Refactoring Intersection Observer</h3>\r\n\r\n\r\n<p>The API for <code>IntersectionObserver</code> is similar to other observers. Again, you have to:</p>\r\n\r\n\r\n\r\n<ol class=\"wp-block-list\">\r\n<li><strong>Create a new observer:</strong> with the <code>new</code> keyword. This observer takes in an observer function to execute.</li>\r\n\r\n\r\n\r\n<li><strong>Do something with the observed changes:</strong> This is done via the observer function that is passed into the observer.</li>\r\n\r\n\r\n\r\n<li><strong>Observe a specific element:</strong> By using the <code>observe</code> method.</li>\r\n\r\n\r\n\r\n<li><strong>(Optionally) unobserve the element:</strong> By using the <code>unobserve</code> or <code>disconnect</code> method (depending on which Observer you’re using).</li>\r\n</ol>\r\n\r\n\r\n\r\n<p>But <code>IntersectionObserver</code> requires you to pass the options in Step 1 (instead of Step 3). So here’s the code to use the <code>IntersectionObserver</code> API.</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// Step 1: Create a new observer and pass in relevant options\r\nconst options = {/*...*/}\r\nconst observer = new IntersectionObserver(observerFn, options)\r\n\r\n// Step 2: Do something with the observed changes\r\nfunction observerFn (entries) {\r\n  for (const entry of entries) {\r\n    // Do something with entry\r\n  }\r\n}\r\n\r\n// Step 3: Observe the element\r\nconst element = document.querySelector('#some-element')\r\nobserver.observe(element)\r\n\r\n// Step 4 (optional): Disconnect the observer when we're done using it\r\nobserver.disconnect(element)</code></pre>\r\n\r\n\r\n\r\n<p>Since the code is similar, we can also copy-paste the code we wrote for <code>mutationObserver</code> into <code>intersectionObserver</code>. When doing so, we have to remember to pass the options into <code>IntersectionObserver</code> and not the <code>observe</code> method.</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"2,3\"><code markup=\"tt\">export function mutationObserver(node, options = {}) {\r\n  const { callback, ...opts } = options\r\n  const observer = new MutationObserver(observerFn, opts)\r\n  observer.observe(node)\r\n\r\n  function observerFn(entries) {\r\n    for (const entry of entries) {\r\n      // Callback pattern\r\n      if (options.callback) options.callback({ entry, entries, observer })\r\n      // Event listener pattern\r\n      else {\r\n        node.dispatchEvent(\r\n          new CustomEvent('intersect', {\r\n            detail: { entry, entries, observer },\r\n          })\r\n        )\r\n      }\r\n    }\r\n  }\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>Now we can use <code>intersectionObserver</code> with the same easy-to-use API:</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const node = document.querySelector('.some-element')\r\n\r\n// Callback pattern \r\nconst obs = intersectionObserver(node, {\r\n  callback ({ entry, entries }) {\r\n    // Do what you want with each entry\r\n  }\r\n})\r\n\r\n// Event listener pattern\r\nnode.addEventListener('intersect', event => {\r\n  const { entry } = event.detail\r\n  // Do what you want with each entry\r\n})</code></pre>\r\n\r\n\r\n<h4 class=\"wp-block-heading\" id=\"disconnecting-the-intersection-observer\">Disconnecting the Intersection Observer</h4>\r\n\r\n\r\n<p><code>IntersectionObserver</code>‘s methods are a union of both <code>resizeObserver</code> and <code>mutationObserver</code>. It has four methods:</p>\r\n\r\n\r\n\r\n<ul class=\"wp-block-list\">\r\n<li><code>observe</code>: observe an element</li>\r\n\r\n\r\n\r\n<li><code>unobserve</code>: stops observing one element</li>\r\n\r\n\r\n\r\n<li><code>disconnect</code>: stops observing all elements</li>\r\n\r\n\r\n\r\n<li><code>takeRecords</code>: gets unprocessed records</li>\r\n</ul>\r\n\r\n\r\n\r\n<p>So, we can combine the methods we’ve written in <code>resizeObserver</code> and <code>mutationObserver</code> for this one:</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">export function intersectionObserver(node, options = {}) {\r\n  // ...\r\n  return {\r\n    unobserve(node) {\r\n      observer.unobserve(node)\r\n    },\r\n\r\n    disconnect() {\r\n      // Take records before disconnecting.\r\n      const records = observer.takeRecords()\r\n      observer.disconnect()\r\n      if (records.length > 0) observerFn(records)\r\n    },\r\n    \r\n    takeRecords() {\r\n      return observer.takeRecords()\r\n    },\r\n  }\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>Now we can stop observing with the <code>unobserve</code> or <code>disconnect</code> method.</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const node = document.querySelector('.some-element')\r\nconst obs = intersectionObserver(node, /*...*/)\r\n\r\n// Disconnect the observer\r\nobs.disconnect()</code></pre>\r\n\r\n\r\n<h4 class=\"wp-block-heading\" id=\"-intersectionobserver-options\"><code>IntersectionObserver</code> options</h4>\r\n\r\n\r\n<p>In case you were wondering, <code>IntersectionObserver</code> takes in three options:</p>\r\n\r\n\r\n\r\n<ul class=\"wp-block-list\">\r\n<li><code>root</code>: The element used to check if observed elements are visible</li>\r\n\r\n\r\n\r\n<li><code>rootMargin</code>: Lets you specify an offset amount from the edges of the root</li>\r\n\r\n\r\n\r\n<li><code>threshold</code>: Determines when to log an observer entry</li>\r\n</ul>\r\n\r\n\r\n\r\n<p>Here’s an article to help you <a href=\"https://css-tricks.com/an-explanation-of-how-the-intersection-observer-watches/\">understand <code>IntersectionObserver</code> options</a>.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"using-this-in-practice-via-splendid-labz\">Using this in practice via Splendid Labz</h3>\r\n\r\n\r\n<p>Splendid Labz has a <a href=\"https://splendidlabz.com/utils\" rel=\"noopener\"><code>utils</code></a> library that contains <code>resizeObserver</code>, <code>mutationObserver</code> and <code>IntersectionObserver</code>.</p>\r\n\r\n\r\n\r\n<p>You can use them if you don’t want to copy-paste the above snippets into every project.</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import { \r\n  resizeObserver, \r\n  intersectionObserver, \r\n  mutationObserver \r\n} from 'splendidlabz/utils/dom'\r\n\r\nconst mode = document.querySelector(‘some-element’)\r\n\r\nconst resizeObs = resizeObserver(node, /* ... */)\r\nconst intersectObs = intersectionObserver(node, /* ... */)\r\nconst mutateObs = mutationObserver(node, /* ... */)</code></pre>\r\n\r\n\r\n\r\n<p>Aside from the code we’ve written together above (and in the <a href=\"\">previous article</a>), each observer method in Splendid Labz is capable of letting you observe and stop observing multiple elements at once (except <code>mutationObserver</code> because it doesn’t have a <code>unobserve</code> method)</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const items = document.querySelectorAll('.elements')\r\nconst obs = resizeObserver(items, {\r\n  callback ({ entry, entries }) {\r\n    /* Do what you want here */\r\n  }\r\n})\r\n\r\n// Unobserves two items at once\r\nconst subset = [items[0], items[1]]\r\nobs.unobserve(subset)</code></pre>\r\n\r\n\r\n\r\n<p>So it might be just a tad easier to use the functions I’ve already created for you. 😉</p>\r\n\r\n\r\n\r\n<p>Shameless Plug: <a href=\"https://splendidlabz.com\" rel=\"noopener\">Splendid Labz</a> contains a ton of useful utilities — for CSS, JavaScript, Astro, and Svelte — that I have created over the last few years.</p>\r\n\r\n\r\n\r\n<p>I’ve parked them all in into Splendid Labz, so I no longer need to scour the internet for useful functions for most of my web projects. If you take a look, you might just enjoy what I’ve complied!</p>\r\n\r\n\r\n\r\n<p>(I’m still making the docs at the time of writing so it can seem relatively empty. Check back every now and then!)</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"learning-to-refactor-stuff\">Learning to refactor stuff</h3>\r\n\r\n\r\n<p>If you love the way I explained how to refactor the observer APIs, you may find how I teach JavaScript interesting.</p>\r\n\r\n\r\n\r\n<p>In <a href=\"https://learnjavascript.today\" rel=\"noopener\">my JavaScript course</a>, you’ll learn to build 20 real life components. We’ll start off simple, add features, and refactor along the way.</p>\r\n\r\n\r\n\r\n<p>Refactoring is such an important skill to learn — and in here, I make sure you got cement it into your brain.</p>\r\n\r\n\r\n\r\n<p>That’s it! Hope you had fun reading this piece!</p>\r\n<hr />\r\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/a-better-api-for-the-intersection-and-mutation-observers/\">A Better API for the Intersection and Mutation Observers</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&utm_source=css-tricks.com&utm_campaign=family_&utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
    "createdAt": "2025-06-23T13:41:34.000+00:00",
    "link": "https://css-tricks.com/a-better-api-for-the-intersection-and-mutation-observers/",
    "author": "",
    "site": {
      "id": "4",
      "url": "https://css-tricks.com/category/articles/feed",
      "name": "cssTrick"
    }
  },
  {
    "title": "A Better API for the Intersection and Mutation Observers",
    "content": "<p>In a <a href=\"https://css-tricks.com/a-better-api-for-the-resize-observer/\">previous article</a>, I showed you how to refactor the Resize Observer API into something way simpler to use:</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// From this\r\nconst observer = new ResizeObserver(observerFn)\r\n\r\nfunction observerFn (entries) {\r\n  for (let entry of entries) {\r\n    // Do something with each entry\r\n  }\r\n}\r\n\r\nconst element = document.querySelector('#some-element')\r\nobserver.observe(element);</code></pre>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// To this \r\nconst node = document.querySelector('#some-element')\r\nconst obs = resizeObserver(node, {\r\n  callback({ entry }) {\r\n    // Do something with each entry\r\n  }\r\n})</code></pre>\r\n\r\n\r\n\r\n<p>Today, we’re going to do the same for <code>MutationObserver</code> and <code>IntersectionObserver</code>.</p>\r\n\r\n\r\n\r\n<span id=\"more-386344\"></span>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"refactoring-mutationobserver\">Refactoring Mutation Observer</h3>\r\n\r\n\r\n<p><code>MutationObserver</code> has almost the same API as that of <code>ResizeObserver</code>. So we can practically copy-paste the entire chunk of code we wrote for <code>resizeObserver</code> to <code>mutationObserver</code>.</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">export function mutationObserver(node, options = {}) {\r\n  const observer = new MutationObserver(observerFn)\r\n  const { callback, ...opts } = options\r\n  observer.observe(node, opts)\r\n\r\n  function observerFn(entries) {\r\n    for (const entry of entries) {\r\n      // Callback pattern\r\n      if (options.callback) options.callback({ entry, entries, observer })\r\n      // Event listener pattern\r\n      else {\r\n        node.dispatchEvent(\r\n          new CustomEvent('mutate', {\r\n            detail: { entry, entries, observer },\r\n          })\r\n        )\r\n      }\r\n    }\r\n  }\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>You can now use <code>mutationObserver</code> with the <code>callback</code> pattern or event listener pattern.</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const node = document.querySelector('.some-element')\r\n\r\n// Callback pattern \r\nconst obs = mutationObserver(node, {\r\n  callback ({ entry, entries }) {\r\n    // Do what you want with each entry\r\n  }\r\n})\r\n\r\n// Event listener pattern\r\nnode.addEventListener('mutate', event => {\r\n  const { entry } = event.detail\r\n  // Do what you want with each entry\r\n})</code></pre>\r\n\r\n\r\n\r\n<p>Much easier!</p>\r\n\r\n\r\n<h4 class=\"wp-block-heading\" id=\"disconnecting-the-observer\">Disconnecting the observer</h4>\r\n\r\n\r\n<p>Unlike <code>ResizeObserver</code> who has two methods to stop observing elements, <code>MutationObserver</code> only has one, the <code>disconnect</code> method.</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">export function mutationObserver(node, options = {}) {\r\n  // ... \r\n  return {\r\n    disconnect() {\r\n      observer.disconnect()\r\n    }\r\n  }\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>But, <code>MutationObserver</code> has a <code>takeRecords</code> method that lets you <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver/takeRecords#examples\" target=\"_blank\" rel=\"noreferrer noopener\">get unprocessed records</a> before you disconnect. Since we should <code>takeRecords</code> before we <code>disconnect</code>, let’s use it inside <code>disconnect</code>.</p>\r\n\r\n\r\n\r\n<p>To create a complete API, we can return this method as well.</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">export function mutationObserver(node, options = {}) {\r\n  // ... \r\n  return {\r\n    // ...\r\n    disconnect() {\r\n      const records = observer.takeRecords()\r\n      observer.disconnect()\r\n      if (records.length > 0) observerFn(records)\r\n    }\r\n  }\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>Now we can disconnect our mutation observer easily with <code>disconnect</code>.</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const node = document.querySelector('.some-element')\r\nconst obs = mutationObserver(/* ... */)\r\n\r\nobs.disconnect()</code></pre>\r\n\r\n\r\n<h4 class=\"wp-block-heading\" id=\"mutationobserver-s-observe-options\">MutationObserver’s observe options</h4>\r\n\r\n\r\n<p>In case you were wondering, <code>MutationObserver</code>’s <code>observe</code> method can take in 7 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver/observe#options\" rel=\"noopener\">options</a>. Each one of them determines what to observe, and they all default to <code>false</code>.</p>\r\n\r\n\r\n\r\n<ul class=\"wp-block-list\">\r\n<li><code>subtree</code>: Monitors the entire subtree of nodes</li>\r\n\r\n\r\n\r\n<li><code>childList</code>: Monitors for addition or removal children elements. If <code>subtree</code> is <code>true</code>, this monitors all descendant elements.</li>\r\n\r\n\r\n\r\n<li><code>attributes</code>: Monitors for a change of attributes</li>\r\n\r\n\r\n\r\n<li><code>attributeFilter</code>: Array of specific attributes to monitor</li>\r\n\r\n\r\n\r\n<li><code>attributeOldValue</code>: Whether to record the previous attribute value if it was changed</li>\r\n\r\n\r\n\r\n<li><code>characterData</code>: Monitors for change in character data</li>\r\n\r\n\r\n\r\n<li><code>characterDataOldValue</code>: Whether to record the previous character data value</li>\r\n</ul>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"refactoring-intersection-observer\">Refactoring Intersection Observer</h3>\r\n\r\n\r\n<p>The API for <code>IntersectionObserver</code> is similar to other observers. Again, you have to:</p>\r\n\r\n\r\n\r\n<ol class=\"wp-block-list\">\r\n<li><strong>Create a new observer:</strong> with the <code>new</code> keyword. This observer takes in an observer function to execute.</li>\r\n\r\n\r\n\r\n<li><strong>Do something with the observed changes:</strong> This is done via the observer function that is passed into the observer.</li>\r\n\r\n\r\n\r\n<li><strong>Observe a specific element:</strong> By using the <code>observe</code> method.</li>\r\n\r\n\r\n\r\n<li><strong>(Optionally) unobserve the element:</strong> By using the <code>unobserve</code> or <code>disconnect</code> method (depending on which Observer you’re using).</li>\r\n</ol>\r\n\r\n\r\n\r\n<p>But <code>IntersectionObserver</code> requires you to pass the options in Step 1 (instead of Step 3). So here’s the code to use the <code>IntersectionObserver</code> API.</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// Step 1: Create a new observer and pass in relevant options\r\nconst options = {/*...*/}\r\nconst observer = new IntersectionObserver(observerFn, options)\r\n\r\n// Step 2: Do something with the observed changes\r\nfunction observerFn (entries) {\r\n  for (const entry of entries) {\r\n    // Do something with entry\r\n  }\r\n}\r\n\r\n// Step 3: Observe the element\r\nconst element = document.querySelector('#some-element')\r\nobserver.observe(element)\r\n\r\n// Step 4 (optional): Disconnect the observer when we're done using it\r\nobserver.disconnect(element)</code></pre>\r\n\r\n\r\n\r\n<p>Since the code is similar, we can also copy-paste the code we wrote for <code>mutationObserver</code> into <code>intersectionObserver</code>. When doing so, we have to remember to pass the options into <code>IntersectionObserver</code> and not the <code>observe</code> method.</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"2,3\"><code markup=\"tt\">export function mutationObserver(node, options = {}) {\r\n  const { callback, ...opts } = options\r\n  const observer = new MutationObserver(observerFn, opts)\r\n  observer.observe(node)\r\n\r\n  function observerFn(entries) {\r\n    for (const entry of entries) {\r\n      // Callback pattern\r\n      if (options.callback) options.callback({ entry, entries, observer })\r\n      // Event listener pattern\r\n      else {\r\n        node.dispatchEvent(\r\n          new CustomEvent('intersect', {\r\n            detail: { entry, entries, observer },\r\n          })\r\n        )\r\n      }\r\n    }\r\n  }\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>Now we can use <code>intersectionObserver</code> with the same easy-to-use API:</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const node = document.querySelector('.some-element')\r\n\r\n// Callback pattern \r\nconst obs = intersectionObserver(node, {\r\n  callback ({ entry, entries }) {\r\n    // Do what you want with each entry\r\n  }\r\n})\r\n\r\n// Event listener pattern\r\nnode.addEventListener('intersect', event => {\r\n  const { entry } = event.detail\r\n  // Do what you want with each entry\r\n})</code></pre>\r\n\r\n\r\n<h4 class=\"wp-block-heading\" id=\"disconnecting-the-intersection-observer\">Disconnecting the Intersection Observer</h4>\r\n\r\n\r\n<p><code>IntersectionObserver</code>‘s methods are a union of both <code>resizeObserver</code> and <code>mutationObserver</code>. It has four methods:</p>\r\n\r\n\r\n\r\n<ul class=\"wp-block-list\">\r\n<li><code>observe</code>: observe an element</li>\r\n\r\n\r\n\r\n<li><code>unobserve</code>: stops observing one element</li>\r\n\r\n\r\n\r\n<li><code>disconnect</code>: stops observing all elements</li>\r\n\r\n\r\n\r\n<li><code>takeRecords</code>: gets unprocessed records</li>\r\n</ul>\r\n\r\n\r\n\r\n<p>So, we can combine the methods we’ve written in <code>resizeObserver</code> and <code>mutationObserver</code> for this one:</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">export function intersectionObserver(node, options = {}) {\r\n  // ...\r\n  return {\r\n    unobserve(node) {\r\n      observer.unobserve(node)\r\n    },\r\n\r\n    disconnect() {\r\n      // Take records before disconnecting.\r\n      const records = observer.takeRecords()\r\n      observer.disconnect()\r\n      if (records.length > 0) observerFn(records)\r\n    },\r\n    \r\n    takeRecords() {\r\n      return observer.takeRecords()\r\n    },\r\n  }\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>Now we can stop observing with the <code>unobserve</code> or <code>disconnect</code> method.</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const node = document.querySelector('.some-element')\r\nconst obs = intersectionObserver(node, /*...*/)\r\n\r\n// Disconnect the observer\r\nobs.disconnect()</code></pre>\r\n\r\n\r\n<h4 class=\"wp-block-heading\" id=\"-intersectionobserver-options\"><code>IntersectionObserver</code> options</h4>\r\n\r\n\r\n<p>In case you were wondering, <code>IntersectionObserver</code> takes in three options:</p>\r\n\r\n\r\n\r\n<ul class=\"wp-block-list\">\r\n<li><code>root</code>: The element used to check if observed elements are visible</li>\r\n\r\n\r\n\r\n<li><code>rootMargin</code>: Lets you specify an offset amount from the edges of the root</li>\r\n\r\n\r\n\r\n<li><code>threshold</code>: Determines when to log an observer entry</li>\r\n</ul>\r\n\r\n\r\n\r\n<p>Here’s an article to help you <a href=\"https://css-tricks.com/an-explanation-of-how-the-intersection-observer-watches/\">understand <code>IntersectionObserver</code> options</a>.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"using-this-in-practice-via-splendid-labz\">Using this in practice via Splendid Labz</h3>\r\n\r\n\r\n<p>Splendid Labz has a <a href=\"https://splendidlabz.com/utils\" rel=\"noopener\"><code>utils</code></a> library that contains <code>resizeObserver</code>, <code>mutationObserver</code> and <code>IntersectionObserver</code>.</p>\r\n\r\n\r\n\r\n<p>You can use them if you don’t want to copy-paste the above snippets into every project.</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import { \r\n  resizeObserver, \r\n  intersectionObserver, \r\n  mutationObserver \r\n} from 'splendidlabz/utils/dom'\r\n\r\nconst mode = document.querySelector(‘some-element’)\r\n\r\nconst resizeObs = resizeObserver(node, /* ... */)\r\nconst intersectObs = intersectionObserver(node, /* ... */)\r\nconst mutateObs = mutationObserver(node, /* ... */)</code></pre>\r\n\r\n\r\n\r\n<p>Aside from the code we’ve written together above (and in the <a href=\"\">previous article</a>), each observer method in Splendid Labz is capable of letting you observe and stop observing multiple elements at once (except <code>mutationObserver</code> because it doesn’t have a <code>unobserve</code> method)</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const items = document.querySelectorAll('.elements')\r\nconst obs = resizeObserver(items, {\r\n  callback ({ entry, entries }) {\r\n    /* Do what you want here */\r\n  }\r\n})\r\n\r\n// Unobserves two items at once\r\nconst subset = [items[0], items[1]]\r\nobs.unobserve(subset)</code></pre>\r\n\r\n\r\n\r\n<p>So it might be just a tad easier to use the functions I’ve already created for you. 😉</p>\r\n\r\n\r\n\r\n<p>Shameless Plug: <a href=\"https://splendidlabz.com\" rel=\"noopener\">Splendid Labz</a> contains a ton of useful utilities — for CSS, JavaScript, Astro, and Svelte — that I have created over the last few years.</p>\r\n\r\n\r\n\r\n<p>I’ve parked them all in into Splendid Labz, so I no longer need to scour the internet for useful functions for most of my web projects. If you take a look, you might just enjoy what I’ve complied!</p>\r\n\r\n\r\n\r\n<p>(I’m still making the docs at the time of writing so it can seem relatively empty. Check back every now and then!)</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"learning-to-refactor-stuff\">Learning to refactor stuff</h3>\r\n\r\n\r\n<p>If you love the way I explained how to refactor the observer APIs, you may find how I teach JavaScript interesting.</p>\r\n\r\n\r\n\r\n<p>In <a href=\"https://learnjavascript.today\" rel=\"noopener\">my JavaScript course</a>, you’ll learn to build 20 real life components. We’ll start off simple, add features, and refactor along the way.</p>\r\n\r\n\r\n\r\n<p>Refactoring is such an important skill to learn — and in here, I make sure you got cement it into your brain.</p>\r\n\r\n\r\n\r\n<p>That’s it! Hope you had fun reading this piece!</p>\r\n<hr />\r\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/a-better-api-for-the-intersection-and-mutation-observers/\">A Better API for the Intersection and Mutation Observers</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&utm_source=css-tricks.com&utm_campaign=family_&utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
    "createdAt": "2025-06-23T13:41:34.000+00:00",
    "link": "https://css-tricks.com/a-better-api-for-the-intersection-and-mutation-observers/",
    "author": "",
    "site": {
      "id": "5",
      "url": "https://css-tricks.com/category/articles/feed",
      "name": "cssTrick"
    }
  },
  {
    "title": "[Korean FE Article] 자바스크립트 개발자를 위한 Go 가이드",
    "content": "<div class=\"captioned-image-container\"><figure><a class=\"image-link image2 is-viewable-img\" target=\"_blank\" href=\"https://substackcdn.com/image/fetch/$s_!1eiO!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F66fdc0f8-e48f-49c4-a8e5-5f3560aa3bbf_1200x627.png\" data-component-name=\"Image2ToDOM\"><div class=\"image2-inset\"><picture><source type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/$s_!1eiO!,w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F66fdc0f8-e48f-49c4-a8e5-5f3560aa3bbf_1200x627.png 424w, https://substackcdn.com/image/fetch/$s_!1eiO!,w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F66fdc0f8-e48f-49c4-a8e5-5f3560aa3bbf_1200x627.png 848w, https://substackcdn.com/image/fetch/$s_!1eiO!,w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F66fdc0f8-e48f-49c4-a8e5-5f3560aa3bbf_1200x627.png 1272w, https://substackcdn.com/image/fetch/$s_!1eiO!,w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F66fdc0f8-e48f-49c4-a8e5-5f3560aa3bbf_1200x627.png 1456w\" sizes=\"100vw\"><img src=\"https://substackcdn.com/image/fetch/$s_!1eiO!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F66fdc0f8-e48f-49c4-a8e5-5f3560aa3bbf_1200x627.png\" width=\"1200\" height=\"627\" data-attrs=\"{\"src\":\"https://substack-post-media.s3.amazonaws.com/public/images/66fdc0f8-e48f-49c4-a8e5-5f3560aa3bbf_1200x627.png\",\"srcNoWatermark\":null,\"fullscreen\":null,\"imageSize\":null,\"height\":627,\"width\":1200,\"resizeWidth\":null,\"bytes\":null,\"alt\":null,\"title\":null,\"type\":null,\"href\":null,\"belowTheFold\":false,\"topImage\":true,\"internalRedirect\":null,\"isProcessing\":false,\"align\":null,\"offset\":false}\" class=\"sizing-normal\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/$s_!1eiO!,w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F66fdc0f8-e48f-49c4-a8e5-5f3560aa3bbf_1200x627.png 424w, https://substackcdn.com/image/fetch/$s_!1eiO!,w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F66fdc0f8-e48f-49c4-a8e5-5f3560aa3bbf_1200x627.png 848w, https://substackcdn.com/image/fetch/$s_!1eiO!,w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F66fdc0f8-e48f-49c4-a8e5-5f3560aa3bbf_1200x627.png 1272w, https://substackcdn.com/image/fetch/$s_!1eiO!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F66fdc0f8-e48f-49c4-a8e5-5f3560aa3bbf_1200x627.png 1456w\" sizes=\"100vw\" fetchpriority=\"high\"></picture><div class=\"image-link-expand\"><div class=\"pencraft pc-display-flex pc-gap-8 pc-reset\"><div class=\"pencraft pc-reset icon-container restack-image\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-refresh-cw\"><path d=\"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\"></path><path d=\"M21 3v5h-5\"></path><path d=\"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\"></path><path d=\"M8 16H3v5\"></path></svg></div><div class=\"pencraft pc-reset icon-container view-image\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-maximize2\"><polyline points=\"15 3 21 3 21 9\"></polyline><polyline points=\"9 21 3 21 3 15\"></polyline><line x1=\"21\" x2=\"14\" y1=\"3\" y2=\"10\"></line><line x1=\"3\" x2=\"10\" y1=\"21\" y2=\"14\"></line></svg></div></div></div></div></a></figure></div><blockquote><p>글 링크: <a href=\"https://emewjin.github.io/go-guide-for-js/\">https://emewjin.github.io/go-guide-for-js/</a></p></blockquote><h2><strong>소개</strong></h2><p>이번에 소개해 드리는 글은 Go라는 아마 한 번쯤은 들어보셨을 언어를 자바스크립트 개발자의 관점에서 이해하기 쉽게 설명해 주는 글입니다. 특히 주로 백엔드 서버를 구축하는 Node.js와의 비교를 비롯해 예제 코드를 직접 실행해볼 수 있는 플레이그라운드 링크가 함께 제공됩니다. 웹 프런트엔드 개발자로서 자바스크립트와 타입스크립트 외에 다른 언어를 접할 일이 많이 없어 아쉬우셨던 분들이라면 읽어보시는 것을 추천드립니다.</p><h2><strong>목차</strong></h2><ul><li><p>기본 사항</p><ul><li><p>컴파일 및 실행</p></li><li><p>패키지</p></li><li><p>변수</p></li><li><p>구조체(Structs)와 타입</p></li><li><p>제로 값</p></li><li><p>포인터</p></li><li><p>함수</p></li></ul></li><li><p>배열과 슬라이스</p></li><li><p>맵</p></li><li><p>비교</p></li><li><p>메서드와 인터페이스</p></li><li><p>인터페이스</p></li><li><p>에러 처리</p></li><li><p>동시성</p></li><li><p>포매팅 및 린팅</p></li><li><p>결론</p></li></ul>",
    "createdAt": "2025-06-23T01:00:34.000+00:00",
    "link": "https://kofearticle.substack.com/p/korean-fe-article-go",
    "author": "",
    "site": {
      "id": "3",
      "url": "https://kofearticle.substack.com/feed",
      "name": "kofearticle"
    }
  },
  {
    "title": "Color Everything in CSS",
    "content": "<p>I have had the opportunity to edit over a lot of the new color entries coming to the <a href=\"https://css-tricks.com/almanac/\">CSS-Tricks Almanac</a>. We’ve already published several with more on the way, including a <a href=\"https://css-tricks.com/css-color-functions/\">complete guide on color functions</a>:</p>\r\n\r\n\r\n\r\n<ul class=\"wp-block-list\">\r\n<li><code><a href=\"https://css-tricks.com/almanac/functions/c/color/\">color()</a></code></li>\r\n\r\n\r\n\r\n<li><code><a href=\"https://css-tricks.com/almanac/functions/h/hsl/\">hsl()</a></code></li>\r\n\r\n\r\n\r\n<li><code><a href=\"https://css-tricks.com/almanac/functions/l/lab/\">lab()</a></code></li>\r\n\r\n\r\n\r\n<li><code><a href=\"https://css-tricks.com/almanac/functions/l/lch/\">lch()</a></code></li>\r\n\r\n\r\n\r\n<li><code><a href=\"https://css-tricks.com/almanac/functions/o/oklab/\">oklab()</a></code></li>\r\n\r\n\r\n\r\n<li><code><a href=\"https://css-tricks.com/almanac/functions/o/oklch/\">oklch()</a></code></li>\r\n\r\n\r\n\r\n<li><code><a href=\"https://css-tricks.com/almanac/functions/r/rgb/\">rgb()</a></code></li>\r\n</ul>\r\n\r\n\r\n\r\n<p>And I must admit: I didn’t know a lot about color in CSS (I still used <code>rgb()</code>, which apparently isn’t what cool people do anymore), so it has been a fun learning experience. One of the things I noticed while trying to keep up with all this new information was how long the glossary of color goes, especially the “color” concepts. There are “color spaces,” “color models,” “color gamuts,” and basically a “color” something for everything.</p>\r\n\r\n\r\n\r\n<p>They are all somewhat related, and it can get confusing as you dig into using color in CSS, especially the new color functions that have been shipped lately, like <code><a href=\"https://css-tricks.com/exploring-the-css-contrast-color-function-a-second-time/\">contrast-color()</a></code> and <code><a href=\"https://css-tricks.com/color-mixing-with-animation-composition/\">color-mix()</a></code>. Hence, I wanted to make the glossary I wish I had when I was hearing for the first time about each concept, and that anyone can check whenever they forget what a specific “color” thing is.</p>\r\n\r\n\r\n\r\n<span id=\"more-386925\"></span>\r\n\r\n\r\n\r\n<p>As a disclaimer, I am not trying to explain color, or specifically, color reproduction, in this post; that would probably be impossible for a mortal like me. Instead, I want to give you a big enough picture for some technicalities behind color in CSS, such that you feel confident using functions like <code><a href=\"https://css-tricks.com/almanac/functions/l/lab/\">lab()</a></code> or <code><a href=\"https://css-tricks.com/almanac/functions/o/oklch/\">oklch()</a></code> while also understanding what makes them special.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"what-s-a-color-\">What’s a color?</h3>\r\n\r\n\r\n<p>Let’s slow down first. In order to understand <em>everything</em> in <em>color</em>, we first need to understand the <em>color</em> in <em>everything</em>.</p>\r\n\r\n\r\n\r\n<p id=\"footnote-1\">While it’s useful to think about an object being a certain color (watch out for the <em>red</em> car, or cut the <em>white</em> cable!), color isn’t a physical property of objects, or even a tangible thing. Yes, we can characterize <em>light</em> as the main cause of color<sup><a href=\"#note-1\">1</a></sup>, but it isn’t until visible light enters our eyes and is interpreted by our brains that we perceive a color. As said by <a href=\"https://ninedegreesbelow.com/photography/xyz-rgb.html\" rel=\"noopener\">Elle Stone</a>:</p>\r\n\r\n\r\n\r\n<blockquote class=\"wp-block-quote is-layout-flow wp-block-quote-is-layout-flow\">\r\n<p>Light waves are out there in the world, but color happens in the interaction between light waves and the eye, brain, and mind.</p>\r\n</blockquote>\r\n\r\n\r\n\r\n<p>Even if color isn’t a physical thing, we still want to replicate it as reliably as possible, especially in the digital era. If we take a photo of a beautiful bouquet of lilies (like the one on my desk) and then display it on a screen, we expect to see the same colors in both the image and reality. However, “reality” here is a misleading term since, once again, the <em>reality</em> of color depends on the viewer. To solve this, we need to understand how light wavelengths (something measurable and replicable) create different color responses in viewers (something not so measurable).</p>\r\n\r\n\r\n\r\n<p>Luckily, this task was already carried out 95 years ago by the International Commission on Illumination (CIE, by its French name). I wish I could get into the details of the experiment, but we haven’t gotten into our first color thingie yet. What’s important is that from these measurements, the CIE was able to map all the colors visible to the average human (in the experiment) to light wavelengths and describe them with only three values.</p>\r\n\r\n\r\n\r\n<p id=\"footnote-2\">Initially, those three primary values corresponded to the red, green, and blue wavelengths used in the experiment, and they made up the CIERGB <em>Color Space</em>, but researchers noticed that some colors required a negative wavelength<sup><a href=\"#note-2\" data-type=\"internal\" data-id=\"#note-2\">2</a></sup> to represent a visible color. To avoid that, a series of transformations were performed on the original CIERGB and the resulting color space was called CIEXYZ.</p>\r\n\r\n\r\n\r\n<p>This new color space also has three values, X and Z represent the chromaticity of a color, while Y represents its luminance. Since it has three axes, it makes a 3D shape, but if we slice it such that its luminance is the same, we get all the visible colors for a given luminance in a figure you have probably seen before.</p>\r\n\r\n\r\n\r\n<figure class=\"wp-block-image size-full\"><img data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"742\" height=\"789\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-1.png?resize=742%2C789&ssl=1\" alt=\"xy chromaticitydiagram showing all visible colors \" class=\"wp-image-386928\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-1.png?w=742&ssl=1 742w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-1.png?resize=282%2C300&ssl=1 282w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\" /></figure>\r\n\r\n\r\n\r\n<p>This is called the <em>xy chromaticity</em> diagram and holds <em>all</em> the colors visible by the average human eye (based on the average viewer in the CIE 1931 experiment). Colors inside the shape are considered real, while those outside are deemed imaginary.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"color-spaces\">Color Spaces</h3>\r\n\r\n\r\n<p>The purpose of the last explanation was to reach the CIEXYZ Color Space concept, but what exactly is a “color space”? And why is the CIEXYZ <em>Color Space</em> so important?</p>\r\n\r\n\r\n\r\n<p>The CIEXYZ Color Space is a mapping from all the colors visible by the average human eye into a 3D coordinate system, so we only need three values to define a color. Then, a <strong>color space can be thought of as a general mapping of color</strong>, with no need to include every visible color, and it is usually defined through three values as well.</p>\r\n\r\n\r\n<h4 class=\"wp-block-heading\" id=\"rgb-color-spaces\">RGB Color Spaces</h4>\r\n\r\n\r\n<p>The most well-known color spaces are the RGB color spaces (note the plural). As you may guess from the name, here we only need the amount of red, green, and blue to describe a color. And to describe an RGB color space, we only need to define its “reddest”, “greenest”, and “bluest” values<sup id=\"footnote-3\"><a href=\"#note-3\">3</a></sup>. If we use coordinates going from 0 to 1 to define a color in the RGB color space, then:</p>\r\n\r\n\r\n\r\n<ul class=\"wp-block-list\">\r\n<li><code>(1, 0, 0)</code> means the reddest color.</li>\r\n\r\n\r\n\r\n<li><code>(0, 1, 0)</code> means the greenest color.</li>\r\n\r\n\r\n\r\n<li><code>(0, 0, 1)</code> means the bluest color.</li>\r\n</ul>\r\n\r\n\r\n\r\n<p>However, “reddest”, “bluest”, and “greenest” are only arbitrary descriptions of color. What makes a color the “bluest” is up to each person. For example, which of the following colors do you think is the bluest?</p>\r\n\r\n\r\n\r\n<figure class=\"wp-block-image size-large is-resized\"><img data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"1024\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-1-1-1024x1024.png?resize=1024%2C1024&ssl=1\" alt=\"Different shades of blue\" class=\"wp-image-386929\" style=\"object-fit:cover;width:300px;height:300px\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-1-1.png?resize=1024%2C1024&ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-1-1.png?resize=300%2C300&ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-1-1.png?resize=150%2C150&ssl=1 150w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-1-1.png?resize=768%2C768&ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-1-1.png?w=1200&ssl=1 1200w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\" /></figure>\r\n\r\n\r\n\r\n<p>As you can guess, something like “bluest” is an appalling description. Luckily, we just have to look back at the CIEXYZ color space — it’s pretty useful! Here, we can define what we consider the reddest, greenest, and bluest colors just as coordinates inside the xy chromaticity diagram. That’s all it takes to create an RGB color space, and why there are so many!</p>\r\n\r\n\r\n\r\n<figure class=\"wp-block-image size-full\"><img data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"768\" height=\"583\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-2.png?resize=768%2C583&ssl=1\" alt=\"sRGV and WideGamutRGB in the xy chromaticity diagram\" class=\"wp-image-386930\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-2.png?w=768&ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-2.png?resize=300%2C228&ssl=1 300w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\" /><figcaption class=\"wp-element-caption\">Credit: <a href=\"https://ninedegreesbelow.com/\" rel=\"noopener\">Elle Stone</a></figcaption></figure>\r\n\r\n\r\n\r\n<p>In CSS, the most used color space is the standard RGB (sRGB) color space, which, as you can see in the last image, leaves a lot of colors out. However, in CSS, we can use modern RGB color spaces with a lot more colors through the <a href=\"https://css-tricks.com/almanac/functions/c/color/\"><code>color()</code></a> function, such as <code>display-p3</code>, <code>prophoto-rgb</code>, and <code>rec2020</code>.</p>\r\n\r\n\r\n\r\n<figure class=\"wp-block-image size-full\"><img data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"1473\" height=\"1194\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-7.png?resize=1473%2C1194&ssl=1\" alt=\"Comparing the shapes of various color spaces, including sRGB, Display P3, A98-RGB, Rec2020, and ProPhoto.\" class=\"wp-image-386931\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-7.png?w=1473&ssl=1 1473w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-7.png?resize=300%2C243&ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-7.png?resize=1024%2C830&ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-7.png?resize=768%2C623&ssl=1 768w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\" /><figcaption class=\"wp-element-caption\">Credit: Chrome Developer Team</figcaption></figure>\r\n\r\n\r\n\r\n<p class=\"is-style-explanation\">Notice how the ProPhoto RGB color space goes out of the visible color. This is okay. Colors outside are clamped; they aren’t new or invisible colors.</p>\r\n\r\n\r\n\r\n<p>In CSS, besides sRGB, we have two more color spaces: the CIELAB color space and the Oklab color space. Luckily, once we understood what the CIEXYZ color space is, then these two should be simpler to understand. Let’s dig into that next.</p>\r\n\r\n\r\n<h4 class=\"wp-block-heading\" id=\"cielab-and-oklab-color-spaces\">CIELAB and Oklab Color Spaces</h4>\r\n\r\n\r\n<p>As we saw before, the sRGB color space lacks many of the colors visible by the average human eye. And as modern screens got better at displaying more colors, CSS needed to adopt newer color spaces to fully take advantage of those newer displays. That wasn’t the only problem with sRGB — it also lacks perceptual uniformity, meaning that changes in the color’s chromaticity also change its perceived lightness. Check, for example, this <a href=\"https://developer.chrome.com/docs/css-ui/high-definition-css-color-guide#overview\" rel=\"noopener\">demo by Adam Argyle</a>:</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_poZgXxy\" src=\"//codepen.io/anon/embed/preview/poZgXxy?height=950&theme-id=1&slug-hash=poZgXxy&default-tab=result\" height=\"950\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed poZgXxy\" title=\"CodePen Embed poZgXxy\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>Created in 1976 by the CIE, CIELAB, derived from CIEXYZ, also encompasses all the colors visible by the human eye. It works with three coordinates: L for perceptual lightness, a for the amount of red-green, and b* for the amount of yellow-blue in the color.</p>\r\n\r\n\r\n\r\n<figure class=\"wp-block-image size-full\"><img data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"726\" height=\"450\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/Lab-color-space.jpg?resize=726%2C450&ssl=1\" alt=\"A diagram in the shape of a sphere containing a range of colors that go from white to black vertically and green to blue to yellow to red horizontally.\" class=\"wp-image-386933\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/Lab-color-space.jpg?w=726&ssl=1 726w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/Lab-color-space.jpg?resize=300%2C186&ssl=1 300w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\" /><figcaption class=\"wp-element-caption\">Credit: Linshang Technology</figcaption></figure>\r\n\r\n\r\n\r\n<p>It has a way better perceptual uniformity than sRGB, but it still isn’t completely uniform, especially in gradients involving blue. For example, in the following white-to-blue gradient, CIELAB shifts towards purple.</p>\r\n\r\n\r\n\r\n<figure class=\"wp-block-image size-full\"><img data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"592\" height=\"192\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-6.png?resize=592%2C192&ssl=1\" alt=\"Comparing blue gradients in Oklahoma and CIELAB. The CIELAB gradients contains shades of purple.\" class=\"wp-image-386932\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-6.png?w=592&ssl=1 592w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-6.png?resize=300%2C97&ssl=1 300w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\" /><figcaption class=\"wp-element-caption\">Image Credits to <a href=\"https://bottosson.github.io/\" rel=\"noopener\">Björn Ottosson</a></figcaption></figure>\r\n\r\n\r\n\r\n<p>As a final improvement, <a href=\"https://bottosson.github.io/posts/oklab/\" rel=\"noopener\">Björn Ottosson</a> came up with the Oklab color space, which also holds all colors visible by the human eye while keeping a better perceptual uniformity. Oklab also uses the three <code>L*a*b*</code> coordinates. Thanks to all these improvements, it is the color space I try to use the most lately.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"color-models\">Color Models</h3>\r\n\r\n\r\n<p>When I was learning about these concepts, my biggest challenge after understanding color spaces was not getting them confused with color models and color gamuts. These two concepts, while complementary and closely related to color spaces, aren’t the same, so they are a common pitfall when learning about color.</p>\r\n\r\n\r\n\r\n<p>A <strong><dfn>color model</dfn></strong> refers to the mathematical description of color through tuples of numbers, usually involving three numbers, but these values don’t give us an exact color until we pair them with a color space. For example, you know that in the RGB color model, we define color through three values: red, green, and blue. However, it isn’t until we match it to an RGB color space (e.g., sRGB with display-p3) that we have a color. In this sense, a color space can have several color models, like sRGB, which uses RGB, HSL, and HWB. At the same time, a color model can be used in several color spaces.</p>\r\n\r\n\r\n\r\n<p>I found plenty of articles and tutorials where “color spaces” and “color models” were used interchangeably. And some places were they had a different definition of color spaces and models than the one provided here. For example, Chrome’s <a href=\"https://developer.chrome.com/docs/css-ui/high-definition-css-color-guide#what_is_a_color_space\" rel=\"noopener\">High definition CSS color guide</a> defines CSS’s RGB and HSL as different color spaces, while MDN’s <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Color_space#rgb_color_spaces\" rel=\"noopener\">Color Space entry</a> does define RGB and HSL as part of the sRGB color space.</p>\r\n\r\n\r\n\r\n<p>Personally, in CSS, I find it easier to understand the idea of RGB, HSL and HWB as different models to access the sRGB color space.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"color-gamuts\">Color Gamuts</h3>\r\n\r\n\r\n<p>A <strong><dfn>color gamut</dfn></strong> is more straightforward to explain. You may have noticed how we have talked about a color space having more colors than another, but it would be more correct to say it has a “wider” gamut, since a color gamut is the range of colors available in a color space. However, a color gamut isn’t only restricted by color space boundaries, but also by physical limitations. For example, an older screen may decrease the color gamut since it isn’t able to display each color available in a given color space. In this case where a color can’t be represented (due to physical limitation or being outside the color space itself), it’s said to be “out of gamut”.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"color-functions\">Color Functions</h3>\r\n\r\n\r\n<p>In CSS, the only color space available used to be sRGB. Nowadays, we can work with a lot of modern color spaces through their respective color functions. As a quick reference, each of the color spaces in CSS uses the following functions:</p>\r\n\r\n\r\n\r\n<ul class=\"wp-block-list\">\r\n<li><strong>sRGB:</strong> We can work in sRGB using the ol’ hexadecimal notation, named colors, and the <code>rgb()</code>, <code>rgba()</code>, <code>hsl()</code>, <code>hsla()</code> and <code>hwb()</code> functions.</li>\r\n\r\n\r\n\r\n<li><strong>CIELAB:</strong> Here we have the <code>lab()</code> for Cartesian coordinates and <code>lch()</code> for polar coordinates.</li>\r\n\r\n\r\n\r\n<li><strong>Oklab:</strong> Similar to CIELAB, we have <code>oklab()</code> for Cartesian coordinates and <code>oklch()</code> for polar coordinates.</li>\r\n\r\n\r\n\r\n<li><strong>More through the <code>color()</code> and <code>color-mix()</code>.</strong> Outside these three color spaces, we can use many more using the <code>color()</code> and <code>color-mix()</code> functions. Specifically, we can use the RGB color spaces: <code>rgb-linear</code>, <code>display-p3</code>, <code>a98-rgb</code>, <code>prophoto-rgb</code>, <code>rec2020</code> and the XYZ color space: <code>xyz</code>, <code>xyz-d50</code>, or <code>xyz-d65</code>.</li>\r\n</ul>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"tl-dr\">TL;DR</h3>\r\n\r\n\r\n<ol class=\"wp-block-list\">\r\n<li><strong>Color spaces</strong> are a mapping between available colors and a coordinate system. In CSS, we have three main color spaces: sRGB, CIELAB, and Oklab, but many more are accessible through the <code>color()</code> function.</li>\r\n\r\n\r\n\r\n<li><strong>Color models</strong> define color with tuples of numbers, but they don’t give us information about the actual color until we pair them with a color space. For example, the RGB model doesn’t mean anything until we assign it an RGB color space.</li>\r\n\r\n\r\n\r\n<li>Most of the time, we want to talk about how many colors a color space holds, so we use the term <strong>color gamut</strong> for the task. However, a color gamut is also tied to the physical limitations of a camera/display. A color may be out-of-gamut, meaning it can’t be represented in a given color space.</li>\r\n\r\n\r\n\r\n<li>In CSS, <strong>we can access all these color spaces through color functions</strong>, of which there are many.</li>\r\n\r\n\r\n\r\n<li>The <strong>CIEXYZ color space</strong> is extremely useful to define other color spaces, describe their gamuts, and convert between them.</li>\r\n</ol>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"references\">References</h3>\r\n\r\n\r\n<ul class=\"wp-block-list\">\r\n<li><a href=\"https://ninedegreesbelow.com/photography/xyz-rgb.html\" rel=\"noopener\">Completely Painless Programmer’s Guide to XYZ, RGB, ICC, xyY, and TRCs</a> (Elle Stone)</li>\r\n\r\n\r\n\r\n<li><a href=\"https://ciechanow.ski/color-spaces/\" rel=\"noopener\">Color Spaces</a> (Bartosz Ciechanowski)</li>\r\n\r\n\r\n\r\n<li><a href=\"http://dougkerr.net/Pumpkin/articles/CIE_XYZ.pdf\" rel=\"noopener\">The CIE XYZ and xyY Color Spaces</a>(Douglas A. Kerr)</li>\r\n\r\n\r\n\r\n<li><a href=\"https://bottosson.github.io/posts/oklab/\" rel=\"noopener\">From personal project to industry standard</a> (Björn Ottosson)</li>\r\n\r\n\r\n\r\n<li><a href=\"https://developer.chrome.com/docs/css-ui/high-definition-css-color-guide\" rel=\"noopener\">High definition CSS color guide</a> (Adam Argyle)</li>\r\n\r\n\r\n\r\n<li><a href=\"https://www.youtube.com/watch?v=99v96TL-tuY\" rel=\"noopener\">Color Spaces: Explained from the Ground Up</a> (Video Tech Explained)</li>\r\n\r\n\r\n\r\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Color_space\" rel=\"noopener\">Color Space</a> (MDN)</li>\r\n\r\n\r\n\r\n<li><a href=\"https://ninedegreesbelow.com/photography/well-behaved-profile.html\" rel=\"noopener\">What Makes a Color Space Well Behaved?</a> (Elle Stone)</li>\r\n</ul>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"footnotes\">Footnotes</h3>\r\n\r\n\r\n<p><sup id=\"note-1\">1</sup> Light is the main cause of color, but color can be created by things other than light. For example, rubbing your closed eyes mechanically stimulates your retina, creating color in what’s <a href=\"https://en.wikipedia.org/wiki/Phosphene\" rel=\"noopener\">called phosphene</a>. <a href=\"#footnote-1\">⤴️</a></p>\r\n\r\n\r\n\r\n<p><sup id=\"note-2\">2</sup> If <em>negative light</em> also makes you scratch your head, and for more info on how the CIEXYZ color space was created, I highly recommend Douglas A. Kerr <a href=\"http://dougkerr.net/Pumpkin/articles/CIE_XYZ.pdf\" rel=\"noopener\"><em>The CIE XYZ and xyY Color Spaces</em></a> paper. <a href=\"#footnote-2\">⤴️</a></p>\r\n\r\n\r\n\r\n<p><sup id=\"note-3\">3</sup> We also need to define the darkest dark color (“black”) and the lightest light color (“white”). However, for <a href=\"https://ninedegreesbelow.com/photography/well-behaved-profile.html\" rel=\"noopener\">well-behaved</a> color spaces, these two can be abstracted from the reddest, blues, and greenest colors. <a href=\"#footnote-3\">⤴️</a></p>\r\n<hr />\r\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/color-everything-in-css/\">Color Everything in CSS</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&utm_source=css-tricks.com&utm_campaign=family_&utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
    "createdAt": "2025-06-20T14:04:12.000+00:00",
    "link": "https://css-tricks.com/color-everything-in-css/",
    "author": "",
    "site": {
      "id": "4",
      "url": "https://css-tricks.com/category/articles/feed",
      "name": "cssTrick"
    }
  },
  {
    "title": "Color Everything in CSS",
    "content": "<p>I have had the opportunity to edit over a lot of the new color entries coming to the <a href=\"https://css-tricks.com/almanac/\">CSS-Tricks Almanac</a>. We’ve already published several with more on the way, including a <a href=\"https://css-tricks.com/css-color-functions/\">complete guide on color functions</a>:</p>\r\n\r\n\r\n\r\n<ul class=\"wp-block-list\">\r\n<li><code><a href=\"https://css-tricks.com/almanac/functions/c/color/\">color()</a></code></li>\r\n\r\n\r\n\r\n<li><code><a href=\"https://css-tricks.com/almanac/functions/h/hsl/\">hsl()</a></code></li>\r\n\r\n\r\n\r\n<li><code><a href=\"https://css-tricks.com/almanac/functions/l/lab/\">lab()</a></code></li>\r\n\r\n\r\n\r\n<li><code><a href=\"https://css-tricks.com/almanac/functions/l/lch/\">lch()</a></code></li>\r\n\r\n\r\n\r\n<li><code><a href=\"https://css-tricks.com/almanac/functions/o/oklab/\">oklab()</a></code></li>\r\n\r\n\r\n\r\n<li><code><a href=\"https://css-tricks.com/almanac/functions/o/oklch/\">oklch()</a></code></li>\r\n\r\n\r\n\r\n<li><code><a href=\"https://css-tricks.com/almanac/functions/r/rgb/\">rgb()</a></code></li>\r\n</ul>\r\n\r\n\r\n\r\n<p>And I must admit: I didn’t know a lot about color in CSS (I still used <code>rgb()</code>, which apparently isn’t what cool people do anymore), so it has been a fun learning experience. One of the things I noticed while trying to keep up with all this new information was how long the glossary of color goes, especially the “color” concepts. There are “color spaces,” “color models,” “color gamuts,” and basically a “color” something for everything.</p>\r\n\r\n\r\n\r\n<p>They are all somewhat related, and it can get confusing as you dig into using color in CSS, especially the new color functions that have been shipped lately, like <code><a href=\"https://css-tricks.com/exploring-the-css-contrast-color-function-a-second-time/\">contrast-color()</a></code> and <code><a href=\"https://css-tricks.com/color-mixing-with-animation-composition/\">color-mix()</a></code>. Hence, I wanted to make the glossary I wish I had when I was hearing for the first time about each concept, and that anyone can check whenever they forget what a specific “color” thing is.</p>\r\n\r\n\r\n\r\n<span id=\"more-386925\"></span>\r\n\r\n\r\n\r\n<p>As a disclaimer, I am not trying to explain color, or specifically, color reproduction, in this post; that would probably be impossible for a mortal like me. Instead, I want to give you a big enough picture for some technicalities behind color in CSS, such that you feel confident using functions like <code><a href=\"https://css-tricks.com/almanac/functions/l/lab/\">lab()</a></code> or <code><a href=\"https://css-tricks.com/almanac/functions/o/oklch/\">oklch()</a></code> while also understanding what makes them special.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"what-s-a-color-\">What’s a color?</h3>\r\n\r\n\r\n<p>Let’s slow down first. In order to understand <em>everything</em> in <em>color</em>, we first need to understand the <em>color</em> in <em>everything</em>.</p>\r\n\r\n\r\n\r\n<p id=\"footnote-1\">While it’s useful to think about an object being a certain color (watch out for the <em>red</em> car, or cut the <em>white</em> cable!), color isn’t a physical property of objects, or even a tangible thing. Yes, we can characterize <em>light</em> as the main cause of color<sup><a href=\"#note-1\">1</a></sup>, but it isn’t until visible light enters our eyes and is interpreted by our brains that we perceive a color. As said by <a href=\"https://ninedegreesbelow.com/photography/xyz-rgb.html\" rel=\"noopener\">Elle Stone</a>:</p>\r\n\r\n\r\n\r\n<blockquote class=\"wp-block-quote is-layout-flow wp-block-quote-is-layout-flow\">\r\n<p>Light waves are out there in the world, but color happens in the interaction between light waves and the eye, brain, and mind.</p>\r\n</blockquote>\r\n\r\n\r\n\r\n<p>Even if color isn’t a physical thing, we still want to replicate it as reliably as possible, especially in the digital era. If we take a photo of a beautiful bouquet of lilies (like the one on my desk) and then display it on a screen, we expect to see the same colors in both the image and reality. However, “reality” here is a misleading term since, once again, the <em>reality</em> of color depends on the viewer. To solve this, we need to understand how light wavelengths (something measurable and replicable) create different color responses in viewers (something not so measurable).</p>\r\n\r\n\r\n\r\n<p>Luckily, this task was already carried out 95 years ago by the International Commission on Illumination (CIE, by its French name). I wish I could get into the details of the experiment, but we haven’t gotten into our first color thingie yet. What’s important is that from these measurements, the CIE was able to map all the colors visible to the average human (in the experiment) to light wavelengths and describe them with only three values.</p>\r\n\r\n\r\n\r\n<p id=\"footnote-2\">Initially, those three primary values corresponded to the red, green, and blue wavelengths used in the experiment, and they made up the CIERGB <em>Color Space</em>, but researchers noticed that some colors required a negative wavelength<sup><a href=\"#note-2\" data-type=\"internal\" data-id=\"#note-2\">2</a></sup> to represent a visible color. To avoid that, a series of transformations were performed on the original CIERGB and the resulting color space was called CIEXYZ.</p>\r\n\r\n\r\n\r\n<p>This new color space also has three values, X and Z represent the chromaticity of a color, while Y represents its luminance. Since it has three axes, it makes a 3D shape, but if we slice it such that its luminance is the same, we get all the visible colors for a given luminance in a figure you have probably seen before.</p>\r\n\r\n\r\n\r\n<figure class=\"wp-block-image size-full\"><img data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"742\" height=\"789\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-1.png?resize=742%2C789&ssl=1\" alt=\"xy chromaticitydiagram showing all visible colors \" class=\"wp-image-386928\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-1.png?w=742&ssl=1 742w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-1.png?resize=282%2C300&ssl=1 282w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\" /></figure>\r\n\r\n\r\n\r\n<p>This is called the <em>xy chromaticity</em> diagram and holds <em>all</em> the colors visible by the average human eye (based on the average viewer in the CIE 1931 experiment). Colors inside the shape are considered real, while those outside are deemed imaginary.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"color-spaces\">Color Spaces</h3>\r\n\r\n\r\n<p>The purpose of the last explanation was to reach the CIEXYZ Color Space concept, but what exactly is a “color space”? And why is the CIEXYZ <em>Color Space</em> so important?</p>\r\n\r\n\r\n\r\n<p>The CIEXYZ Color Space is a mapping from all the colors visible by the average human eye into a 3D coordinate system, so we only need three values to define a color. Then, a <strong>color space can be thought of as a general mapping of color</strong>, with no need to include every visible color, and it is usually defined through three values as well.</p>\r\n\r\n\r\n<h4 class=\"wp-block-heading\" id=\"rgb-color-spaces\">RGB Color Spaces</h4>\r\n\r\n\r\n<p>The most well-known color spaces are the RGB color spaces (note the plural). As you may guess from the name, here we only need the amount of red, green, and blue to describe a color. And to describe an RGB color space, we only need to define its “reddest”, “greenest”, and “bluest” values<sup id=\"footnote-3\"><a href=\"#note-3\">3</a></sup>. If we use coordinates going from 0 to 1 to define a color in the RGB color space, then:</p>\r\n\r\n\r\n\r\n<ul class=\"wp-block-list\">\r\n<li><code>(1, 0, 0)</code> means the reddest color.</li>\r\n\r\n\r\n\r\n<li><code>(0, 1, 0)</code> means the greenest color.</li>\r\n\r\n\r\n\r\n<li><code>(0, 0, 1)</code> means the bluest color.</li>\r\n</ul>\r\n\r\n\r\n\r\n<p>However, “reddest”, “bluest”, and “greenest” are only arbitrary descriptions of color. What makes a color the “bluest” is up to each person. For example, which of the following colors do you think is the bluest?</p>\r\n\r\n\r\n\r\n<figure class=\"wp-block-image size-large is-resized\"><img data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"1024\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-1-1-1024x1024.png?resize=1024%2C1024&ssl=1\" alt=\"Different shades of blue\" class=\"wp-image-386929\" style=\"object-fit:cover;width:300px;height:300px\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-1-1.png?resize=1024%2C1024&ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-1-1.png?resize=300%2C300&ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-1-1.png?resize=150%2C150&ssl=1 150w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-1-1.png?resize=768%2C768&ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-1-1.png?w=1200&ssl=1 1200w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\" /></figure>\r\n\r\n\r\n\r\n<p>As you can guess, something like “bluest” is an appalling description. Luckily, we just have to look back at the CIEXYZ color space — it’s pretty useful! Here, we can define what we consider the reddest, greenest, and bluest colors just as coordinates inside the xy chromaticity diagram. That’s all it takes to create an RGB color space, and why there are so many!</p>\r\n\r\n\r\n\r\n<figure class=\"wp-block-image size-full\"><img data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"768\" height=\"583\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-2.png?resize=768%2C583&ssl=1\" alt=\"sRGV and WideGamutRGB in the xy chromaticity diagram\" class=\"wp-image-386930\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-2.png?w=768&ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-2.png?resize=300%2C228&ssl=1 300w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\" /><figcaption class=\"wp-element-caption\">Credit: <a href=\"https://ninedegreesbelow.com/\" rel=\"noopener\">Elle Stone</a></figcaption></figure>\r\n\r\n\r\n\r\n<p>In CSS, the most used color space is the standard RGB (sRGB) color space, which, as you can see in the last image, leaves a lot of colors out. However, in CSS, we can use modern RGB color spaces with a lot more colors through the <a href=\"https://css-tricks.com/almanac/functions/c/color/\"><code>color()</code></a> function, such as <code>display-p3</code>, <code>prophoto-rgb</code>, and <code>rec2020</code>.</p>\r\n\r\n\r\n\r\n<figure class=\"wp-block-image size-full\"><img data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"1473\" height=\"1194\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-7.png?resize=1473%2C1194&ssl=1\" alt=\"Comparing the shapes of various color spaces, including sRGB, Display P3, A98-RGB, Rec2020, and ProPhoto.\" class=\"wp-image-386931\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-7.png?w=1473&ssl=1 1473w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-7.png?resize=300%2C243&ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-7.png?resize=1024%2C830&ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-7.png?resize=768%2C623&ssl=1 768w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\" /><figcaption class=\"wp-element-caption\">Credit: Chrome Developer Team</figcaption></figure>\r\n\r\n\r\n\r\n<p class=\"is-style-explanation\">Notice how the ProPhoto RGB color space goes out of the visible color. This is okay. Colors outside are clamped; they aren’t new or invisible colors.</p>\r\n\r\n\r\n\r\n<p>In CSS, besides sRGB, we have two more color spaces: the CIELAB color space and the Oklab color space. Luckily, once we understood what the CIEXYZ color space is, then these two should be simpler to understand. Let’s dig into that next.</p>\r\n\r\n\r\n<h4 class=\"wp-block-heading\" id=\"cielab-and-oklab-color-spaces\">CIELAB and Oklab Color Spaces</h4>\r\n\r\n\r\n<p>As we saw before, the sRGB color space lacks many of the colors visible by the average human eye. And as modern screens got better at displaying more colors, CSS needed to adopt newer color spaces to fully take advantage of those newer displays. That wasn’t the only problem with sRGB — it also lacks perceptual uniformity, meaning that changes in the color’s chromaticity also change its perceived lightness. Check, for example, this <a href=\"https://developer.chrome.com/docs/css-ui/high-definition-css-color-guide#overview\" rel=\"noopener\">demo by Adam Argyle</a>:</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_poZgXxy\" src=\"//codepen.io/anon/embed/preview/poZgXxy?height=950&theme-id=1&slug-hash=poZgXxy&default-tab=result\" height=\"950\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed poZgXxy\" title=\"CodePen Embed poZgXxy\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>Created in 1976 by the CIE, CIELAB, derived from CIEXYZ, also encompasses all the colors visible by the human eye. It works with three coordinates: L for perceptual lightness, a for the amount of red-green, and b* for the amount of yellow-blue in the color.</p>\r\n\r\n\r\n\r\n<figure class=\"wp-block-image size-full\"><img data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"726\" height=\"450\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/Lab-color-space.jpg?resize=726%2C450&ssl=1\" alt=\"A diagram in the shape of a sphere containing a range of colors that go from white to black vertically and green to blue to yellow to red horizontally.\" class=\"wp-image-386933\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/Lab-color-space.jpg?w=726&ssl=1 726w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/Lab-color-space.jpg?resize=300%2C186&ssl=1 300w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\" /><figcaption class=\"wp-element-caption\">Credit: Linshang Technology</figcaption></figure>\r\n\r\n\r\n\r\n<p>It has a way better perceptual uniformity than sRGB, but it still isn’t completely uniform, especially in gradients involving blue. For example, in the following white-to-blue gradient, CIELAB shifts towards purple.</p>\r\n\r\n\r\n\r\n<figure class=\"wp-block-image size-full\"><img data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"592\" height=\"192\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-6.png?resize=592%2C192&ssl=1\" alt=\"Comparing blue gradients in Oklahoma and CIELAB. The CIELAB gradients contains shades of purple.\" class=\"wp-image-386932\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-6.png?w=592&ssl=1 592w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-6.png?resize=300%2C97&ssl=1 300w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\" /><figcaption class=\"wp-element-caption\">Image Credits to <a href=\"https://bottosson.github.io/\" rel=\"noopener\">Björn Ottosson</a></figcaption></figure>\r\n\r\n\r\n\r\n<p>As a final improvement, <a href=\"https://bottosson.github.io/posts/oklab/\" rel=\"noopener\">Björn Ottosson</a> came up with the Oklab color space, which also holds all colors visible by the human eye while keeping a better perceptual uniformity. Oklab also uses the three <code>L*a*b*</code> coordinates. Thanks to all these improvements, it is the color space I try to use the most lately.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"color-models\">Color Models</h3>\r\n\r\n\r\n<p>When I was learning about these concepts, my biggest challenge after understanding color spaces was not getting them confused with color models and color gamuts. These two concepts, while complementary and closely related to color spaces, aren’t the same, so they are a common pitfall when learning about color.</p>\r\n\r\n\r\n\r\n<p>A <strong><dfn>color model</dfn></strong> refers to the mathematical description of color through tuples of numbers, usually involving three numbers, but these values don’t give us an exact color until we pair them with a color space. For example, you know that in the RGB color model, we define color through three values: red, green, and blue. However, it isn’t until we match it to an RGB color space (e.g., sRGB with display-p3) that we have a color. In this sense, a color space can have several color models, like sRGB, which uses RGB, HSL, and HWB. At the same time, a color model can be used in several color spaces.</p>\r\n\r\n\r\n\r\n<p>I found plenty of articles and tutorials where “color spaces” and “color models” were used interchangeably. And some places were they had a different definition of color spaces and models than the one provided here. For example, Chrome’s <a href=\"https://developer.chrome.com/docs/css-ui/high-definition-css-color-guide#what_is_a_color_space\" rel=\"noopener\">High definition CSS color guide</a> defines CSS’s RGB and HSL as different color spaces, while MDN’s <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Color_space#rgb_color_spaces\" rel=\"noopener\">Color Space entry</a> does define RGB and HSL as part of the sRGB color space.</p>\r\n\r\n\r\n\r\n<p>Personally, in CSS, I find it easier to understand the idea of RGB, HSL and HWB as different models to access the sRGB color space.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"color-gamuts\">Color Gamuts</h3>\r\n\r\n\r\n<p>A <strong><dfn>color gamut</dfn></strong> is more straightforward to explain. You may have noticed how we have talked about a color space having more colors than another, but it would be more correct to say it has a “wider” gamut, since a color gamut is the range of colors available in a color space. However, a color gamut isn’t only restricted by color space boundaries, but also by physical limitations. For example, an older screen may decrease the color gamut since it isn’t able to display each color available in a given color space. In this case where a color can’t be represented (due to physical limitation or being outside the color space itself), it’s said to be “out of gamut”.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"color-functions\">Color Functions</h3>\r\n\r\n\r\n<p>In CSS, the only color space available used to be sRGB. Nowadays, we can work with a lot of modern color spaces through their respective color functions. As a quick reference, each of the color spaces in CSS uses the following functions:</p>\r\n\r\n\r\n\r\n<ul class=\"wp-block-list\">\r\n<li><strong>sRGB:</strong> We can work in sRGB using the ol’ hexadecimal notation, named colors, and the <code>rgb()</code>, <code>rgba()</code>, <code>hsl()</code>, <code>hsla()</code> and <code>hwb()</code> functions.</li>\r\n\r\n\r\n\r\n<li><strong>CIELAB:</strong> Here we have the <code>lab()</code> for Cartesian coordinates and <code>lch()</code> for polar coordinates.</li>\r\n\r\n\r\n\r\n<li><strong>Oklab:</strong> Similar to CIELAB, we have <code>oklab()</code> for Cartesian coordinates and <code>oklch()</code> for polar coordinates.</li>\r\n\r\n\r\n\r\n<li><strong>More through the <code>color()</code> and <code>color-mix()</code>.</strong> Outside these three color spaces, we can use many more using the <code>color()</code> and <code>color-mix()</code> functions. Specifically, we can use the RGB color spaces: <code>rgb-linear</code>, <code>display-p3</code>, <code>a98-rgb</code>, <code>prophoto-rgb</code>, <code>rec2020</code> and the XYZ color space: <code>xyz</code>, <code>xyz-d50</code>, or <code>xyz-d65</code>.</li>\r\n</ul>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"tl-dr\">TL;DR</h3>\r\n\r\n\r\n<ol class=\"wp-block-list\">\r\n<li><strong>Color spaces</strong> are a mapping between available colors and a coordinate system. In CSS, we have three main color spaces: sRGB, CIELAB, and Oklab, but many more are accessible through the <code>color()</code> function.</li>\r\n\r\n\r\n\r\n<li><strong>Color models</strong> define color with tuples of numbers, but they don’t give us information about the actual color until we pair them with a color space. For example, the RGB model doesn’t mean anything until we assign it an RGB color space.</li>\r\n\r\n\r\n\r\n<li>Most of the time, we want to talk about how many colors a color space holds, so we use the term <strong>color gamut</strong> for the task. However, a color gamut is also tied to the physical limitations of a camera/display. A color may be out-of-gamut, meaning it can’t be represented in a given color space.</li>\r\n\r\n\r\n\r\n<li>In CSS, <strong>we can access all these color spaces through color functions</strong>, of which there are many.</li>\r\n\r\n\r\n\r\n<li>The <strong>CIEXYZ color space</strong> is extremely useful to define other color spaces, describe their gamuts, and convert between them.</li>\r\n</ol>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"references\">References</h3>\r\n\r\n\r\n<ul class=\"wp-block-list\">\r\n<li><a href=\"https://ninedegreesbelow.com/photography/xyz-rgb.html\" rel=\"noopener\">Completely Painless Programmer’s Guide to XYZ, RGB, ICC, xyY, and TRCs</a> (Elle Stone)</li>\r\n\r\n\r\n\r\n<li><a href=\"https://ciechanow.ski/color-spaces/\" rel=\"noopener\">Color Spaces</a> (Bartosz Ciechanowski)</li>\r\n\r\n\r\n\r\n<li><a href=\"http://dougkerr.net/Pumpkin/articles/CIE_XYZ.pdf\" rel=\"noopener\">The CIE XYZ and xyY Color Spaces</a>(Douglas A. Kerr)</li>\r\n\r\n\r\n\r\n<li><a href=\"https://bottosson.github.io/posts/oklab/\" rel=\"noopener\">From personal project to industry standard</a> (Björn Ottosson)</li>\r\n\r\n\r\n\r\n<li><a href=\"https://developer.chrome.com/docs/css-ui/high-definition-css-color-guide\" rel=\"noopener\">High definition CSS color guide</a> (Adam Argyle)</li>\r\n\r\n\r\n\r\n<li><a href=\"https://www.youtube.com/watch?v=99v96TL-tuY\" rel=\"noopener\">Color Spaces: Explained from the Ground Up</a> (Video Tech Explained)</li>\r\n\r\n\r\n\r\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Color_space\" rel=\"noopener\">Color Space</a> (MDN)</li>\r\n\r\n\r\n\r\n<li><a href=\"https://ninedegreesbelow.com/photography/well-behaved-profile.html\" rel=\"noopener\">What Makes a Color Space Well Behaved?</a> (Elle Stone)</li>\r\n</ul>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"footnotes\">Footnotes</h3>\r\n\r\n\r\n<p><sup id=\"note-1\">1</sup> Light is the main cause of color, but color can be created by things other than light. For example, rubbing your closed eyes mechanically stimulates your retina, creating color in what’s <a href=\"https://en.wikipedia.org/wiki/Phosphene\" rel=\"noopener\">called phosphene</a>. <a href=\"#footnote-1\">⤴️</a></p>\r\n\r\n\r\n\r\n<p><sup id=\"note-2\">2</sup> If <em>negative light</em> also makes you scratch your head, and for more info on how the CIEXYZ color space was created, I highly recommend Douglas A. Kerr <a href=\"http://dougkerr.net/Pumpkin/articles/CIE_XYZ.pdf\" rel=\"noopener\"><em>The CIE XYZ and xyY Color Spaces</em></a> paper. <a href=\"#footnote-2\">⤴️</a></p>\r\n\r\n\r\n\r\n<p><sup id=\"note-3\">3</sup> We also need to define the darkest dark color (“black”) and the lightest light color (“white”). However, for <a href=\"https://ninedegreesbelow.com/photography/well-behaved-profile.html\" rel=\"noopener\">well-behaved</a> color spaces, these two can be abstracted from the reddest, blues, and greenest colors. <a href=\"#footnote-3\">⤴️</a></p>\r\n<hr />\r\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/color-everything-in-css/\">Color Everything in CSS</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&utm_source=css-tricks.com&utm_campaign=family_&utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
    "createdAt": "2025-06-20T14:04:12.000+00:00",
    "link": "https://css-tricks.com/color-everything-in-css/",
    "author": "",
    "site": {
      "id": "5",
      "url": "https://css-tricks.com/category/articles/feed",
      "name": "cssTrick"
    }
  },
  {
    "title": "[Korean FE Article] 자바스크립트의 새로운 핵심 기능: 명시적 리소스 관리",
    "content": "<div class=\"captioned-image-container\"><figure><a class=\"image-link image2 is-viewable-img\" target=\"_blank\" href=\"https://substackcdn.com/image/fetch/$s_!z1Rf!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe49c6121-8ce1-479b-a1d2-633acf0efa3e_1400x788.png\" data-component-name=\"Image2ToDOM\"><div class=\"image2-inset\"><picture><source type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/$s_!z1Rf!,w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe49c6121-8ce1-479b-a1d2-633acf0efa3e_1400x788.png 424w, https://substackcdn.com/image/fetch/$s_!z1Rf!,w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe49c6121-8ce1-479b-a1d2-633acf0efa3e_1400x788.png 848w, https://substackcdn.com/image/fetch/$s_!z1Rf!,w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe49c6121-8ce1-479b-a1d2-633acf0efa3e_1400x788.png 1272w, https://substackcdn.com/image/fetch/$s_!z1Rf!,w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe49c6121-8ce1-479b-a1d2-633acf0efa3e_1400x788.png 1456w\" sizes=\"100vw\"><img src=\"https://substackcdn.com/image/fetch/$s_!z1Rf!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe49c6121-8ce1-479b-a1d2-633acf0efa3e_1400x788.png\" width=\"1400\" height=\"788\" data-attrs=\"{\"src\":\"https://substack-post-media.s3.amazonaws.com/public/images/e49c6121-8ce1-479b-a1d2-633acf0efa3e_1400x788.png\",\"srcNoWatermark\":null,\"fullscreen\":null,\"imageSize\":null,\"height\":788,\"width\":1400,\"resizeWidth\":null,\"bytes\":null,\"alt\":null,\"title\":null,\"type\":null,\"href\":null,\"belowTheFold\":false,\"topImage\":true,\"internalRedirect\":null,\"isProcessing\":false,\"align\":null,\"offset\":false}\" class=\"sizing-normal\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/$s_!z1Rf!,w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe49c6121-8ce1-479b-a1d2-633acf0efa3e_1400x788.png 424w, https://substackcdn.com/image/fetch/$s_!z1Rf!,w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe49c6121-8ce1-479b-a1d2-633acf0efa3e_1400x788.png 848w, https://substackcdn.com/image/fetch/$s_!z1Rf!,w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe49c6121-8ce1-479b-a1d2-633acf0efa3e_1400x788.png 1272w, https://substackcdn.com/image/fetch/$s_!z1Rf!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe49c6121-8ce1-479b-a1d2-633acf0efa3e_1400x788.png 1456w\" sizes=\"100vw\" fetchpriority=\"high\"></picture><div class=\"image-link-expand\"><div class=\"pencraft pc-display-flex pc-gap-8 pc-reset\"><div class=\"pencraft pc-reset icon-container restack-image\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-refresh-cw\"><path d=\"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\"></path><path d=\"M21 3v5h-5\"></path><path d=\"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\"></path><path d=\"M8 16H3v5\"></path></svg></div><div class=\"pencraft pc-reset icon-container view-image\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-maximize2\"><polyline points=\"15 3 21 3 21 9\"></polyline><polyline points=\"9 21 3 21 3 15\"></polyline><line x1=\"21\" x2=\"14\" y1=\"3\" y2=\"10\"></line><line x1=\"3\" x2=\"10\" y1=\"21\" y2=\"14\"></line></svg></div></div></div></div></a></figure></div><blockquote><p>글 링크: <a href=\"https://tinyurl.com/yc53akh5\">https://tinyurl.com/yc53akh5</a></p></blockquote><h2>소개</h2><p>이 글은 JavaScript의 새로운 기능인 명시적 리소스 관리(Explicit Resource Management)에 대해 다룹니다. 파일 핸들, 네트워크 연결, 스트림 등의 리소스를 다룰 때 개발자들이 흔히 겪는 메모리 누수와 리소스 정리 문제를 해결하기 위해 도입된 이 기능은 <code>using</code>과 <code>await using</code> 선언문을 통해 리소스의 생명주기를 자동으로 관리합니다.</p><p>기존에는 <code>try...finally</code> 블록을 사용해 수동으로 리소스를 정리해야 했지만, 이제는 스코프가 종료될 때 자동으로 정리 작업이 수행되어 개발자의 실수를 줄이고 코드의 안정성을 높입니다. 특히 <code>ReadableStreamDefaultReader</code>와 같은 웹 API를 사용할 때 발생하는 잠금 해제 누락 문제를 효과적으로 방지할 수 있습니다.</p><p>자바스크립트가 더욱 견고한 리소스 관리 체계를 갖추어 나가는 이 시점에서, 새로운 패턴을 활용해 더 안전하고 효율적인 코드를 작성하는 방법을 살펴볼 수 있는 글입니다. 🙂</p><p></p><h2><strong>목차</strong></h2><ul><li><p>using과 await using 선언문</p></li><li><p>DisposableStack과 AsyncDisposableStack</p></li><li><p>브라우저 지원 현황</p></li></ul><div class=\"subscription-widget-wrap-editor\" data-attrs=\"{\"url\":\"https://kofearticle.substack.com/subscribe?\",\"text\":\"Subscribe\",\"language\":\"en\"}\" data-component-name=\"SubscribeWidgetToDOM\"><div class=\"subscription-widget show-subscribe\"><div class=\"preamble\"><p class=\"cta-caption\">Thanks for reading Korean FE article! Subscribe for free to receive new posts and support my work.</p></div><form class=\"subscription-widget-subscribe\"><input type=\"email\" class=\"email-input\" name=\"email\" placeholder=\"Type your email…\" tabindex=\"-1\"><input type=\"submit\" class=\"button primary\" value=\"Subscribe\"><div class=\"fake-input-wrapper\"><div class=\"fake-input\"></div><div class=\"fake-button\"></div></div></form></div></div>",
    "createdAt": "2025-06-20T00:30:22.000+00:00",
    "link": "https://kofearticle.substack.com/p/korean-fe-article-393",
    "author": "",
    "site": {
      "id": "3",
      "url": "https://kofearticle.substack.com/feed",
      "name": "kofearticle"
    }
  },
  {
    "title": "How to Keep Up With New CSS Features",
    "content": "<p>How do you keep up with new CSS features?</p>\r\n\r\n\r\n\r\n<p>Let’s say for example that, hypothetically speaking, you run a popular web development survey focused on CSS, and need to figure out what to include in this year’s edition. (In a <em>total</em> coincidence the aforementioned State of CSS survey for this year is actually open right now — <a href=\"https://survey.devographics.com/en-US/survey/state-of-css/2025?source=css_tricks_keeping_up\" rel=\"noopener\">go take it to see what’s new in CSS!</a>)</p>\r\n\r\n\r\n\r\n<p>You might think you can just type “new CSS features 2025” in Google and be done with it. But while this does give us a few promising leads, it also unearths a lot of cookie-cutter content that proclaims CSS Grid as the “next big thing”, despite the fact it’s been well-supported for over eight years now. </p>\r\n\r\n\r\n\r\n<p>We need a better approach. </p>\r\n\r\n\r\n\r\n<p><em>I’ll focus on CSS in this article, but all the resources linked here cover all web platform features, including JavaScript and HTML.</em></p>\r\n\r\n\r\n\r\n<span id=\"more-387159\"></span>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"browser-blogs\"><a href=\"https://dev.to/sachagreif/how-to-keep-up-with-the-web-platform-506n-temp-slug-493011?preview=619f23b56568208f51ce715d46320d1ef2b4b3cdc621099b35734c635b8a9e7857bd509490d9985c09f950ad096b5e5305b236f1b3437f820b997071#webdev\" rel=\"noopener\"></a>Browser blogs</h3>\r\n\r\n\r\n<figure class=\"wp-block-image size-full\"><img data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"800\" height=\"521\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/https-dev-to-uploads.s3.amazonaws.com-uploads-articles-h0r4b6x6qdqkfbivw6w5.png.webp?resize=800%2C521&ssl=1\" alt=\"New to the web platform in April\" class=\"wp-image-387165\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/https-dev-to-uploads.s3.amazonaws.com-uploads-articles-h0r4b6x6qdqkfbivw6w5.png.webp?w=800&ssl=1 800w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/https-dev-to-uploads.s3.amazonaws.com-uploads-articles-h0r4b6x6qdqkfbivw6w5.png.webp?resize=300%2C195&ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/https-dev-to-uploads.s3.amazonaws.com-uploads-articles-h0r4b6x6qdqkfbivw6w5.png.webp?resize=768%2C500&ssl=1 768w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\" /></figure>\r\n\r\n\r\n\r\n<p>The browsers themselves are often a good source of what’s new and, thankfully, the big ones maintain blogs where they even cover specific CSS news.</p>\r\n\r\n\r\n\r\n<p>A good general starting point is Google’s <a href=\"https://web.dev/blog?hl=en\" target=\"_blank\" rel=\"noreferrer noopener\">web.dev</a> blog, and more specifically <a href=\"https://bsky.app/profile/rachelandrew.bsky.social\" target=\"_blank\" rel=\"noreferrer noopener\">Rachel Andrew</a>‘s monthly web platform recaps. Here’s a small sample of those:</p>\r\n\r\n\r\n\r\n<ul class=\"wp-block-list\">\r\n<li><a href=\"https://web.dev/blog/web-platform-01-2025?hl=en\" target=\"_blank\" rel=\"noreferrer noopener\">New to the web platform in January</a></li>\r\n\r\n\r\n\r\n<li><a href=\"https://web.dev/blog/web-platform-02-2025?hl=en\" target=\"_blank\" rel=\"noreferrer noopener\">New to the web platform in February</a></li>\r\n\r\n\r\n\r\n<li><a href=\"https://web.dev/blog/web-platform-03-2025?hl=en\" target=\"_blank\" rel=\"noreferrer noopener\">New to the web platform in March</a></li>\r\n\r\n\r\n\r\n<li><a href=\"https://web.dev/blog/web-platform-04-2025\" target=\"_blank\" rel=\"noreferrer noopener\">New to the web platform in April</a></li>\r\n</ul>\r\n\r\n\r\n\r\n<p>The WebKit blog is, of course, another great place. <a href=\"https://jensimmons.com\" rel=\"noopener\">Jen Simmons</a> is very active on the blog (as well as <a href=\"https://bsky.app/profile/jensimmons.bsky.social\" rel=\"noopener\">Bluesky</a>) and <a href=\"https://webkit.org/blog/category/css/\" rel=\"noopener\">there’s an entire category dedicated solely to CSS</a>. The blog doesn’t publish content as regularly as web.dev, but the breadth of content is incredibly deep and thorough, as you can see in <a href=\"https://webkit.org/blog/16547/better-typography-with-text-wrap-pretty/\" rel=\"noopener\">Jen’s write-up on the release of <code>text-wrap: pretty</code></a>.</p>\r\n\r\n\r\n\r\n<p>And, to round things out, you’ll want to keep an eye on <a href=\"https://blog.nightly.mozilla.org\" rel=\"noopener\">Firefox Nightly News</a> for what’s shipping in Firefox, and t<a href=\"https://blogs.windows.com/msedgedev/\" rel=\"noopener\">he official blog for Microsoft Edge</a>.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"csstricks-and-others\"><a href=\"https://dev.to/sachagreif/how-to-keep-up-with-the-web-platform-506n-temp-slug-493011?preview=619f23b56568208f51ce715d46320d1ef2b4b3cdc621099b35734c635b8a9e7857bd509490d9985c09f950ad096b5e5305b236f1b3437f820b997071#csstricks\" rel=\"noopener\"></a>CSS-Tricks (and others)</h3>\r\n\r\n\r\n<p>I’d be remiss to not mention that <a href=\"https://css-tricks.com/\" target=\"_blank\" rel=\"noreferrer noopener\">CSS-Tricks</a> is also a great source for up-to-date CSS knowledge, including an ever-growing <a href=\"https://css-tricks.com/almanac/\">almanac of CSS features</a>. But you probably already know that since you’re reading this.</p>\r\n\r\n\r\n\r\n<p>And let’s not discount other fine publications that cover CSS. Here are just a few:</p>\r\n\r\n\r\n\r\n<ul class=\"wp-block-list\">\r\n<li><a href=\"https://www.smashingmagazine.com/category/css/\" rel=\"noopener\">Smashing Magazine</a></li>\r\n\r\n\r\n\r\n<li><a href=\"https://frontendmasters.com/blog/\" rel=\"noopener\">Frontend Masters Blog</a></li>\r\n\r\n\r\n\r\n<li><a href=\"https://piccalil.li\" rel=\"noopener\">Piccalilli</a></li>\r\n\r\n\r\n\r\n<li><a href=\"https://css-tip.com\" rel=\"noopener\">CSS-Tip</a></li>\r\n</ul>\r\n\r\n\r\n\r\n<p>Following individual sources can get a little overwhelming, particularly when CSS is moving as fast as it is. That’s where <a href=\"https://frontenddogma.com\" rel=\"noopener\">Frontend Dogma</a> comes in with an ever-growing and updated list of curated links from these (and many other sources) in a one-stop shop.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"web-platform-features-explorer\"><a href=\"https://dev.to/sachagreif/how-to-keep-up-with-the-web-platform-506n-temp-slug-493011?preview=619f23b56568208f51ce715d46320d1ef2b4b3cdc621099b35734c635b8a9e7857bd509490d9985c09f950ad096b5e5305b236f1b3437f820b997071#web-platform-features-explorer\" rel=\"noopener\"></a>Web Platform Features Explorer</h3>\r\n\r\n\r\n<figure class=\"wp-block-image size-full\"><img data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"800\" height=\"521\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/https-dev-to-uploads.s3.amazonaws.com-uploads-articles-8j8vzm7lydk7vsjqc42q.png.webp?resize=800%2C521&ssl=1\" alt=\"Web Platform Features Explorer\" class=\"wp-image-387166\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/https-dev-to-uploads.s3.amazonaws.com-uploads-articles-8j8vzm7lydk7vsjqc42q.png.webp?w=800&ssl=1 800w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/https-dev-to-uploads.s3.amazonaws.com-uploads-articles-8j8vzm7lydk7vsjqc42q.png.webp?resize=300%2C195&ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/https-dev-to-uploads.s3.amazonaws.com-uploads-articles-8j8vzm7lydk7vsjqc42q.png.webp?resize=768%2C500&ssl=1 768w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\" /></figure>\r\n\r\n\r\n\r\n<p>If you need something a bit more structured to help you figure out what’s new, <a href=\"https://web-platform-dx.github.io/web-features-explorer/\" target=\"_blank\" rel=\"noreferrer noopener\">Web Platform Features Explorer</a> is great way to look up features based on their <a href=\"https://web-platform-dx.github.io/web-features/\" target=\"_blank\" rel=\"noreferrer noopener\">Baseline</a> status.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"web-platform-status\"><a href=\"https://dev.to/sachagreif/how-to-keep-up-with-the-web-platform-506n-temp-slug-493011?preview=619f23b56568208f51ce715d46320d1ef2b4b3cdc621099b35734c635b8a9e7857bd509490d9985c09f950ad096b5e5305b236f1b3437f820b997071#web-platform-status\" rel=\"noopener\"></a>Web Platform Status</h3>\r\n\r\n\r\n<figure class=\"wp-block-image size-full\"><img data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"800\" height=\"521\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/https-dev-to-uploads.s3.amazonaws.com-uploads-articles-q3rvqcjuf1ms34uyrbf5.png.webp?resize=800%2C521&ssl=1\" alt=\"Web Platform Status\" class=\"wp-image-387167\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/https-dev-to-uploads.s3.amazonaws.com-uploads-articles-q3rvqcjuf1ms34uyrbf5.png.webp?w=800&ssl=1 800w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/https-dev-to-uploads.s3.amazonaws.com-uploads-articles-q3rvqcjuf1ms34uyrbf5.png.webp?resize=300%2C195&ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/https-dev-to-uploads.s3.amazonaws.com-uploads-articles-q3rvqcjuf1ms34uyrbf5.png.webp?resize=768%2C500&ssl=1 768w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\" /></figure>\r\n\r\n\r\n\r\n<p>A similar tool is the <a href=\"https://webstatus.dev/\" target=\"_blank\" rel=\"noreferrer noopener\">Web Platform Status dashboard</a>. This one features more fine-grained filtering tools, letting you narrow down features by <a href=\"https://webstatus.dev/?q=baseline_date%3A2025-01-01..2025-12-31\" target=\"_blank\" rel=\"noreferrer noopener\">Baseline year</a> or even show <a href=\"https://webstatus.dev/?q=id%3Aanchor-positioning+OR+id%3Acontainer-queries+OR+id%3Ahas+OR+id%3Anesting+OR+id%3Aview-transitions+OR+id%3Asubgrid+OR+id%3Agrid+OR+id%3Ascrollbar-gutter+OR+id%3Ascrollbar-width+OR+id%3Ascrollbar-color+OR+id%3Ascroll-driven-animations+OR+id%3Ascope\" target=\"_blank\" rel=\"noreferrer noopener\">features mentioned as Top CSS Interop in the latest State of CSS survey</a>!</p>\r\n\r\n\r\n\r\n<p>Another very cool feature is the ability to view a feature’s adoption rate, as measured in terms of percentage of Chrome page views where that feature was used, such as here for the <code><a href=\"https://css-tricks.com/poppin-in/\">popover</a></code> HTML attribute:</p>\r\n\r\n\r\n\r\n<figure class=\"wp-block-image size-full\"><img data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"800\" height=\"305\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/https-dev-to-uploads.s3.amazonaws.com-uploads-articles-9ub00cqet7pnhxooifem.png.webp?resize=800%2C305&ssl=1\" alt=\"Showing browser usage statistics of a feature in Chrome.\" class=\"wp-image-387169\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/https-dev-to-uploads.s3.amazonaws.com-uploads-articles-9ub00cqet7pnhxooifem.png.webp?w=800&ssl=1 800w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/https-dev-to-uploads.s3.amazonaws.com-uploads-articles-9ub00cqet7pnhxooifem.png.webp?resize=300%2C114&ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/https-dev-to-uploads.s3.amazonaws.com-uploads-articles-9ub00cqet7pnhxooifem.png.webp?resize=768%2C293&ssl=1 768w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\" /></figure>\r\n\r\n\r\n\r\n<p>An important caveat: since sites like Facebook and Google account for a very large percentage of all measured page views, this metric can become skewed once one of these platforms adopts a new feature.</p>\r\n\r\n\r\n\r\n<p>The Web Platform Status’s <a href=\"https://webstatus.dev/stats\" rel=\"noopener\">stats</a> section also features the “chart of shame” (according to <a href=\"https://bsky.app/profile/lea.verou.me/post/3lqdkh5cexc2y\" rel=\"noopener\">Lea Verou</a>), which highlights how certain browsers might be slightly lagging behind their peers in terms of new feature adoption.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"chrome-platform-status\"><a href=\"https://dev.to/sachagreif/how-to-keep-up-with-the-web-platform-506n-temp-slug-493011?preview=619f23b56568208f51ce715d46320d1ef2b4b3cdc621099b35734c635b8a9e7857bd509490d9985c09f950ad096b5e5305b236f1b3437f820b997071#chrome-platform-status\" rel=\"noopener\"></a>Chrome Platform Status</h3>\r\n\r\n\r\n<figure class=\"wp-block-image size-full\"><img data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"800\" height=\"521\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/https-dev-to-uploads.s3.amazonaws.com-uploads-articles-ck7k061x7mk9c64r9hag.png.webp?resize=800%2C521&ssl=1\" alt=\"Chrome Platform Status webpage showing usage statistics for CSS subgrid.\" class=\"wp-image-387170\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/https-dev-to-uploads.s3.amazonaws.com-uploads-articles-ck7k061x7mk9c64r9hag.png.webp?w=800&ssl=1 800w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/https-dev-to-uploads.s3.amazonaws.com-uploads-articles-ck7k061x7mk9c64r9hag.png.webp?resize=300%2C195&ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/https-dev-to-uploads.s3.amazonaws.com-uploads-articles-ck7k061x7mk9c64r9hag.png.webp?resize=768%2C500&ssl=1 768w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\" /></figure>\r\n\r\n\r\n\r\n<p>That same adoption data can also be found on the <a href=\"https://chromestatus.com/roadmap\" target=\"_blank\" rel=\"noreferrer noopener\">Chrome Platform Status dashboard</a>, which gives you even more details, such as usage among top sites, as well as sample URLs of sites that are using a feature. </p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"polypane-experimental-chromium-features-dashboard\"><a href=\"https://dev.to/sachagreif/how-to-keep-up-with-the-web-platform-506n-temp-slug-493011?preview=619f23b56568208f51ce715d46320d1ef2b4b3cdc621099b35734c635b8a9e7857bd509490d9985c09f950ad096b5e5305b236f1b3437f820b997071#polypane-experimental-chromium-features-dashboard\" rel=\"noopener\"></a>Polypane Experimental Chromium Features Dashboard</h3>\r\n\r\n\r\n<figure class=\"wp-block-image size-full\"><img data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"800\" height=\"521\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/https-dev-to-uploads.s3.amazonaws.com-uploads-articles-4o0ign3510fmfbsmegx7.png.webp?resize=800%2C521&ssl=1\" alt=\"Polypane webpage showing a search bar for Experimental Chromium Web Platform Features.\" class=\"wp-image-387171\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/https-dev-to-uploads.s3.amazonaws.com-uploads-articles-4o0ign3510fmfbsmegx7.png.webp?w=800&ssl=1 800w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/https-dev-to-uploads.s3.amazonaws.com-uploads-articles-4o0ign3510fmfbsmegx7.png.webp?resize=300%2C195&ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/https-dev-to-uploads.s3.amazonaws.com-uploads-articles-4o0ign3510fmfbsmegx7.png.webp?resize=768%2C500&ssl=1 768w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\" /></figure>\r\n\r\n\r\n\r\n<p><a href=\"https://polypane.app/\" target=\"_blank\" rel=\"noreferrer noopener\">Polypane</a> is a great developer-focused browser that <a href=\"https://css-tricks.com/clever-polypane-debugging-features-im-loving/\">provides a ton of useful tools</a> like contrast checkers, multi-viewport views, and more. </p>\r\n\r\n\r\n\r\n<p>They also provide an <a href=\"https://polypane.app/experimental-web-platform-features/\" target=\"_blank\" rel=\"noreferrer noopener\">experimental Chromium features explorer</a> that breaks new features down by Chromium version, for those of you who want to be at the absolute top of the cutting edge. </p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"kevin-powells-youtube-channel\"><a href=\"https://dev.to/sachagreif/how-to-keep-up-with-the-web-platform-506n-temp-slug-493011?preview=619f23b56568208f51ce715d46320d1ef2b4b3cdc621099b35734c635b8a9e7857bd509490d9985c09f950ad096b5e5305b236f1b3437f820b997071#kevin-powell\" rel=\"noopener\"></a>Kevin Powell’s YouTube Channel</h3>\r\n\r\n\r\n<figure class=\"wp-block-image size-full\"><img data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"800\" height=\"521\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/https-dev-to-uploads.s3.amazonaws.com-uploads-articles-lfhst8a21n78jsuiw2pn.png.webp?resize=800%2C521&ssl=1\" alt=\"A still frame of Kevin Powell in a video on YouTube.\" class=\"wp-image-387172\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/https-dev-to-uploads.s3.amazonaws.com-uploads-articles-lfhst8a21n78jsuiw2pn.png.webp?w=800&ssl=1 800w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/https-dev-to-uploads.s3.amazonaws.com-uploads-articles-lfhst8a21n78jsuiw2pn.png.webp?resize=300%2C195&ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/https-dev-to-uploads.s3.amazonaws.com-uploads-articles-lfhst8a21n78jsuiw2pn.png.webp?resize=768%2C500&ssl=1 768w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\" /></figure>\r\n\r\n\r\n\r\n<p>As YouTube’s de facto CSS expert, <a href=\"https://www.youtube.com/@KevinPowell\" target=\"_blank\" rel=\"noreferrer noopener\">Kevin Powell</a> often puts up <a href=\"https://www.youtube.com/watch?v=jSCgZqoebsM\" target=\"_blank\" rel=\"noreferrer noopener\">great video recaps</a> of new features. You should definitely be following him, but statistically speaking you probably already are! It’s also worth mentioning that <a href=\"https://html-css-tip-of-the-week.netlify.app\" rel=\"noopener\">Kevin runs a site that publishes weekly HTML and CSS tips</a>.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"css-working-group\"><a href=\"https://dev.to/sachagreif/how-to-keep-up-with-the-web-platform-506n-temp-slug-493011?preview=619f23b56568208f51ce715d46320d1ef2b4b3cdc621099b35734c635b8a9e7857bd509490d9985c09f950ad096b5e5305b236f1b3437f820b997071#css-working-group\" rel=\"noopener\"></a>CSS Working Group</h3>\r\n\r\n\r\n<p>Of course, you can always also go straight to the source and look at what the <a href=\"https://www.w3.org/groups/wg/css/publications/#wd\" target=\"_blank\" rel=\"noreferrer noopener\">CSS Working Group itself</a> has been working on! They have <a href=\"https://lists.w3.org/Archives/Public/www-style/\" rel=\"noopener\">a mailing list</a> you can subscribe to keep tabs on things straight from your inbox, as well as an <a href=\"https://www.w3.org/groups/wg/css/feed/\" rel=\"noopener\">RSS feed</a>.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"browser-release-notes\">Browser release notes</h3>\r\n\r\n\r\n<p>Most browsers publish a set of release notes any time a new version ships. For the most part, you can get a good pulse on when new CSS features are released by following the three big names in browsers:</p>\r\n\r\n\r\n\r\n<ul class=\"wp-block-list\">\r\n<li><a href=\"https://developer.chrome.com/release-notes\" rel=\"noopener\">Chrome release notes</a></li>\r\n\r\n\r\n\r\n<li><a href=\"https://developer.apple.com/documentation/safari-release-notes\" rel=\"noopener\">Safari release notes</a></li>\r\n\r\n\r\n\r\n<li><a href=\"https://www.mozilla.org/en-US/firefox/releases/\" rel=\"noopener\">Firefox release notes</a></li>\r\n</ul>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"chatgpt\">ChatGPT</h3>\r\n\r\n\r\n<p>Another way to catch up with CSS is to just ask <a href=\"https://chat.openai.com/\" target=\"_blank\" rel=\"noreferrer noopener\">ChatGPT</a>! This sample prompt worked well enough for me:</p>\r\n\r\n\r\n\r\n<blockquote class=\"wp-block-quote is-layout-flow wp-block-quote-is-layout-flow\">\r\n<p>What are the latest CSS features that have either become supported by browsers in the past year, or will soon become supported? </p>\r\n</blockquote>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"other-resources\"><a href=\"https://dev.to/sachagreif/how-to-keep-up-with-the-web-platform-506n-temp-slug-493011?preview=619f23b56568208f51ce715d46320d1ef2b4b3cdc621099b35734c635b8a9e7857bd509490d9985c09f950ad096b5e5305b236f1b3437f820b997071#other-resources\" rel=\"noopener\"></a>Other resources</h3>\r\n\r\n\r\n<p>If you really want to get in the weeds, Igalia’s <a href=\"https://bcd-watch.igalia.com\" rel=\"noopener\">BCD Watch</a> displays changes to MDN’s <a href=\"https://github.com/mdn/browser-compat-data\" target=\"_blank\" rel=\"noreferrer noopener\">browser-compat-data repo</a>, which itself tracks which features are supported in which browsers. </p>\r\n\r\n\r\n\r\n<p>Also, the latest editions of the HTTP Archive Web Almanac do not seem to include a CSS section specifically, but <a href=\"https://almanac.httparchive.org/en/2022/css\" target=\"_blank\" rel=\"noreferrer noopener\">past editions did feature one</a>, which was a great way to catch up with CSS once a year. </p>\r\n\r\n\r\n\r\n<p>There’s also <a href=\"https://caniuse.com/\" target=\"_blank\" rel=\"noreferrer noopener\">caniuse</a> has a <a href=\"https://caniuse.com/ciu/news\" target=\"_blank\" rel=\"noreferrer noopener\">news section</a> which does not seem to be frequently updated at the moment, but could potentially become a great resource for up-to-date new feature info in the future.</p>\r\n\r\n\r\n\r\n<p>The <a href=\"https://github.com/autonome/intenttoship-bot?tab=readme-ov-file\" rel=\"noopener\">IntentToShip bot</a> (available on <a href=\"https://bsky.app/profile/intenttoship.dev\" rel=\"noopener\">Bluesky</a>, <a href=\"https://fed.brid.gy/bsky/intenttoship.dev\" rel=\"noopener\">Mastodon</a>, <a href=\"https://x.com/intenttoship/\">Twitter</a>) posts whenever a browser vendor ships or changes a feature. You can’t get more cutting-edge than that!</p>\r\n\r\n\r\n\r\n<p>And lastly, there’s a ton of folks on social media who are frequently discussing new CSS features and sharing their own thoughts and experiments with them. If you’re on Bluesky, <a href=\"https://bsky.app/starter-pack/css-tricks.com/3la2jvt37sh2s\">there’s a starter pack of CSS-Tricks authors</a> that’s a good spot to find a deep community of people.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"wrapping-up\">Wrapping up</h3>\r\n\r\n\r\n<p>Of course, another great way to make sure no new features are slipping through the cracks is to take the State of CSS survey once a year. I use all the resources mentioned above to try and make sure each survey includes every new important feature. What’s more, you can bookmark features by adding them to your “reading list” as you take the survey to get a nice recap at the end.</p>\r\n\r\n\r\n\r\n<p>So go take this year’s <a href=\"https://survey.devographics.com/en-US/survey/state-of-css/2025?source=css_tricks_keeping_up\" rel=\"noopener\">State of CSS</a> survey and then let me know on <a href=\"https://bsky.app/profile/sachagreif.com\" rel=\"noopener\">Bluesky</a> how many new features you learned about!</p>\r\n<hr />\r\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/how-to-keep-up-with-new-css-features/\">How to Keep Up With New CSS Features</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&utm_source=css-tricks.com&utm_campaign=family_&utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
    "createdAt": "2025-06-17T13:13:15.000+00:00",
    "link": "https://css-tricks.com/how-to-keep-up-with-new-css-features/",
    "author": "",
    "site": {
      "id": "4",
      "url": "https://css-tricks.com/category/articles/feed",
      "name": "cssTrick"
    }
  },
  {
    "title": "How to Keep Up With New CSS Features",
    "content": "<p>How do you keep up with new CSS features?</p>\r\n\r\n\r\n\r\n<p>Let’s say for example that, hypothetically speaking, you run a popular web development survey focused on CSS, and need to figure out what to include in this year’s edition. (In a <em>total</em> coincidence the aforementioned State of CSS survey for this year is actually open right now — <a href=\"https://survey.devographics.com/en-US/survey/state-of-css/2025?source=css_tricks_keeping_up\" rel=\"noopener\">go take it to see what’s new in CSS!</a>)</p>\r\n\r\n\r\n\r\n<p>You might think you can just type “new CSS features 2025” in Google and be done with it. But while this does give us a few promising leads, it also unearths a lot of cookie-cutter content that proclaims CSS Grid as the “next big thing”, despite the fact it’s been well-supported for over eight years now. </p>\r\n\r\n\r\n\r\n<p>We need a better approach. </p>\r\n\r\n\r\n\r\n<p><em>I’ll focus on CSS in this article, but all the resources linked here cover all web platform features, including JavaScript and HTML.</em></p>\r\n\r\n\r\n\r\n<span id=\"more-387159\"></span>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"browser-blogs\"><a href=\"https://dev.to/sachagreif/how-to-keep-up-with-the-web-platform-506n-temp-slug-493011?preview=619f23b56568208f51ce715d46320d1ef2b4b3cdc621099b35734c635b8a9e7857bd509490d9985c09f950ad096b5e5305b236f1b3437f820b997071#webdev\" rel=\"noopener\"></a>Browser blogs</h3>\r\n\r\n\r\n<figure class=\"wp-block-image size-full\"><img data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"800\" height=\"521\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/https-dev-to-uploads.s3.amazonaws.com-uploads-articles-h0r4b6x6qdqkfbivw6w5.png.webp?resize=800%2C521&ssl=1\" alt=\"New to the web platform in April\" class=\"wp-image-387165\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/https-dev-to-uploads.s3.amazonaws.com-uploads-articles-h0r4b6x6qdqkfbivw6w5.png.webp?w=800&ssl=1 800w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/https-dev-to-uploads.s3.amazonaws.com-uploads-articles-h0r4b6x6qdqkfbivw6w5.png.webp?resize=300%2C195&ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/https-dev-to-uploads.s3.amazonaws.com-uploads-articles-h0r4b6x6qdqkfbivw6w5.png.webp?resize=768%2C500&ssl=1 768w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\" /></figure>\r\n\r\n\r\n\r\n<p>The browsers themselves are often a good source of what’s new and, thankfully, the big ones maintain blogs where they even cover specific CSS news.</p>\r\n\r\n\r\n\r\n<p>A good general starting point is Google’s <a href=\"https://web.dev/blog?hl=en\" target=\"_blank\" rel=\"noreferrer noopener\">web.dev</a> blog, and more specifically <a href=\"https://bsky.app/profile/rachelandrew.bsky.social\" target=\"_blank\" rel=\"noreferrer noopener\">Rachel Andrew</a>‘s monthly web platform recaps. Here’s a small sample of those:</p>\r\n\r\n\r\n\r\n<ul class=\"wp-block-list\">\r\n<li><a href=\"https://web.dev/blog/web-platform-01-2025?hl=en\" target=\"_blank\" rel=\"noreferrer noopener\">New to the web platform in January</a></li>\r\n\r\n\r\n\r\n<li><a href=\"https://web.dev/blog/web-platform-02-2025?hl=en\" target=\"_blank\" rel=\"noreferrer noopener\">New to the web platform in February</a></li>\r\n\r\n\r\n\r\n<li><a href=\"https://web.dev/blog/web-platform-03-2025?hl=en\" target=\"_blank\" rel=\"noreferrer noopener\">New to the web platform in March</a></li>\r\n\r\n\r\n\r\n<li><a href=\"https://web.dev/blog/web-platform-04-2025\" target=\"_blank\" rel=\"noreferrer noopener\">New to the web platform in April</a></li>\r\n</ul>\r\n\r\n\r\n\r\n<p>The WebKit blog is, of course, another great place. <a href=\"https://jensimmons.com\" rel=\"noopener\">Jen Simmons</a> is very active on the blog (as well as <a href=\"https://bsky.app/profile/jensimmons.bsky.social\" rel=\"noopener\">Bluesky</a>) and <a href=\"https://webkit.org/blog/category/css/\" rel=\"noopener\">there’s an entire category dedicated solely to CSS</a>. The blog doesn’t publish content as regularly as web.dev, but the breadth of content is incredibly deep and thorough, as you can see in <a href=\"https://webkit.org/blog/16547/better-typography-with-text-wrap-pretty/\" rel=\"noopener\">Jen’s write-up on the release of <code>text-wrap: pretty</code></a>.</p>\r\n\r\n\r\n\r\n<p>And, to round things out, you’ll want to keep an eye on <a href=\"https://blog.nightly.mozilla.org\" rel=\"noopener\">Firefox Nightly News</a> for what’s shipping in Firefox, and t<a href=\"https://blogs.windows.com/msedgedev/\" rel=\"noopener\">he official blog for Microsoft Edge</a>.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"csstricks-and-others\"><a href=\"https://dev.to/sachagreif/how-to-keep-up-with-the-web-platform-506n-temp-slug-493011?preview=619f23b56568208f51ce715d46320d1ef2b4b3cdc621099b35734c635b8a9e7857bd509490d9985c09f950ad096b5e5305b236f1b3437f820b997071#csstricks\" rel=\"noopener\"></a>CSS-Tricks (and others)</h3>\r\n\r\n\r\n<p>I’d be remiss to not mention that <a href=\"https://css-tricks.com/\" target=\"_blank\" rel=\"noreferrer noopener\">CSS-Tricks</a> is also a great source for up-to-date CSS knowledge, including an ever-growing <a href=\"https://css-tricks.com/almanac/\">almanac of CSS features</a>. But you probably already know that since you’re reading this.</p>\r\n\r\n\r\n\r\n<p>And let’s not discount other fine publications that cover CSS. Here are just a few:</p>\r\n\r\n\r\n\r\n<ul class=\"wp-block-list\">\r\n<li><a href=\"https://www.smashingmagazine.com/category/css/\" rel=\"noopener\">Smashing Magazine</a></li>\r\n\r\n\r\n\r\n<li><a href=\"https://frontendmasters.com/blog/\" rel=\"noopener\">Frontend Masters Blog</a></li>\r\n\r\n\r\n\r\n<li><a href=\"https://piccalil.li\" rel=\"noopener\">Piccalilli</a></li>\r\n\r\n\r\n\r\n<li><a href=\"https://css-tip.com\" rel=\"noopener\">CSS-Tip</a></li>\r\n</ul>\r\n\r\n\r\n\r\n<p>Following individual sources can get a little overwhelming, particularly when CSS is moving as fast as it is. That’s where <a href=\"https://frontenddogma.com\" rel=\"noopener\">Frontend Dogma</a> comes in with an ever-growing and updated list of curated links from these (and many other sources) in a one-stop shop.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"web-platform-features-explorer\"><a href=\"https://dev.to/sachagreif/how-to-keep-up-with-the-web-platform-506n-temp-slug-493011?preview=619f23b56568208f51ce715d46320d1ef2b4b3cdc621099b35734c635b8a9e7857bd509490d9985c09f950ad096b5e5305b236f1b3437f820b997071#web-platform-features-explorer\" rel=\"noopener\"></a>Web Platform Features Explorer</h3>\r\n\r\n\r\n<figure class=\"wp-block-image size-full\"><img data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"800\" height=\"521\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/https-dev-to-uploads.s3.amazonaws.com-uploads-articles-8j8vzm7lydk7vsjqc42q.png.webp?resize=800%2C521&ssl=1\" alt=\"Web Platform Features Explorer\" class=\"wp-image-387166\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/https-dev-to-uploads.s3.amazonaws.com-uploads-articles-8j8vzm7lydk7vsjqc42q.png.webp?w=800&ssl=1 800w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/https-dev-to-uploads.s3.amazonaws.com-uploads-articles-8j8vzm7lydk7vsjqc42q.png.webp?resize=300%2C195&ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/https-dev-to-uploads.s3.amazonaws.com-uploads-articles-8j8vzm7lydk7vsjqc42q.png.webp?resize=768%2C500&ssl=1 768w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\" /></figure>\r\n\r\n\r\n\r\n<p>If you need something a bit more structured to help you figure out what’s new, <a href=\"https://web-platform-dx.github.io/web-features-explorer/\" target=\"_blank\" rel=\"noreferrer noopener\">Web Platform Features Explorer</a> is great way to look up features based on their <a href=\"https://web-platform-dx.github.io/web-features/\" target=\"_blank\" rel=\"noreferrer noopener\">Baseline</a> status.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"web-platform-status\"><a href=\"https://dev.to/sachagreif/how-to-keep-up-with-the-web-platform-506n-temp-slug-493011?preview=619f23b56568208f51ce715d46320d1ef2b4b3cdc621099b35734c635b8a9e7857bd509490d9985c09f950ad096b5e5305b236f1b3437f820b997071#web-platform-status\" rel=\"noopener\"></a>Web Platform Status</h3>\r\n\r\n\r\n<figure class=\"wp-block-image size-full\"><img data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"800\" height=\"521\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/https-dev-to-uploads.s3.amazonaws.com-uploads-articles-q3rvqcjuf1ms34uyrbf5.png.webp?resize=800%2C521&ssl=1\" alt=\"Web Platform Status\" class=\"wp-image-387167\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/https-dev-to-uploads.s3.amazonaws.com-uploads-articles-q3rvqcjuf1ms34uyrbf5.png.webp?w=800&ssl=1 800w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/https-dev-to-uploads.s3.amazonaws.com-uploads-articles-q3rvqcjuf1ms34uyrbf5.png.webp?resize=300%2C195&ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/https-dev-to-uploads.s3.amazonaws.com-uploads-articles-q3rvqcjuf1ms34uyrbf5.png.webp?resize=768%2C500&ssl=1 768w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\" /></figure>\r\n\r\n\r\n\r\n<p>A similar tool is the <a href=\"https://webstatus.dev/\" target=\"_blank\" rel=\"noreferrer noopener\">Web Platform Status dashboard</a>. This one features more fine-grained filtering tools, letting you narrow down features by <a href=\"https://webstatus.dev/?q=baseline_date%3A2025-01-01..2025-12-31\" target=\"_blank\" rel=\"noreferrer noopener\">Baseline year</a> or even show <a href=\"https://webstatus.dev/?q=id%3Aanchor-positioning+OR+id%3Acontainer-queries+OR+id%3Ahas+OR+id%3Anesting+OR+id%3Aview-transitions+OR+id%3Asubgrid+OR+id%3Agrid+OR+id%3Ascrollbar-gutter+OR+id%3Ascrollbar-width+OR+id%3Ascrollbar-color+OR+id%3Ascroll-driven-animations+OR+id%3Ascope\" target=\"_blank\" rel=\"noreferrer noopener\">features mentioned as Top CSS Interop in the latest State of CSS survey</a>!</p>\r\n\r\n\r\n\r\n<p>Another very cool feature is the ability to view a feature’s adoption rate, as measured in terms of percentage of Chrome page views where that feature was used, such as here for the <code><a href=\"https://css-tricks.com/poppin-in/\">popover</a></code> HTML attribute:</p>\r\n\r\n\r\n\r\n<figure class=\"wp-block-image size-full\"><img data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"800\" height=\"305\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/https-dev-to-uploads.s3.amazonaws.com-uploads-articles-9ub00cqet7pnhxooifem.png.webp?resize=800%2C305&ssl=1\" alt=\"Showing browser usage statistics of a feature in Chrome.\" class=\"wp-image-387169\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/https-dev-to-uploads.s3.amazonaws.com-uploads-articles-9ub00cqet7pnhxooifem.png.webp?w=800&ssl=1 800w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/https-dev-to-uploads.s3.amazonaws.com-uploads-articles-9ub00cqet7pnhxooifem.png.webp?resize=300%2C114&ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/https-dev-to-uploads.s3.amazonaws.com-uploads-articles-9ub00cqet7pnhxooifem.png.webp?resize=768%2C293&ssl=1 768w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\" /></figure>\r\n\r\n\r\n\r\n<p>An important caveat: since sites like Facebook and Google account for a very large percentage of all measured page views, this metric can become skewed once one of these platforms adopts a new feature.</p>\r\n\r\n\r\n\r\n<p>The Web Platform Status’s <a href=\"https://webstatus.dev/stats\" rel=\"noopener\">stats</a> section also features the “chart of shame” (according to <a href=\"https://bsky.app/profile/lea.verou.me/post/3lqdkh5cexc2y\" rel=\"noopener\">Lea Verou</a>), which highlights how certain browsers might be slightly lagging behind their peers in terms of new feature adoption.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"chrome-platform-status\"><a href=\"https://dev.to/sachagreif/how-to-keep-up-with-the-web-platform-506n-temp-slug-493011?preview=619f23b56568208f51ce715d46320d1ef2b4b3cdc621099b35734c635b8a9e7857bd509490d9985c09f950ad096b5e5305b236f1b3437f820b997071#chrome-platform-status\" rel=\"noopener\"></a>Chrome Platform Status</h3>\r\n\r\n\r\n<figure class=\"wp-block-image size-full\"><img data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"800\" height=\"521\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/https-dev-to-uploads.s3.amazonaws.com-uploads-articles-ck7k061x7mk9c64r9hag.png.webp?resize=800%2C521&ssl=1\" alt=\"Chrome Platform Status webpage showing usage statistics for CSS subgrid.\" class=\"wp-image-387170\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/https-dev-to-uploads.s3.amazonaws.com-uploads-articles-ck7k061x7mk9c64r9hag.png.webp?w=800&ssl=1 800w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/https-dev-to-uploads.s3.amazonaws.com-uploads-articles-ck7k061x7mk9c64r9hag.png.webp?resize=300%2C195&ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/https-dev-to-uploads.s3.amazonaws.com-uploads-articles-ck7k061x7mk9c64r9hag.png.webp?resize=768%2C500&ssl=1 768w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\" /></figure>\r\n\r\n\r\n\r\n<p>That same adoption data can also be found on the <a href=\"https://chromestatus.com/roadmap\" target=\"_blank\" rel=\"noreferrer noopener\">Chrome Platform Status dashboard</a>, which gives you even more details, such as usage among top sites, as well as sample URLs of sites that are using a feature. </p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"polypane-experimental-chromium-features-dashboard\"><a href=\"https://dev.to/sachagreif/how-to-keep-up-with-the-web-platform-506n-temp-slug-493011?preview=619f23b56568208f51ce715d46320d1ef2b4b3cdc621099b35734c635b8a9e7857bd509490d9985c09f950ad096b5e5305b236f1b3437f820b997071#polypane-experimental-chromium-features-dashboard\" rel=\"noopener\"></a>Polypane Experimental Chromium Features Dashboard</h3>\r\n\r\n\r\n<figure class=\"wp-block-image size-full\"><img data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"800\" height=\"521\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/https-dev-to-uploads.s3.amazonaws.com-uploads-articles-4o0ign3510fmfbsmegx7.png.webp?resize=800%2C521&ssl=1\" alt=\"Polypane webpage showing a search bar for Experimental Chromium Web Platform Features.\" class=\"wp-image-387171\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/https-dev-to-uploads.s3.amazonaws.com-uploads-articles-4o0ign3510fmfbsmegx7.png.webp?w=800&ssl=1 800w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/https-dev-to-uploads.s3.amazonaws.com-uploads-articles-4o0ign3510fmfbsmegx7.png.webp?resize=300%2C195&ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/https-dev-to-uploads.s3.amazonaws.com-uploads-articles-4o0ign3510fmfbsmegx7.png.webp?resize=768%2C500&ssl=1 768w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\" /></figure>\r\n\r\n\r\n\r\n<p><a href=\"https://polypane.app/\" target=\"_blank\" rel=\"noreferrer noopener\">Polypane</a> is a great developer-focused browser that <a href=\"https://css-tricks.com/clever-polypane-debugging-features-im-loving/\">provides a ton of useful tools</a> like contrast checkers, multi-viewport views, and more. </p>\r\n\r\n\r\n\r\n<p>They also provide an <a href=\"https://polypane.app/experimental-web-platform-features/\" target=\"_blank\" rel=\"noreferrer noopener\">experimental Chromium features explorer</a> that breaks new features down by Chromium version, for those of you who want to be at the absolute top of the cutting edge. </p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"kevin-powells-youtube-channel\"><a href=\"https://dev.to/sachagreif/how-to-keep-up-with-the-web-platform-506n-temp-slug-493011?preview=619f23b56568208f51ce715d46320d1ef2b4b3cdc621099b35734c635b8a9e7857bd509490d9985c09f950ad096b5e5305b236f1b3437f820b997071#kevin-powell\" rel=\"noopener\"></a>Kevin Powell’s YouTube Channel</h3>\r\n\r\n\r\n<figure class=\"wp-block-image size-full\"><img data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"800\" height=\"521\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/https-dev-to-uploads.s3.amazonaws.com-uploads-articles-lfhst8a21n78jsuiw2pn.png.webp?resize=800%2C521&ssl=1\" alt=\"A still frame of Kevin Powell in a video on YouTube.\" class=\"wp-image-387172\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/https-dev-to-uploads.s3.amazonaws.com-uploads-articles-lfhst8a21n78jsuiw2pn.png.webp?w=800&ssl=1 800w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/https-dev-to-uploads.s3.amazonaws.com-uploads-articles-lfhst8a21n78jsuiw2pn.png.webp?resize=300%2C195&ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/https-dev-to-uploads.s3.amazonaws.com-uploads-articles-lfhst8a21n78jsuiw2pn.png.webp?resize=768%2C500&ssl=1 768w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\" /></figure>\r\n\r\n\r\n\r\n<p>As YouTube’s de facto CSS expert, <a href=\"https://www.youtube.com/@KevinPowell\" target=\"_blank\" rel=\"noreferrer noopener\">Kevin Powell</a> often puts up <a href=\"https://www.youtube.com/watch?v=jSCgZqoebsM\" target=\"_blank\" rel=\"noreferrer noopener\">great video recaps</a> of new features. You should definitely be following him, but statistically speaking you probably already are! It’s also worth mentioning that <a href=\"https://html-css-tip-of-the-week.netlify.app\" rel=\"noopener\">Kevin runs a site that publishes weekly HTML and CSS tips</a>.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"css-working-group\"><a href=\"https://dev.to/sachagreif/how-to-keep-up-with-the-web-platform-506n-temp-slug-493011?preview=619f23b56568208f51ce715d46320d1ef2b4b3cdc621099b35734c635b8a9e7857bd509490d9985c09f950ad096b5e5305b236f1b3437f820b997071#css-working-group\" rel=\"noopener\"></a>CSS Working Group</h3>\r\n\r\n\r\n<p>Of course, you can always also go straight to the source and look at what the <a href=\"https://www.w3.org/groups/wg/css/publications/#wd\" target=\"_blank\" rel=\"noreferrer noopener\">CSS Working Group itself</a> has been working on! They have <a href=\"https://lists.w3.org/Archives/Public/www-style/\" rel=\"noopener\">a mailing list</a> you can subscribe to keep tabs on things straight from your inbox, as well as an <a href=\"https://www.w3.org/groups/wg/css/feed/\" rel=\"noopener\">RSS feed</a>.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"browser-release-notes\">Browser release notes</h3>\r\n\r\n\r\n<p>Most browsers publish a set of release notes any time a new version ships. For the most part, you can get a good pulse on when new CSS features are released by following the three big names in browsers:</p>\r\n\r\n\r\n\r\n<ul class=\"wp-block-list\">\r\n<li><a href=\"https://developer.chrome.com/release-notes\" rel=\"noopener\">Chrome release notes</a></li>\r\n\r\n\r\n\r\n<li><a href=\"https://developer.apple.com/documentation/safari-release-notes\" rel=\"noopener\">Safari release notes</a></li>\r\n\r\n\r\n\r\n<li><a href=\"https://www.mozilla.org/en-US/firefox/releases/\" rel=\"noopener\">Firefox release notes</a></li>\r\n</ul>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"chatgpt\">ChatGPT</h3>\r\n\r\n\r\n<p>Another way to catch up with CSS is to just ask <a href=\"https://chat.openai.com/\" target=\"_blank\" rel=\"noreferrer noopener\">ChatGPT</a>! This sample prompt worked well enough for me:</p>\r\n\r\n\r\n\r\n<blockquote class=\"wp-block-quote is-layout-flow wp-block-quote-is-layout-flow\">\r\n<p>What are the latest CSS features that have either become supported by browsers in the past year, or will soon become supported? </p>\r\n</blockquote>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"other-resources\"><a href=\"https://dev.to/sachagreif/how-to-keep-up-with-the-web-platform-506n-temp-slug-493011?preview=619f23b56568208f51ce715d46320d1ef2b4b3cdc621099b35734c635b8a9e7857bd509490d9985c09f950ad096b5e5305b236f1b3437f820b997071#other-resources\" rel=\"noopener\"></a>Other resources</h3>\r\n\r\n\r\n<p>If you really want to get in the weeds, Igalia’s <a href=\"https://bcd-watch.igalia.com\" rel=\"noopener\">BCD Watch</a> displays changes to MDN’s <a href=\"https://github.com/mdn/browser-compat-data\" target=\"_blank\" rel=\"noreferrer noopener\">browser-compat-data repo</a>, which itself tracks which features are supported in which browsers. </p>\r\n\r\n\r\n\r\n<p>Also, the latest editions of the HTTP Archive Web Almanac do not seem to include a CSS section specifically, but <a href=\"https://almanac.httparchive.org/en/2022/css\" target=\"_blank\" rel=\"noreferrer noopener\">past editions did feature one</a>, which was a great way to catch up with CSS once a year. </p>\r\n\r\n\r\n\r\n<p>There’s also <a href=\"https://caniuse.com/\" target=\"_blank\" rel=\"noreferrer noopener\">caniuse</a> has a <a href=\"https://caniuse.com/ciu/news\" target=\"_blank\" rel=\"noreferrer noopener\">news section</a> which does not seem to be frequently updated at the moment, but could potentially become a great resource for up-to-date new feature info in the future.</p>\r\n\r\n\r\n\r\n<p>The <a href=\"https://github.com/autonome/intenttoship-bot?tab=readme-ov-file\" rel=\"noopener\">IntentToShip bot</a> (available on <a href=\"https://bsky.app/profile/intenttoship.dev\" rel=\"noopener\">Bluesky</a>, <a href=\"https://fed.brid.gy/bsky/intenttoship.dev\" rel=\"noopener\">Mastodon</a>, <a href=\"https://x.com/intenttoship/\">Twitter</a>) posts whenever a browser vendor ships or changes a feature. You can’t get more cutting-edge than that!</p>\r\n\r\n\r\n\r\n<p>And lastly, there’s a ton of folks on social media who are frequently discussing new CSS features and sharing their own thoughts and experiments with them. If you’re on Bluesky, <a href=\"https://bsky.app/starter-pack/css-tricks.com/3la2jvt37sh2s\">there’s a starter pack of CSS-Tricks authors</a> that’s a good spot to find a deep community of people.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"wrapping-up\">Wrapping up</h3>\r\n\r\n\r\n<p>Of course, another great way to make sure no new features are slipping through the cracks is to take the State of CSS survey once a year. I use all the resources mentioned above to try and make sure each survey includes every new important feature. What’s more, you can bookmark features by adding them to your “reading list” as you take the survey to get a nice recap at the end.</p>\r\n\r\n\r\n\r\n<p>So go take this year’s <a href=\"https://survey.devographics.com/en-US/survey/state-of-css/2025?source=css_tricks_keeping_up\" rel=\"noopener\">State of CSS</a> survey and then let me know on <a href=\"https://bsky.app/profile/sachagreif.com\" rel=\"noopener\">Bluesky</a> how many new features you learned about!</p>\r\n<hr />\r\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/how-to-keep-up-with-new-css-features/\">How to Keep Up With New CSS Features</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&utm_source=css-tricks.com&utm_campaign=family_&utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
    "createdAt": "2025-06-17T13:13:15.000+00:00",
    "link": "https://css-tricks.com/how-to-keep-up-with-new-css-features/",
    "author": "",
    "site": {
      "id": "5",
      "url": "https://css-tricks.com/category/articles/feed",
      "name": "cssTrick"
    }
  },
  {
    "title": "A Better API for the Resize Observer",
    "content": "<p>Resize Observer, Mutation Observer, and Intersection Observers are all good APIs that are more performant than their older counterparts:</p>\r\n\r\n\r\n\r\n<ul class=\"wp-block-list\">\r\n<li><code>ResizeObserver</code> is <a href=\"https://web.dev/articles/resize-observer\" rel=\"noopener\">better</a> than the <code>resize</code> event</li>\r\n\r\n\r\n\r\n<li><code>MutationObserver</code> replaces the now deprecated <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MutationEvent\" rel=\"noopener\">Mutation Events</a></li>\r\n\r\n\r\n\r\n<li><code>IntersectionObserver</code> lets you do certain <code>scroll</code> interactions with <a href=\"https://www.smashingmagazine.com/2021/07/dynamic-header-intersection-observer/\" rel=\"noopener\">less performance overhead</a>.</li>\r\n</ul>\r\n\r\n\r\n\r\n<p>The API for these three observers are quite similar (but they have their differences which we will go into later). To use an observer, you have to follow the steps below:</p>\r\n\r\n\r\n\r\n<span id=\"more-386338\"></span>\r\n\r\n\r\n\r\n<ol class=\"wp-block-list\">\r\n<li><strong>Create a new observer with the <code>new</code> keyword:</strong> This observer takes in an observer function to execute.</li>\r\n\r\n\r\n\r\n<li><strong>Do something with the observed changes</strong>: This is done via the observer function that is passed into the observer.</li>\r\n\r\n\r\n\r\n<li><strong>Observe a specific element</strong>: By using the <code>observe</code> method.</li>\r\n\r\n\r\n\r\n<li><strong>(Optionally) unobserve the element</strong>: By using the <code>unobserve</code> or <code>disconnect</code> method. (depending on which observer you’re using).</li>\r\n</ol>\r\n\r\n\r\n\r\n<p>In practice, the above steps looks like this with the <code>ResizeObserver</code>.</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// Step 1: Create a new observer\r\nconst observer = new ResizeObserver(observerFn)\r\n\r\n// Step 2: Do something with the observed changes\r\nfunction observerFn (entries) {\r\n  for (let entry of entries) {\r\n    // Do something with entry\r\n  }\r\n}\r\n\r\n// Step 3: Observe an element\r\nconst element = document.querySelector('#some-element')\r\nobserver.observe(element);\r\n\r\n// Step 4 (optional): Disconnect the observer\r\nobserver.disconnect(element)</code></pre>\r\n\r\n\r\n\r\n<p>This looks clear (and understandable) after the steps have been made clear. But it can look like a mess without the comments:</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const observer = new ResizeObserver(observerFn)\r\n\r\nfunction observerFn (entries) {\r\n  for (let entry of entries) {\r\n    // Do something with entry\r\n  }\r\n}\r\n\r\nconst element = document.querySelector('#some-element')\r\nobserver.observe(element);</code></pre>\r\n\r\n\r\n\r\n<p>The good news is: I think we can improve the observer APIs and make them easier to use.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"the-resize-observer\">The Resize Observer</h3>\r\n\r\n\r\n<p>Let’s start with the <code><a href=\"https://splendidlabz.com/docs/utils/dom/resize-observer\" rel=\"noopener\">ResizeObserver</a></code> since it’s the simplest of them all. We’ll begin by writing a function that encapsulates the <code>resizeObserver</code> that we create.</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">function resizeObserver () {\r\n  // ... Do something\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>The easiest way to begin refactoring the <code>ResizeObserver</code> code is to put everything we’ve created into our <code>resizeObserver</code> first.</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">function resizeObserver () {\r\n  const observer = new ResizeObserver(observerFn)\r\n\r\n  function observerFn (entries) {\r\n    for (let entry of entries) {\r\n      // Do something with entry\r\n    }\r\n  }\r\n\r\n  const node = document.querySelector('#some-element')\r\n  observer.observe(node);\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>Next, we can pass the <code>element</code> into the function to make it simpler. When we do this, we can eliminate the <code>document.querySelector</code> line.</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">function resizeObserver (element) {\r\n  const observer = new ResizeObserver(observerFn)\r\n\r\n  function observerFn (entries) {\r\n    for (let entry of entries) {\r\n      // Do something with entry\r\n    }\r\n  }\r\n\r\n  observer.observe(node);\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>This makes the function more versatile since we can now pass any element into it.</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// Usage of the resizeObserver function\r\nconst node = document.querySelector('#some-element')\r\nconst obs = resizeObserver(node)</code></pre>\r\n\r\n\r\n\r\n<p>This is already much easier than writing all of the <code>ResizeObserver</code> code from scratch whenever you wish to use it.</p>\r\n\r\n\r\n\r\n<p>Next, it’s quite obvious that we have to pass in an observer function to the callback. So, we can potentially do this:</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// Not great\r\nfunction resizeObserver (node, observerFn) {\r\n  const observer = new ResizeObserver(observerFn)\r\n  observer.observe(node);\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>Since <code>observerFn</code> is always the same — it loops through the <code>entries</code> and acts on every <code>entry</code> — we could keep the <code>observerFn</code> and pass in a <code>callback</code> to perform tasks when the element is resized.</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// Better \r\nfunction resizeObserver (node, callback) {\r\n  const observer = new ResizeObserver(observerFn)\r\n\r\n  function observerFn (entries) {\r\n    for (let entry of entries) {\r\n      callback(entry)\r\n    }\r\n  }\r\n\r\n  observer.observe(node);\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>To use this, we can pass <code>callback</code> into the <code>resizeObserver</code> — this makes <code>resizeObserver</code> operate somewhat like an event listener which we are already familiar with.</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// Usage of the resizeObserver function\r\nconst node = document.querySelector('#some-element')\r\nconst obs = resizeObserver(node, entry => {\r\n  // Do something with each entry\r\n})</code></pre>\r\n\r\n\r\n\r\n<p>We can make the callback slightly better by providing both <code>entry</code> and <code>entries</code>. There’s no performance hit for passing an additional variable so there’s no harm providing more flexibility here.</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"6\"><code markup=\"tt\">function resizeObserver (element, callback) {\r\n  const observer = new ResizeObserver(observerFn)\r\n\r\n  function observerFn (entries) {\r\n    for (let entry of entries) {\r\n      callback({ entry, entries })\r\n    }\r\n  }\r\n\r\n  observer.observe(element);\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>Then we can grab <code>entries</code> in the <code>callback</code> if we need to.</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// Usage of the resizeObserver function\r\n// ...\r\nconst obs = resizeObserver(node, ({ entry, entries }) => {\r\n  // ...\r\n})</code></pre>\r\n\r\n\r\n\r\n<p>Next, it makes sense to pass the callback as an option parameter instead of a variable. This will make <code>resizeObserver</code> more consistent with the <code><a href=\"https://splendidlabz.com/docs/utils/dom/mutation-observer\" rel=\"noopener\">mutationObserver</a></code> and <code><a href=\"https://splendidlabz.com/docs/utils/dom/intersection-observer\" rel=\"noopener\">intersectionObserver</a></code> functions that we will create in the next article.</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"1,2\"><code markup=\"tt\">function resizeObserver (element, options = {}) {\r\n  const { callback } = options\r\n  const observer = new ResizeObserver(observerFn)\r\n\r\n  function observerFn (entries) {\r\n    for (let entry of entries) {\r\n        callback({ entry, entries })\r\n      }\r\n  }\r\n\r\n  observer.observe(element);\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>Then we can use <code>resizeObserver</code> like this.</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const obs = resizeObserver(node, {\r\n  callback ({ entry, entries }) {\r\n    // Do something ...\r\n  }\r\n})</code></pre>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"the-observer-can-take-in-an-option-too\">The observer can take in an option too</h3>\r\n\r\n\r\n<p><code>ResizeObserver</code>‘s <code>observe</code> method can take in an <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver/observe#options\" rel=\"noopener\">options</a> object that contains one property, <code>box</code>. This determines whether the observer will observe changes to <code>content-box</code>, <code>border-box</code> or <code>device-pixel-content-box</code>.</p>\r\n\r\n\r\n\r\n<p>So, we need to extract these options from the <code>options</code> object and pass them to <code>observe</code>.</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">function resizeObserver (element, options = {}) {\r\n  const { callback, ...opts } = options\r\n  // ...\r\n  observer.observe(element, opts);\r\n}</code></pre>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"optional-event-listener-pattern\">Optional: Event listener pattern</h3>\r\n\r\n\r\n<p>I prefer using <code>callback</code> because it’s quite straightforward. But if you want to use a standard event listener pattern, we can do that, too. The trick here is to emit an event. We’ll call it <code>resize-obs</code> since <code>resize</code> is already taken.</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">function resizeObserver (element, options = {}) {\r\n  // ...\r\n  function observerFn (entries) {\r\n    for (let entry of entries) {\r\n      if (callback) callback({ entry, entries })\r\n      else {\r\n        node.dispatchEvent(\r\n          new CustomEvent('resize-obs', {\r\n            detail: { entry, entries },\r\n          }),\r\n        )\r\n      }\r\n    }\r\n  }\r\n\r\n  // ...\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>Then we can listen to the <code>resize-obs</code> event, like this:</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const obs = resizeObserver(node)\r\nnode.addEventListener('resize-obs', event => {\r\n  const { entry, entries } = event.detail\r\n})</code></pre>\r\n\r\n\r\n\r\n<p>Again, this is optional.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"unobserving-the-element\">Unobserving the element</h3>\r\n\r\n\r\n<p>One final step is to allow the user to stop observing the element(s) when observation is no longer required. To do this, we can return two of the <code>observer</code> methods:</p>\r\n\r\n\r\n\r\n<ul class=\"wp-block-list\">\r\n<li><code>unobserve</code>: Stops observing one <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element\" rel=\"noopener\"><code>Element</code></a></li>\r\n\r\n\r\n\r\n<li><code>disconnect</code>: Stops observing all <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element\" rel=\"noopener\"><code>Elements</code></a></li>\r\n</ul>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">function resizeObserver (node, options = {}) {\r\n  // ...\r\n  return {\r\n    unobserve(node) {\r\n      observer.unobserve(node)\r\n    },\r\n    \r\n    disconnect() {\r\n      observer.disconnet()\r\n    }\r\n  }\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>Both methods do the same thing for what we have built so far since we only allowed <code>resizeObserver</code> to observe one element. So, pick whatever method you prefer to stop observing the element.</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const obs = resizeObserver(node, {\r\n  callback ({ entry, entries }) {\r\n    // Do something ...\r\n  }\r\n})\r\n\r\n// Stops observing all elements \r\nobs.disconect()</code></pre>\r\n\r\n\r\n\r\n<p>With this, we’ve completed the creation of a better API for the <code>ResizeObserver</code> — the <code>resizeObserver</code> function.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"code-snippet\">Code snippet</h3>\r\n\r\n\r\n<p>Here’s the code we’ve wrote for <code>resizeObserver</code></p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">export function resizeObserver(node, options = {}) {\r\n  const observer = new ResizeObserver(observerFn)\r\n  const { callback, ...opts } = options\r\n\r\n  function observerFn(entries) {\r\n    for (const entry of entries) {\r\n      // Callback pattern\r\n      if (callback) callback({ entry, entries, observer })\r\n      // Event listener pattern\r\n      else {\r\n        node.dispatchEvent(\r\n          new CustomEvent('resize-obs', {\r\n            detail: { entry, entries, observer },\r\n          })\r\n        )\r\n      }\r\n    }\r\n  }\r\n \r\n  observer.observe(node)\r\n\r\n  return {\r\n    unobserve(node) {\r\n      observer.unobserve(node)\r\n    },\r\n    \r\n    disconnect() {\r\n      observer.disconnect()\r\n    }\r\n  }\r\n}</code></pre>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"using-this-in-practice-via-splendid-labz\">Using this in practice via Splendid Labz</h3>\r\n\r\n\r\n<p>Splendid Labz has a <a href=\"https://splendidlabz.com/docs/utils\" rel=\"noopener\"><code>utils</code></a> library that contains an enhanced version of the <code>resizeObserver</code> we made above. You can use it if you wanna use a enhanced observer, or if you don’t want to copy-paste the observer code into your projects.</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import { resizeObserver } from '@splendidlabz/utils/dom'\r\n\r\nconst node = document.querySelector('.some-element')\r\nconst obs = resizeObserver(node, {\r\n  callback ({ entry, entries }) {\r\n    /* Do what you want here */\r\n  }\r\n})</code></pre>\r\n\r\n\r\n\r\n<p><strong>Bonus:</strong> The Splendid Labz <code>resizeObserver</code> is capable of observing multiple elements at once. It can also unobserve multiple elements at once.</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const items = document.querySelectorAll('.elements')\r\nconst obs = resizeObserver(items, {\r\n  callback ({ entry, entries }) {\r\n    /* Do what you want here */\r\n  }\r\n})\r\n\r\n// Unobserves two items at once\r\nconst subset = [items[0], items[1]]\r\nobs.unobserve(subset) </code></pre>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"found-this-refactoring-helpful-\">Found this refactoring helpful?</h3>\r\n\r\n\r\n<p>Refactoring is ultra useful (and important) because its a process that lets us create code that’s easy to use or maintain.</p>\r\n\r\n\r\n\r\n<p>If you found this refactoring exercise useful, you might just love how I teach JavaScript to budding developers in my <a href=\"https://learnjavascript.today\" rel=\"noopener\">Learn JavaScript</a> course.</p>\r\n\r\n\r\n\r\n<p>In this course, you’ll learn to build 20 real-world components. For each component, we start off simple. Then we add features and you’ll learn to refactor along the way.</p>\r\n\r\n\r\n\r\n<p>That’s it!</p>\r\n\r\n\r\n\r\n<p>Hope you enjoyed this piece and see you in the next one.</p>\r\n<hr />\r\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/a-better-api-for-the-resize-observer/\">A Better API for the Resize Observer</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&utm_source=css-tricks.com&utm_campaign=family_&utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
    "createdAt": "2025-06-16T12:47:51.000+00:00",
    "link": "https://css-tricks.com/a-better-api-for-the-resize-observer/",
    "author": "",
    "site": {
      "id": "4",
      "url": "https://css-tricks.com/category/articles/feed",
      "name": "cssTrick"
    }
  },
  {
    "title": "A Better API for the Resize Observer",
    "content": "<p>Resize Observer, Mutation Observer, and Intersection Observers are all good APIs that are more performant than their older counterparts:</p>\r\n\r\n\r\n\r\n<ul class=\"wp-block-list\">\r\n<li><code>ResizeObserver</code> is <a href=\"https://web.dev/articles/resize-observer\" rel=\"noopener\">better</a> than the <code>resize</code> event</li>\r\n\r\n\r\n\r\n<li><code>MutationObserver</code> replaces the now deprecated <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MutationEvent\" rel=\"noopener\">Mutation Events</a></li>\r\n\r\n\r\n\r\n<li><code>IntersectionObserver</code> lets you do certain <code>scroll</code> interactions with <a href=\"https://www.smashingmagazine.com/2021/07/dynamic-header-intersection-observer/\" rel=\"noopener\">less performance overhead</a>.</li>\r\n</ul>\r\n\r\n\r\n\r\n<p>The API for these three observers are quite similar (but they have their differences which we will go into later). To use an observer, you have to follow the steps below:</p>\r\n\r\n\r\n\r\n<span id=\"more-386338\"></span>\r\n\r\n\r\n\r\n<ol class=\"wp-block-list\">\r\n<li><strong>Create a new observer with the <code>new</code> keyword:</strong> This observer takes in an observer function to execute.</li>\r\n\r\n\r\n\r\n<li><strong>Do something with the observed changes</strong>: This is done via the observer function that is passed into the observer.</li>\r\n\r\n\r\n\r\n<li><strong>Observe a specific element</strong>: By using the <code>observe</code> method.</li>\r\n\r\n\r\n\r\n<li><strong>(Optionally) unobserve the element</strong>: By using the <code>unobserve</code> or <code>disconnect</code> method. (depending on which observer you’re using).</li>\r\n</ol>\r\n\r\n\r\n\r\n<p>In practice, the above steps looks like this with the <code>ResizeObserver</code>.</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// Step 1: Create a new observer\r\nconst observer = new ResizeObserver(observerFn)\r\n\r\n// Step 2: Do something with the observed changes\r\nfunction observerFn (entries) {\r\n  for (let entry of entries) {\r\n    // Do something with entry\r\n  }\r\n}\r\n\r\n// Step 3: Observe an element\r\nconst element = document.querySelector('#some-element')\r\nobserver.observe(element);\r\n\r\n// Step 4 (optional): Disconnect the observer\r\nobserver.disconnect(element)</code></pre>\r\n\r\n\r\n\r\n<p>This looks clear (and understandable) after the steps have been made clear. But it can look like a mess without the comments:</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const observer = new ResizeObserver(observerFn)\r\n\r\nfunction observerFn (entries) {\r\n  for (let entry of entries) {\r\n    // Do something with entry\r\n  }\r\n}\r\n\r\nconst element = document.querySelector('#some-element')\r\nobserver.observe(element);</code></pre>\r\n\r\n\r\n\r\n<p>The good news is: I think we can improve the observer APIs and make them easier to use.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"the-resize-observer\">The Resize Observer</h3>\r\n\r\n\r\n<p>Let’s start with the <code><a href=\"https://splendidlabz.com/docs/utils/dom/resize-observer\" rel=\"noopener\">ResizeObserver</a></code> since it’s the simplest of them all. We’ll begin by writing a function that encapsulates the <code>resizeObserver</code> that we create.</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">function resizeObserver () {\r\n  // ... Do something\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>The easiest way to begin refactoring the <code>ResizeObserver</code> code is to put everything we’ve created into our <code>resizeObserver</code> first.</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">function resizeObserver () {\r\n  const observer = new ResizeObserver(observerFn)\r\n\r\n  function observerFn (entries) {\r\n    for (let entry of entries) {\r\n      // Do something with entry\r\n    }\r\n  }\r\n\r\n  const node = document.querySelector('#some-element')\r\n  observer.observe(node);\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>Next, we can pass the <code>element</code> into the function to make it simpler. When we do this, we can eliminate the <code>document.querySelector</code> line.</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">function resizeObserver (element) {\r\n  const observer = new ResizeObserver(observerFn)\r\n\r\n  function observerFn (entries) {\r\n    for (let entry of entries) {\r\n      // Do something with entry\r\n    }\r\n  }\r\n\r\n  observer.observe(node);\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>This makes the function more versatile since we can now pass any element into it.</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// Usage of the resizeObserver function\r\nconst node = document.querySelector('#some-element')\r\nconst obs = resizeObserver(node)</code></pre>\r\n\r\n\r\n\r\n<p>This is already much easier than writing all of the <code>ResizeObserver</code> code from scratch whenever you wish to use it.</p>\r\n\r\n\r\n\r\n<p>Next, it’s quite obvious that we have to pass in an observer function to the callback. So, we can potentially do this:</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// Not great\r\nfunction resizeObserver (node, observerFn) {\r\n  const observer = new ResizeObserver(observerFn)\r\n  observer.observe(node);\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>Since <code>observerFn</code> is always the same — it loops through the <code>entries</code> and acts on every <code>entry</code> — we could keep the <code>observerFn</code> and pass in a <code>callback</code> to perform tasks when the element is resized.</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// Better \r\nfunction resizeObserver (node, callback) {\r\n  const observer = new ResizeObserver(observerFn)\r\n\r\n  function observerFn (entries) {\r\n    for (let entry of entries) {\r\n      callback(entry)\r\n    }\r\n  }\r\n\r\n  observer.observe(node);\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>To use this, we can pass <code>callback</code> into the <code>resizeObserver</code> — this makes <code>resizeObserver</code> operate somewhat like an event listener which we are already familiar with.</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// Usage of the resizeObserver function\r\nconst node = document.querySelector('#some-element')\r\nconst obs = resizeObserver(node, entry => {\r\n  // Do something with each entry\r\n})</code></pre>\r\n\r\n\r\n\r\n<p>We can make the callback slightly better by providing both <code>entry</code> and <code>entries</code>. There’s no performance hit for passing an additional variable so there’s no harm providing more flexibility here.</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"6\"><code markup=\"tt\">function resizeObserver (element, callback) {\r\n  const observer = new ResizeObserver(observerFn)\r\n\r\n  function observerFn (entries) {\r\n    for (let entry of entries) {\r\n      callback({ entry, entries })\r\n    }\r\n  }\r\n\r\n  observer.observe(element);\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>Then we can grab <code>entries</code> in the <code>callback</code> if we need to.</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// Usage of the resizeObserver function\r\n// ...\r\nconst obs = resizeObserver(node, ({ entry, entries }) => {\r\n  // ...\r\n})</code></pre>\r\n\r\n\r\n\r\n<p>Next, it makes sense to pass the callback as an option parameter instead of a variable. This will make <code>resizeObserver</code> more consistent with the <code><a href=\"https://splendidlabz.com/docs/utils/dom/mutation-observer\" rel=\"noopener\">mutationObserver</a></code> and <code><a href=\"https://splendidlabz.com/docs/utils/dom/intersection-observer\" rel=\"noopener\">intersectionObserver</a></code> functions that we will create in the next article.</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"1,2\"><code markup=\"tt\">function resizeObserver (element, options = {}) {\r\n  const { callback } = options\r\n  const observer = new ResizeObserver(observerFn)\r\n\r\n  function observerFn (entries) {\r\n    for (let entry of entries) {\r\n        callback({ entry, entries })\r\n      }\r\n  }\r\n\r\n  observer.observe(element);\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>Then we can use <code>resizeObserver</code> like this.</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const obs = resizeObserver(node, {\r\n  callback ({ entry, entries }) {\r\n    // Do something ...\r\n  }\r\n})</code></pre>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"the-observer-can-take-in-an-option-too\">The observer can take in an option too</h3>\r\n\r\n\r\n<p><code>ResizeObserver</code>‘s <code>observe</code> method can take in an <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver/observe#options\" rel=\"noopener\">options</a> object that contains one property, <code>box</code>. This determines whether the observer will observe changes to <code>content-box</code>, <code>border-box</code> or <code>device-pixel-content-box</code>.</p>\r\n\r\n\r\n\r\n<p>So, we need to extract these options from the <code>options</code> object and pass them to <code>observe</code>.</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">function resizeObserver (element, options = {}) {\r\n  const { callback, ...opts } = options\r\n  // ...\r\n  observer.observe(element, opts);\r\n}</code></pre>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"optional-event-listener-pattern\">Optional: Event listener pattern</h3>\r\n\r\n\r\n<p>I prefer using <code>callback</code> because it’s quite straightforward. But if you want to use a standard event listener pattern, we can do that, too. The trick here is to emit an event. We’ll call it <code>resize-obs</code> since <code>resize</code> is already taken.</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">function resizeObserver (element, options = {}) {\r\n  // ...\r\n  function observerFn (entries) {\r\n    for (let entry of entries) {\r\n      if (callback) callback({ entry, entries })\r\n      else {\r\n        node.dispatchEvent(\r\n          new CustomEvent('resize-obs', {\r\n            detail: { entry, entries },\r\n          }),\r\n        )\r\n      }\r\n    }\r\n  }\r\n\r\n  // ...\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>Then we can listen to the <code>resize-obs</code> event, like this:</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const obs = resizeObserver(node)\r\nnode.addEventListener('resize-obs', event => {\r\n  const { entry, entries } = event.detail\r\n})</code></pre>\r\n\r\n\r\n\r\n<p>Again, this is optional.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"unobserving-the-element\">Unobserving the element</h3>\r\n\r\n\r\n<p>One final step is to allow the user to stop observing the element(s) when observation is no longer required. To do this, we can return two of the <code>observer</code> methods:</p>\r\n\r\n\r\n\r\n<ul class=\"wp-block-list\">\r\n<li><code>unobserve</code>: Stops observing one <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element\" rel=\"noopener\"><code>Element</code></a></li>\r\n\r\n\r\n\r\n<li><code>disconnect</code>: Stops observing all <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element\" rel=\"noopener\"><code>Elements</code></a></li>\r\n</ul>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">function resizeObserver (node, options = {}) {\r\n  // ...\r\n  return {\r\n    unobserve(node) {\r\n      observer.unobserve(node)\r\n    },\r\n    \r\n    disconnect() {\r\n      observer.disconnet()\r\n    }\r\n  }\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>Both methods do the same thing for what we have built so far since we only allowed <code>resizeObserver</code> to observe one element. So, pick whatever method you prefer to stop observing the element.</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const obs = resizeObserver(node, {\r\n  callback ({ entry, entries }) {\r\n    // Do something ...\r\n  }\r\n})\r\n\r\n// Stops observing all elements \r\nobs.disconect()</code></pre>\r\n\r\n\r\n\r\n<p>With this, we’ve completed the creation of a better API for the <code>ResizeObserver</code> — the <code>resizeObserver</code> function.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"code-snippet\">Code snippet</h3>\r\n\r\n\r\n<p>Here’s the code we’ve wrote for <code>resizeObserver</code></p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">export function resizeObserver(node, options = {}) {\r\n  const observer = new ResizeObserver(observerFn)\r\n  const { callback, ...opts } = options\r\n\r\n  function observerFn(entries) {\r\n    for (const entry of entries) {\r\n      // Callback pattern\r\n      if (callback) callback({ entry, entries, observer })\r\n      // Event listener pattern\r\n      else {\r\n        node.dispatchEvent(\r\n          new CustomEvent('resize-obs', {\r\n            detail: { entry, entries, observer },\r\n          })\r\n        )\r\n      }\r\n    }\r\n  }\r\n \r\n  observer.observe(node)\r\n\r\n  return {\r\n    unobserve(node) {\r\n      observer.unobserve(node)\r\n    },\r\n    \r\n    disconnect() {\r\n      observer.disconnect()\r\n    }\r\n  }\r\n}</code></pre>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"using-this-in-practice-via-splendid-labz\">Using this in practice via Splendid Labz</h3>\r\n\r\n\r\n<p>Splendid Labz has a <a href=\"https://splendidlabz.com/docs/utils\" rel=\"noopener\"><code>utils</code></a> library that contains an enhanced version of the <code>resizeObserver</code> we made above. You can use it if you wanna use a enhanced observer, or if you don’t want to copy-paste the observer code into your projects.</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import { resizeObserver } from '@splendidlabz/utils/dom'\r\n\r\nconst node = document.querySelector('.some-element')\r\nconst obs = resizeObserver(node, {\r\n  callback ({ entry, entries }) {\r\n    /* Do what you want here */\r\n  }\r\n})</code></pre>\r\n\r\n\r\n\r\n<p><strong>Bonus:</strong> The Splendid Labz <code>resizeObserver</code> is capable of observing multiple elements at once. It can also unobserve multiple elements at once.</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const items = document.querySelectorAll('.elements')\r\nconst obs = resizeObserver(items, {\r\n  callback ({ entry, entries }) {\r\n    /* Do what you want here */\r\n  }\r\n})\r\n\r\n// Unobserves two items at once\r\nconst subset = [items[0], items[1]]\r\nobs.unobserve(subset) </code></pre>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"found-this-refactoring-helpful-\">Found this refactoring helpful?</h3>\r\n\r\n\r\n<p>Refactoring is ultra useful (and important) because its a process that lets us create code that’s easy to use or maintain.</p>\r\n\r\n\r\n\r\n<p>If you found this refactoring exercise useful, you might just love how I teach JavaScript to budding developers in my <a href=\"https://learnjavascript.today\" rel=\"noopener\">Learn JavaScript</a> course.</p>\r\n\r\n\r\n\r\n<p>In this course, you’ll learn to build 20 real-world components. For each component, we start off simple. Then we add features and you’ll learn to refactor along the way.</p>\r\n\r\n\r\n\r\n<p>That’s it!</p>\r\n\r\n\r\n\r\n<p>Hope you enjoyed this piece and see you in the next one.</p>\r\n<hr />\r\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/a-better-api-for-the-resize-observer/\">A Better API for the Resize Observer</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&utm_source=css-tricks.com&utm_campaign=family_&utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
    "createdAt": "2025-06-16T12:47:51.000+00:00",
    "link": "https://css-tricks.com/a-better-api-for-the-resize-observer/",
    "author": "",
    "site": {
      "id": "5",
      "url": "https://css-tricks.com/category/articles/feed",
      "name": "cssTrick"
    }
  },
  {
    "title": "[Korean FE Article] 스트리밍 JSON",
    "content": "<div class=\"captioned-image-container\"><figure><a class=\"image-link image2 is-viewable-img\" target=\"_blank\" href=\"https://substackcdn.com/image/fetch/$s_!q_oK!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb50b8521-21ae-4e30-874e-cf4b3ac41da2_1200x630.png\" data-component-name=\"Image2ToDOM\"><div class=\"image2-inset\"><picture><source type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/$s_!q_oK!,w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb50b8521-21ae-4e30-874e-cf4b3ac41da2_1200x630.png 424w, https://substackcdn.com/image/fetch/$s_!q_oK!,w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb50b8521-21ae-4e30-874e-cf4b3ac41da2_1200x630.png 848w, https://substackcdn.com/image/fetch/$s_!q_oK!,w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb50b8521-21ae-4e30-874e-cf4b3ac41da2_1200x630.png 1272w, https://substackcdn.com/image/fetch/$s_!q_oK!,w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb50b8521-21ae-4e30-874e-cf4b3ac41da2_1200x630.png 1456w\" sizes=\"100vw\"><img src=\"https://substackcdn.com/image/fetch/$s_!q_oK!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb50b8521-21ae-4e30-874e-cf4b3ac41da2_1200x630.png\" width=\"1200\" height=\"630\" data-attrs=\"{\"src\":\"https://substack-post-media.s3.amazonaws.com/public/images/b50b8521-21ae-4e30-874e-cf4b3ac41da2_1200x630.png\",\"srcNoWatermark\":null,\"fullscreen\":null,\"imageSize\":null,\"height\":630,\"width\":1200,\"resizeWidth\":null,\"bytes\":48518,\"alt\":null,\"title\":null,\"type\":\"image/png\",\"href\":null,\"belowTheFold\":false,\"topImage\":true,\"internalRedirect\":\"https://kofearticle.substack.com/i/165810317?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb50b8521-21ae-4e30-874e-cf4b3ac41da2_1200x630.png\",\"isProcessing\":false,\"align\":null,\"offset\":false}\" class=\"sizing-normal\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/$s_!q_oK!,w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb50b8521-21ae-4e30-874e-cf4b3ac41da2_1200x630.png 424w, https://substackcdn.com/image/fetch/$s_!q_oK!,w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb50b8521-21ae-4e30-874e-cf4b3ac41da2_1200x630.png 848w, https://substackcdn.com/image/fetch/$s_!q_oK!,w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb50b8521-21ae-4e30-874e-cf4b3ac41da2_1200x630.png 1272w, https://substackcdn.com/image/fetch/$s_!q_oK!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb50b8521-21ae-4e30-874e-cf4b3ac41da2_1200x630.png 1456w\" sizes=\"100vw\" fetchpriority=\"high\"></picture><div class=\"image-link-expand\"><div class=\"pencraft pc-display-flex pc-gap-8 pc-reset\"><div class=\"pencraft pc-reset icon-container restack-image\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-refresh-cw\"><path d=\"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\"></path><path d=\"M21 3v5h-5\"></path><path d=\"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\"></path><path d=\"M8 16H3v5\"></path></svg></div><div class=\"pencraft pc-reset icon-container view-image\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-maximize2\"><polyline points=\"15 3 21 3 21 9\"></polyline><polyline points=\"9 21 3 21 3 15\"></polyline><line x1=\"21\" x2=\"14\" y1=\"3\" y2=\"10\"></line><line x1=\"3\" x2=\"10\" y1=\"21\" y2=\"14\"></line></svg></div></div></div></div></a></figure></div><blockquote><p>글 링크: <a href=\"https://hanameee.github.io/posts/progressive_json\">https://hanameee.github.io/posts/progressive_json</a></p></blockquote><h2>소개</h2><p><strong>점진적 JSON 스트리밍 과정을 통해 이해하는 리액트 서버 컴포넌트의 작동 방식</strong></p><p>JSON 형식은 서버 - 클라이언트 간 데이터 통신을 위해 흔하게 사용됩니다. 하지만 JSON은 전체 데이터가 도착해야 비로소 <code>사용이 가능하기에 </code>일부 데이터가 느리게 준비될 경우 전체 로딩이 지연되죠.</p><p>만약 서서히 로딩되는 이미지처럼 <strong>JSON도 점진적으로 전송</strong>할 수 있다면 어떨까요?</p><p>스트리밍 JSON은 아직 도착하지 않은 값은 비워두고 준비된 데이터부터 채워나가는 방식입니다. 부분의 지연이 전체의 지연으로 이어지는 기존 방식과는 달리, 먼저 준비된 것을 더 빠르게 제공할 수 있다는 장점이 있죠. 이는 곧 <strong>리액트 서버 컴포넌트가 UI를 스트리밍하는 핵심 작동 원리</strong>이기도 합니다.  </p><p>이 글은 단순한 스트리밍 JSON 예시에서 시작하여 리액트 서버 컴포넌트의 작동 원리를 쉽게 풀어 설명합니다. 나아가, 리액트 서버 컴포넌트를 Suspense와 함께 사용하여 UI의 로딩 상태를 유려하게 관리하는 방법에 대해 얘기합니다.</p><p>리액트가 그리는 미래인 스트리밍 UI 방식에 대해 이해하고 싶은 분들께 이 글을 추천드립니다 😊</p>",
    "createdAt": "2025-06-13T00:30:33.000+00:00",
    "link": "https://kofearticle.substack.com/p/korean-fe-article-json",
    "author": "",
    "site": {
      "id": "3",
      "url": "https://kofearticle.substack.com/feed",
      "name": "kofearticle"
    }
  },
  {
    "title": "Breaking Boundaries: Building a Tangram Puzzle With (S)CSS",
    "content": "<p>For years, I believed that drag-and-drop games — especially those involving rotation, spatial logic, and puzzle solving — were the exclusive domain of JavaScript. Until one day, I asked AI:</p>\r\n\r\n\r\n\r\n<blockquote class=\"wp-block-quote is-layout-flow wp-block-quote-is-layout-flow\">\r\n<p><em>“Is it possible to build a fully interactive Tangram puzzle game using only CSS?”</em></p>\r\n</blockquote>\r\n\r\n\r\n\r\n<p>The answer: <em>“No — not really. You’ll need JavaScript.”</em> That was all the motivation I needed to prove otherwise.</p>\r\n\r\n\r\n\r\n<span id=\"more-386648\"></span>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_gbOBMqm\" src=\"//codepen.io/anon/embed/preview/gbOBMqm?height=450&theme-id=1&slug-hash=gbOBMqm&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed gbOBMqm\" title=\"CodePen Embed gbOBMqm\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>But first, let’s ask the obvious question: <em>Why would anyone do this?</em></p>\r\n\r\n\r\n\r\n<p>Well…</p>\r\n\r\n\r\n\r\n<ul class=\"wp-block-list\">\r\n<li>To know how far CSS can be pushed in creating interactive UIs.</li>\r\n\r\n\r\n\r\n<li>To get better at my CSS skills.</li>\r\n\r\n\r\n\r\n<li>And it’s fun!</li>\r\n</ul>\r\n\r\n\r\n\r\n<p>Fair enough?</p>\r\n\r\n\r\n\r\n<p>Now, here’s the unsurprising truth: CSS isn’t exactly made for this. It’s not a logic language, and let’s be honest, it’s not particularly dynamic either. (Sure, we have CSS variables and some handy built-in functions now, hooray!)</p>\r\n\r\n\r\n\r\n<p>In JavaScript, we naturally think in terms of functions, loops, conditions, objects, comparisons. We write logic, abstract things into methods, and eventually ship a bundle that the browser understands. And once it’s shipped? We rarely look at that final JavaScript bundle — we just focus on keeping it lean.</p>\r\n\r\n\r\n\r\n<p>Now ask yourself: isn’t that exactly what Sass does for CSS?</p>\r\n\r\n\r\n\r\n<p>Why should we hand-write endless lines of repetitive CSS when we can use mixins and functions to generate it — cleanly, efficiently, and without caring how many lines it takes, as long as the output is optimized?</p>\r\n\r\n\r\n\r\n<p>So, we put it to the test and it turns out Sass can replace JavaScript, at least when it comes to low-level logic and puzzle behavior. With nothing but maps, mixins, functions, and a whole lot of math, we managed to bring our Tangram puzzle to life, no JavaScript required.</p>\r\n\r\n\r\n\r\n<p>Let the (CSS-only) games begin! 🎉</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"the-game\">The game</h3>\r\n\r\n\r\n<p>The game consists of seven pieces: the classic Tangram set. Naturally, these pieces can be arranged into a perfect square (and many other shapes, too). But we need a bit more than just static pieces.</p>\r\n\r\n\r\n\r\n<p>So here’s what I am building:</p>\r\n\r\n\r\n\r\n<ul class=\"wp-block-list\">\r\n<li>A puzzle goal, which is the target shape the player has to recreate.</li>\r\n\r\n\r\n\r\n<li>A start button that shuffles all the pieces into a staging area.</li>\r\n\r\n\r\n\r\n<li>Each piece is clickable and interactive.</li>\r\n\r\n\r\n\r\n<li>The puzzle should let the user know when they get a piece wrong and also celebrate when they finish the puzzle.</li>\r\n</ul>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"step-1-html-structure\">The HTML structure</h3>\r\n\r\n\r\n<p>I started by setting up the HTML structure, which is no small task, considering the number of elements involved.</p>\r\n\r\n\r\n\r\n<ul class=\"wp-block-list\">\r\n<li>Each shape was given seven radio buttons. I chose radios over checkboxes to take advantage of their built-in exclusivity. Only one can be selected within the same group. This made it much easier to track which shape and state were currently active.</li>\r\n\r\n\r\n\r\n<li>The start button? Also a radio input. A checkbox could’ve worked too, but for the sake of consistency, I stuck with radios across the board.</li>\r\n\r\n\r\n\r\n<li>The puzzle map itself is just a plain old <code><div></code>, simple and effective.</li>\r\n\r\n\r\n\r\n<li>For rotation, we added eight radio buttons, each representing a 45-degree increment: 45°, 90°, 135°, all the way to 360°. These simulate rotation controls entirely in CSS.</li>\r\n\r\n\r\n\r\n<li>Every potential shadow position got its own radio button too. (Yes, it’s a lot, I know.)</li>\r\n\r\n\r\n\r\n<li>And to wrap it all up, I included a classic reset button inside a <code><form></code> using <code><button type=\"reset\"></code>, so players can easily start over at any point.</li>\r\n</ul>\r\n\r\n\r\n\r\n<p>Given the sheer number of elements required, I used Pug to generate the HTML more efficiently. It was purely a convenience choice. It doesn’t affect the logic or behavior of the puzzle in any way.</p>\r\n\r\n\r\n\r\n<p>Below is a sample of the compiled HTML. It might look overwhelming at first glance (and this is just a portion of it!), but it illustrates the structural complexity involved. This section is collapsed to not nuke your screen, but it can be expanded if you’d like to explore it.</p>\r\n\r\n\r\n\r\n<details >\r\n  <summary>\r\n          Open HTML Code      </summary>\r\n  \r\n\r\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\"><div class=\"wrapper\">\r\n  <div class=\"tanagram-box\"></div>\r\n  <div class=\"tanagram-box\"></div>\r\n  <form class=\"container\">\r\n    <input class=\"hide_input start\" type=\"checkbox\" id=\"start\" autofocus />\r\n    <button class=\"start-button\" type=\"reset\" id=\"restart\">Restart</button>\r\n    <label class=\"start-button\" for=\"start\">Start </label>\r\n    <div class=\"shadow\">\r\n      <input class=\"hide_input\" type=\"radio\" id=\"blueTriangle-tan\" name=\"tan-active\" />\r\n      <input class=\"hide_input\" type=\"radio\" id=\"yellowTriangle-tan\" name=\"tan-active\" />\r\n      <!-- Inputs for others tans -->\r\n      <input class=\"hide_input\" type=\"radio\" id=\"rotation-reset\" name=\"tan-active\" />\r\n      <input class=\"hide_input\" type=\"radio\" id=\"rotation-45\" name=\"tan-rotation\" />\r\n      <input class=\"hide_input\" type=\"radio\" id=\"rotation-90\" name=\"tan-rotation\" />\r\n      <!--radios for 90, 225, 315, 360 -->\r\n\r\n      <input class=\"hide_input\" type=\"checkbox\" id=\"yellowTriangle-tan-1-135\" name=\"tan-rotation\" />\r\n      <input class=\"hide_input\" type=\"checkbox\" id=\"yellowTriangle-tan-1-225\" name=\"tan-rotation\" />\r\n      <!-- radio for every possible shape shadows-->\r\n\r\n      <label class=\"rotation rot\" for=\"rotation-45\" id=\"rot45\">⟲</label>\r\n      <label class=\"rotation rot\" for=\"rotation-90\" id=\"rot90\">⟲</label>\r\n      <!--radios for 90, 225, 315, 360 -->\r\n      <label class=\"rotation\" for=\"rotation-reset\" id=\"rotReset\">✘</label>\r\n\r\n      <label class=\"blueTriangle tans\" for=\"blueTriangle-tan\" id=\"tanblueTrianglelab\"></label>\r\n      <div class=\"tans tan_blocked\" id=\"tanblueTrianglelabRes\"></div>\r\n      <!-- labels for every tan and disabled div -->\r\n\r\n      <label class=\"blueTriangle tans\" for=\"blueTriangle-tan-1-90\" id=\"tanblueTrianglelab-1-90\"></label>\r\n      <label class=\"blueTriangle tans\" for=\"blueTriangle-tan-1-225\" id=\"tanblueTrianglelab-1-225\"></label>\r\n      <!-- labels radio for every possible shape shadows-->\r\n      <div class=\"shape\"></div>\r\n    </div>\r\n  </form>\r\n  <div class=\"tanagram-box\"></div>\r\n  <div class=\"tanagram-box\"></div>\r\n  <div class=\"tanagram-box\"></div>\r\n  <div class=\"tanagram-box\"></div>\r\n  <div class=\"tanagram-box\"></div>\r\n</div></code></pre>\r\n\r\n\r\n</details>\r\n\r\n<h3 class=\"wp-block-heading\" id=\"step-2-creating-maps-for-shape-data\">Creating maps for shape data</h3>\r\n\r\n\r\n<p>Now that HTML skeleton is ready, it’s time to inject it with some real power. That’s where our <strong>Sass maps</strong> come in, and here’s where the puzzle logic starts to shine.</p>\r\n\r\n\r\n\r\n<p class=\"is-style-explanation\"><strong>Note:</strong> Maps in Sass hold pairs of keys and values, and make it easy to look up a value by its corresponding key. Like objects in JavaScript, dictionaries in Python and, well, maps in C++.</p>\r\n\r\n\r\n\r\n<p>I’m mapping out all the core data needed to control each tangram piece (tan): its color, shape, position, and even interaction logic. These maps contain:</p>\r\n\r\n\r\n\r\n<ul class=\"wp-block-list\">\r\n<li>the <code>background-color</code> for each tan,</li>\r\n\r\n\r\n\r\n<li>the <code>clip-path</code> coordinates that define their shapes,</li>\r\n\r\n\r\n\r\n<li>the initial position for each tan,</li>\r\n\r\n\r\n\r\n<li>the position of the blocking <code>div</code> (which disables interaction when a tan is selected),</li>\r\n\r\n\r\n\r\n<li>the shadow positions (coordinates for the tan’s silhouette displayed on the task board),</li>\r\n\r\n\r\n\r\n<li>the grid information, and</li>\r\n\r\n\r\n\r\n<li>the winning combinations — the exact target coordinates for each tan, marking the correct solution.</li>\r\n</ul>\r\n\r\n\r\n\r\n<pre rel=\"SCSS\" class=\"wp-block-csstricks-code-block language-scss\" data-line=\"\"><code markup=\"tt\">$colors: ( blue-color: #53a0e0, yellow-color: #f7db4f, /* Colors for each tan */ );\r\n$nth-child-grid: ( 1: (2, 3, 1, 2, ), 2: ( 3, 4, 1, 2, ), 4: ( 1, 2, 2, 3, ), /* More entries to be added */);\r\n$bluePosiblePositions: ( 45: none, 90: ( (6.7, 11.2), ), 135: none, 180: none, /* Positions defined up to 360 degrees */);\r\n/* Other tans */\r\n\r\n/* Data defined for each tan */\r\n$tansShapes: (\r\n  blueTriangle: (\r\n    color: map.get($colors, blue-color),\r\n    clip-path: ( 0 0, 50 50, 0 100, ),\r\n    rot-btn-position: ( -20, -25, ),\r\n    exit-mode-btn-position: ( -20, -33, ),\r\n    tan-position: ( -6, -37, ),\r\n    diable-lab-position: ( -12, -38, ),\r\n    poss-positions: $bluePosiblePositions,\r\n    correct-position: ((4.7, 13.5), (18.8, 13.3), ),\r\n    transform-origin: ( 4.17, 12.5,),\r\n  ),\r\n);\r\n\r\n/* Remaining 7 combinations */\r\n$winningCombinations: (\r\n  combo1: (\r\n    (blueTriangle, 1, 360),\r\n    (yellowTriangle, 1, 225),\r\n    (pinkTriangle, 1, 180),\r\n    (redTriangle, 4, 360),\r\n    (purpleTriangle, 2, 225),\r\n    (square, 1, 90),\r\n    (polygon, 4, 90),\r\n  ),\r\n);</code></pre>\r\n\r\n\r\n\r\n<p>You can see this in action on CodePen, where these maps drive the actual look and behavior of each puzzle piece. At this point, there’s no visible change in the preview. We’ve simply prepared and stored the data for later use.</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_YPPjowr\" src=\"//codepen.io/anon/embed/preview/YPPjowr?height=450&theme-id=1&slug-hash=YPPjowr&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed YPPjowr\" title=\"CodePen Embed YPPjowr\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"step-3-using-mixins-to-read-from-maps\">Using mixins to read from maps</h3>\r\n\r\n\r\n<p>The main idea is to create reusable mixins that will read data from the maps and apply it to the corresponding CSS rules when needed.</p>\r\n\r\n\r\n\r\n<p>But before that, we’ve elevated things to a higher level by making one key decision: We never hard-coded units directly inside the maps. Instead, we built a reusable utility function that dynamically adds the desired unit (e.g., <code>vmin</code>, <code>px</code>, etc.) to any numeric value when it’s being used. This way, when can use our maps however we please.</p>\r\n\r\n\r\n\r\n<pre rel=\"SCSS\" class=\"wp-block-csstricks-code-block language-scss\" data-line=\"\"><code markup=\"tt\">@function get-coordinates($data, $key, $separator, $unit) {\r\n  $coordinates: null;\r\n\r\n  // Check if the first argument is a map\r\n  @if meta.type-of($data) == \"map\" {\r\n    // If the map contains the specified key\r\n    @if map.has-key($data, $key) {\r\n      // Get the value associated with the key (expected to be a list of coordinates)\r\n      $coordinates: map.get($data, $key);\r\n    }\r\n\r\n  //  If the first argument is a list\r\n  } @else if meta.type-of($data) == \"list\" {\r\n    // Ensure the key is a valid index (1-based) within the list\r\n    @if meta.type-of($key) == \"number\" and $key > 0 and $key <= list.length($data) {\r\n      // Retrieve the item at the specified index\r\n      $coordinates: list.nth($data, $key);\r\n    }\r\n\r\n  //  If neither map nor list, throw an error\r\n  } @else {\r\n    @error \"Invalid input: First argument must be a map or a list.\";\r\n  }\r\n\r\n  // If no valid coordinates were found, return null\r\n  @if $coordinates == null {\r\n    @return null;\r\n  }\r\n\r\n  //  Extract x and y values from the list\r\n  $x: list.nth($coordinates, 1);\r\n  $y: list.nth($coordinates, -1); // -1 gets the last item (y)\r\n\r\n  //  Return the combined x and y values with units and separator\r\n  @return #{$x}#{$unit}#{$separator}#{$y}#{$unit};\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>Sure, nothing’s showing up in the preview yet, but the real magic starts now.</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_ByyPgMg\" src=\"//codepen.io/anon/embed/preview/ByyPgMg?height=450&theme-id=1&slug-hash=ByyPgMg&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed ByyPgMg\" title=\"CodePen Embed ByyPgMg\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>Now we move on to writing mixins. I’ll explain the approach in detail for the first mixin, and the rest will be described through comments.</p>\r\n\r\n\r\n\r\n<p>The first mixin dynamically applies <code>grid-column</code> and <code>grid-row</code> placement rules to child elements based on values stored in a map. Each entry in the map corresponds to an element index (1 through 8) and contains a list of four values: <code>[start-col, end-col, start-row, end-row]</code>.</p>\r\n\r\n\r\n\r\n<pre rel=\"SCSS\" class=\"wp-block-csstricks-code-block language-scss\" data-line=\"\"><code markup=\"tt\">@mixin tanagram-grid-positioning($nth-child-grid) {\r\n  // Loop through numbers 1 to 8, corresponding to the tanam pieces\r\n  @for $i from 1 through 8 {\r\n\r\n    // Check if the map contains a key for the current piece (1-8)\r\n    @if map.has-key($nth-child-grid, $i) {\r\n\r\n      // Get the grid values for this piece: [start-column, end-column, start-row, end-row]\r\n      $values: map.get($nth-child-grid, $i);\r\n\r\n      // Target the nth child (piece) and set its grid positions\r\n      &:nth-child(#{$i}) {\r\n        // Set grid-column: start and end values based on the first two items in the list\r\n        grid-column: #{list.nth($values, 1)} / #{list.nth($values, 2)};\r\n\r\n        // Set grid-row: start and end values based on the last two items in the list\r\n        grid-row: #{list.nth($values, 3)} / #{list.nth($values, 4)};\r\n      }\r\n    }\r\n  }\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>We can expect the following CSS to be generated:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.tanagram-box:nth-child(1) {\r\n  grid-column: 2 / 3;\r\n  grid-row: 1 / 2;\r\n}\r\n\r\n.tanagram-box:nth-child(2) {\r\n  grid-column: 3 / 4;\r\n  grid-row: 1 / 2;\r\n}</code></pre>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_xbbJoLq\" src=\"//codepen.io/anon/embed/preview/xbbJoLq?height=450&theme-id=1&slug-hash=xbbJoLq&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed xbbJoLq\" title=\"CodePen Embed xbbJoLq\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>In this mixin, my goal was actually to create all the shapes (tans). I am using <code>clip-path</code>. There were ideas to use fancy SVG images, but this test project is more about testing the logic rather than focusing on beautiful design. For this reason, the simplest solution was to cut the elements according to dimensions while they are still in the square (the initial position of all the tans).</p>\r\n\r\n\r\n\r\n<p>So, in this case, through a static calculation, the <code>$tansShapes</code> map was updated with the <code>clip-path</code> property:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">clip-path: (0 0, 50 50, 0 100);</code></pre>\r\n\r\n\r\n\r\n<p>This contains the clip points for all the tans. In essence, this mixin shapes and colors each tan accordingly.</p>\r\n\r\n\r\n\r\n<pre rel=\"SCSS\" class=\"wp-block-csstricks-code-block language-scss\" data-line=\"\"><code markup=\"tt\">@mixin set-tan-clip-path($tanName, $values) {\r\n  //  Initialize an empty list to hold the final clip-path points\r\n  $clip-path-points: ();\r\n\r\n  // Extract the 'clip-path' data from the map, which contains coordinate pairs\r\n  $clip-path-key: map.get($values, clip-path);\r\n\r\n  // Get the number of coordinate pairs to loop through\r\n  $count: list.length($clip-path-key);\r\n\r\n  //  Loop through each coordinate point\r\n  @for $i from 1 through $count {\r\n    //  Convert each pair of numbers into a formatted coordinate string with units\r\n    $current-point: get-coordinates($clip-path-key, $i, \" \", \"%\");\r\n\r\n    //  Add the formatted coordinate to the list, separating each point with a comma\r\n    $clip-path-points: list.append($clip-path-points, #{$current-point}, comma);\r\n  }\r\n\r\n  //  Style for the preview element (lab version), using the configured background color\r\n  #tan#{$tanName}lab {\r\n    background: map.get($values, color);\r\n    clip-path: polygon(#{$clip-path-points}); // Apply the full list of clip-path points\r\n  }\r\n\r\n  //  Apply the same clip-path to the actual tan element\r\n  .#{$tanName} {\r\n    clip-path: polygon(#{$clip-path-points});\r\n  }\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>and output in CSS should be:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.blueTriangle {\r\n  clip-path: polygon(0% 0%, 50% 50%, 0% 100%);\r\n}\r\n/* other tans */</code></pre>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_bNNxbbW\" src=\"//codepen.io/anon/embed/preview/bNNxbbW?height=450&theme-id=1&slug-hash=bNNxbbW&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed bNNxbbW\" title=\"CodePen Embed bNNxbbW\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"start-logic\">Start logic</h3>\r\n\r\n\r\n<p>Alright, now I’d like to clarify what should happen first when the game loads.</p>\r\n\r\n\r\n\r\n<p>First, with a click on the Start button, all the tans “go to their positions.” In reality, we assign them a <code>transform: translate()</code> with specific coordinates and a rotation.</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.start:checked ~ .shadow #tanblueTrianglelab {\r\n  transform-origin: 4.17vmin 12.5vmin;\r\n  transform: translate(-6vmin,-37vmin) rotate(360deg);\r\n  cursor: pointer;\r\n}</code></pre>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_LEEJYEx\" src=\"//codepen.io/anon/embed/preview/LEEJYEx?height=450&theme-id=1&slug-hash=LEEJYEx&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed LEEJYEx\" title=\"CodePen Embed LEEJYEx\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>So, we still maintain this pattern. We use transform and simply change the positions or angles (in the maps) of both the tans and their shadows on the task board.</p>\r\n\r\n\r\n\r\n<p>When any tan is clicked, the rotation button appears. By clicking on it, the tan should rotate around its center, and this continues with each subsequent click. There are actually eight radio buttons, and with each click, one disappears and the next one appears. When we reach the last one, clicking it makes it disappear and the first one reappears. This way, we get the impression of clicking the same button (they are, of course, styled the same) and being able to click (rotate the tan) infinitely. This is exactly what the following mixin enables.</p>\r\n\r\n\r\n\r\n<pre rel=\"SCSS\" class=\"wp-block-csstricks-code-block language-scss\" data-line=\"\"><code markup=\"tt\">@mixin set-tan-rotation-states($tanName, $values, $angles, $color) {\r\n  // This mixin dynamically applies rotation UI styles based on a tan's configuration.\r\n  // It controls the positioning and appearance of rotation buttons and visual feedback when a rotation state is active.\r\n  @each $angle in $angles{\r\n    & ~ #rot#{$angle}{ transform: translate(get-coordinates($values,rot-btn-position,',',vmin )); background: $color;}\r\n    & ~ #rotation-#{$angle}:checked{\r\n      @each $key in map.keys($tansShapes){\r\n        & ~ #tan#{$key}labRes{ visibility: visible; background:rgba(0,0,0,0.4); }\r\n        & ~ #tan#{$key}lab{ opacity:.3; }\r\n        & ~ #rotReset{ visibility: visible; }\r\n      } \r\n    }\r\n  }\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>And the generated CSS should be:</p>\r\n\r\n\r\n\r\n<pre rel=\"SCSS\" class=\"wp-block-csstricks-code-block language-scss\" data-line=\"\"><code markup=\"tt\">#blueTriangle-tan:checked ~ #rotation-45:checked ~ #tanblueTrianglelab {\r\n  transform: translate(-6vmin,-37vmin) rotate(45deg);\r\n}\r\n\r\n#blueTriangle-tan:checked ~ #rotation-45:checked ~ #tanblueTrianglelabRes {\r\n  visibility: hidden;\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>OK, the following mixins use the <code>set-clip-path</code> and <code>set-rotation</code> mixins. They contain all the information about the tans and their behavior in relation to which tan is clicked and which rotation is selected, as well as their positions (as defined in the second mixin).</p>\r\n\r\n\r\n\r\n<pre rel=\"SCSS\" class=\"wp-block-csstricks-code-block language-scss\" data-line=\"\"><code markup=\"tt\">@mixin generate-tan-shapes-and-interactions($tansShapes) {\r\n// Applies styling logic and UI interactions for each individual tan shape from the $tansShapes map.\r\n  @each $tanName, $values in $tansShapes{\r\n    $color: color.scale(map.get($values, color), $lightness: 10%); \r\n    $angles: (45, 90, 135, 180, 225, 270, 315, 360); \r\n    @include set-tan-clip-path($tanName, $values);\r\n\r\n    ##{$tanName}-tan:checked{\r\n      & ~ #tan#{$tanName}Res{ visibility:hidden; }\r\n      & ~ #tan#{$tanName}lab{opacity: 1 !important;background: #{$color};cursor:auto;}\r\n      @each $key in map.keys($tansShapes){\r\n          & ~ #tan#{$tanName}Res:checked ~ #tan#{$key}labRes{visibility: visible;}\r\n      }\r\n      & ~  #rot45{display: flex;visibility: visible;}\r\n      & ~ #rotReset{ transform: translate(get-coordinates($values, exit-mode-btn-position,',', vmin)); }\r\n      @include set-tan-rotation-states($tanName, $values, $angles, $color);\r\n    }  \r\n  }\r\n}</code></pre>\r\n\r\n\r\n\r\n<pre rel=\"SCSS\" class=\"wp-block-csstricks-code-block language-scss\" data-line=\"\"><code markup=\"tt\">@mixin set-initial-tan-position($tansShapes) {\r\n// This mixin sets the initial position and transformation for both the interactive (`lab`) and shadow (`labRes`) versions\r\n// of each tan shape, based on coordinates provided in the $tansShapes map.\r\n @each $tanName, $values in $tansShapes{\r\n    & ~ .shadow #tan#{$tanName}lab{\r\n      transform-origin: get-coordinates($values, transform-origin,' ' ,vmin);\r\n      transform: translate( get-coordinates($values,tan-position,',', vmin)) rotate(360deg) ;\r\n      cursor: pointer;\r\n    }\r\n    & ~ .shadow #tan#{$tanName}labRes{\r\n      visibility:hidden;\r\n      transform: translate(get-coordinates($values,diable-lab-position,',',vmin)); \r\n    }\r\n  }\r\n}</code></pre>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_NPPLqKg\" src=\"//codepen.io/anon/embed/preview/NPPLqKg?height=450&theme-id=1&slug-hash=NPPLqKg&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed NPPLqKg\" title=\"CodePen Embed NPPLqKg\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>As mentioned earlier, when a tan is clicked, one of the things that becomes visible is its shadow — a silhouette that appears on the task board.</p>\r\n\r\n\r\n\r\n<p>These shadow positions (coordinates) are currently defined statically. Each shadow has a specific place on the map, and a mixin reads this data and applies it to the shadow using <code>transform: translate()</code>.</p>\r\n\r\n\r\n\r\n<p>When the clicked tan is rotated, the number of visible shadows on the task board can change, as well as their angles, which is expected.</p>\r\n\r\n\r\n\r\n<p>Of course, special care was taken with naming conventions. Each shadow element gets a unique ID, made from the name (inherited from its parent tan) and a number that represents its sequence position for the given angle.</p>\r\n\r\n\r\n\r\n<p>Pretty cool, right? That way, we avoid complicated naming patterns entirely!</p>\r\n\r\n\r\n\r\n<pre rel=\"SCSS\" class=\"wp-block-csstricks-code-block language-scss\" data-line=\"\"><code markup=\"tt\">@mixin render-possible-tan-positions( $name, $angle, $possiblePositions, $visibility, $color, $id, $transformOrigin ) {\r\n    // This mixin generates styles for possible positions of a tan shape based on its name, rotation angle, and configuration map.\r\n    // It handles both squares and polygons, normalizing their rotation angles accordingly and applying transform styles if positions exist.}\r\n  @if $name == 'square' {\r\n    $angle: normalize-angle($angle); // Normalizujemo ugao ako je u pitanju square\r\n  } @else if $name == 'polygon'{\r\n    $angle: normalize-polygon-angle($angle);\r\n  }\r\n  @if map.has-key($possiblePositions, $angle) {\r\n    $values: map.get($possiblePositions, $angle);\r\n\r\n    @if $values != none {\r\n      $count: list.length($values);\r\n\r\n      @for $i from 1 through $count {\r\n        $position: get-coordinates($values, $i, ',', vmin);\r\n        & ~ #tan#{$name}lab-#{$i}-#{$angle} { \r\n          @if $visibility == visible {\r\n            visibility: visible;\r\n            background-color: $color;\r\n            opacity: .2;\r\n            z-index: 2;\r\n            transform-origin: #{$transformOrigin};\r\n            transform: translate(#{$position}) rotate(#{$angle}deg);\r\n          } @else if $visibility == hidden { visibility: hidden; }\r\n          &:hover{ opacity: 0.5; cursor: pointer; }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>The generated CSS:</p>\r\n\r\n\r\n\r\n<pre rel=\"SCSS\" class=\"wp-block-csstricks-code-block language-scss\" data-line=\"\"><code markup=\"tt\">#blueTriangle-tan:checked ~ #tanblueTrianglelab-1-360 {\r\n  visibility: visible;\r\n  background-color: #53a0e0;\r\n  opacity: 0.2;\r\n  z-index: 2;\r\n  transform-origin: 4.17vmin 12.5vmin;\r\n  transform: translate(4.7vmin,13.5vmin) rotate(360deg);\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>This next mixin is tied to the previous one and manages when and how the tan shadows appear while their parent tan is being rotated using the button. It listens for the current rotation angle and checks whether there are any shadow positions defined for that specific angle. If there are, it displays them; if not — no shadows!</p>\r\n\r\n\r\n\r\n<pre rel=\"SCSS\" class=\"wp-block-csstricks-code-block language-scss\" data-line=\"\"><code markup=\"tt\">@mixin render-possible-positions-by-rotation {\r\n   // This mixin applies rotation to each tan shape. It loops through each tan, calculates its possible positions for each angle, and handles visibility and transformation.\r\n   // It ensures that rotation is applied correctly, including handling the transitions between various tan positions and visibility states.\r\n @each $tanName, $values in $tansShapes{\r\n    $possiblePositions: map.get($values, poss-positions);\r\n    $possibleTansColor: map.get($values, color);\r\n    $validPosition: get-coordinates($values, correct-position,',' ,vmin);\r\n    $transformOrigin: get-coordinates($values,transform-origin,' ' ,vmin); \r\n    $rotResPosition: get-coordinates($values,exit-mode-btn-position ,',' ,vmin );\r\n    $angle: 0;\r\n    @for $i from 1 through 8{\r\n      $angle: $i * 45;\r\n      $nextAngle: if($angle + 45 > 360, 45, $angle + 45);\r\n      @include render-position-feedback-on-task($tanName,$angle, $possiblePositions,$possibleTansColor, #{$tanName}-tan, $validPosition,$transformOrigin, $rotResPosition);   \r\n        ##{$tanName}-tan{\r\n        @include render-possible-tan-positions($tanName,$angle, $possiblePositions,hidden, $possibleTansColor, #{$tanName}-tan,$transformOrigin)\r\n      }\r\n        ##{$tanName}-tan:checked{\r\n          @include render-possible-tan-positions($tanName,360, $possiblePositions,visible, $possibleTansColor, #{$tanName}-tan,$transformOrigin);\r\n          & ~ #rotation-#{$angle}:checked {\r\n            @include render-possible-tan-positions($tanName,360, $possiblePositions,hidden, $possibleTansColor, #{$tanName}-tan,$transformOrigin);\r\n            & ~ #tan#{$tanName}lab{transform:translate( get-coordinates($values,tan-position,',', vmin))  rotate(#{$angle}deg) ;}\r\n            & ~ #tan#{$tanName}labRes{ visibility: hidden; }\r\n            & ~ #rot#{$angle}{ visibility: hidden; }\r\n            & ~ #rot#{$nextAngle}{ visibility: visible } \r\n            @include render-possible-tan-positions($tanName,$angle, $possiblePositions,visible, $possibleTansColor, #{$tanName}-tan,$transformOrigin);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}</code></pre>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_KwwxVOy\" src=\"//codepen.io/anon/embed/preview/KwwxVOy?height=450&theme-id=1&slug-hash=KwwxVOy&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed KwwxVOy\" title=\"CodePen Embed KwwxVOy\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>When a tan’s shadow is clicked, the corresponding tan should move to that shadow’s position. The next mixin then checks whether this new position is the correct one for solving the puzzle. If it is correct, the tan gets a brief blinking effect and becomes unclickable, signaling it’s been placed correctly. If it’s not correct, the tan simply stays at the shadow’s location. There’s no effect and it remains draggable/clickable.</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_QwwVbqr\" src=\"//codepen.io/anon/embed/preview/QwwVbqr?height=450&theme-id=1&slug-hash=QwwVbqr&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed QwwVbqr\" title=\"CodePen Embed QwwVbqr\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>Of course, there’s a list of all the correct positions for each tan. Since some tans share the same size — and some can even combine to form larger, existing shapes — we have multiple valid combinations. For this Camel task, all of them were taken into account. A dedicated map with these combinations was created, along with a mixin that reads and applies them.</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_gbOBMqm\" src=\"//codepen.io/anon/embed/preview/gbOBMqm?height=450&theme-id=1&slug-hash=gbOBMqm&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed gbOBMqm\" title=\"CodePen Embed gbOBMqm\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>At the end of the game, when all tans are placed in their correct positions, we trigger a “merging” effect — and the silhouette of the camel turns yellow. At that point, the only remaining action is to click the Restart button.</p>\r\n\r\n\r\n\r\n<p>Well, that was long, but that’s what you get when you pick the fun (albeit hard and lengthy) path. All as an ode to CSS-only magic!</p>\r\n<hr />\r\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/breaking-boundaries-building-a-tangram-puzzle-with-scss/\">Breaking Boundaries: Building a Tangram Puzzle With (S)CSS</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&utm_source=css-tricks.com&utm_campaign=family_&utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
    "createdAt": "2025-06-12T13:58:38.000+00:00",
    "link": "https://css-tricks.com/breaking-boundaries-building-a-tangram-puzzle-with-scss/",
    "author": "",
    "site": {
      "id": "4",
      "url": "https://css-tricks.com/category/articles/feed",
      "name": "cssTrick"
    }
  },
  {
    "title": "Breaking Boundaries: Building a Tangram Puzzle With (S)CSS",
    "content": "<p>For years, I believed that drag-and-drop games — especially those involving rotation, spatial logic, and puzzle solving — were the exclusive domain of JavaScript. Until one day, I asked AI:</p>\r\n\r\n\r\n\r\n<blockquote class=\"wp-block-quote is-layout-flow wp-block-quote-is-layout-flow\">\r\n<p><em>“Is it possible to build a fully interactive Tangram puzzle game using only CSS?”</em></p>\r\n</blockquote>\r\n\r\n\r\n\r\n<p>The answer: <em>“No — not really. You’ll need JavaScript.”</em> That was all the motivation I needed to prove otherwise.</p>\r\n\r\n\r\n\r\n<span id=\"more-386648\"></span>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_gbOBMqm\" src=\"//codepen.io/anon/embed/preview/gbOBMqm?height=450&theme-id=1&slug-hash=gbOBMqm&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed gbOBMqm\" title=\"CodePen Embed gbOBMqm\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>But first, let’s ask the obvious question: <em>Why would anyone do this?</em></p>\r\n\r\n\r\n\r\n<p>Well…</p>\r\n\r\n\r\n\r\n<ul class=\"wp-block-list\">\r\n<li>To know how far CSS can be pushed in creating interactive UIs.</li>\r\n\r\n\r\n\r\n<li>To get better at my CSS skills.</li>\r\n\r\n\r\n\r\n<li>And it’s fun!</li>\r\n</ul>\r\n\r\n\r\n\r\n<p>Fair enough?</p>\r\n\r\n\r\n\r\n<p>Now, here’s the unsurprising truth: CSS isn’t exactly made for this. It’s not a logic language, and let’s be honest, it’s not particularly dynamic either. (Sure, we have CSS variables and some handy built-in functions now, hooray!)</p>\r\n\r\n\r\n\r\n<p>In JavaScript, we naturally think in terms of functions, loops, conditions, objects, comparisons. We write logic, abstract things into methods, and eventually ship a bundle that the browser understands. And once it’s shipped? We rarely look at that final JavaScript bundle — we just focus on keeping it lean.</p>\r\n\r\n\r\n\r\n<p>Now ask yourself: isn’t that exactly what Sass does for CSS?</p>\r\n\r\n\r\n\r\n<p>Why should we hand-write endless lines of repetitive CSS when we can use mixins and functions to generate it — cleanly, efficiently, and without caring how many lines it takes, as long as the output is optimized?</p>\r\n\r\n\r\n\r\n<p>So, we put it to the test and it turns out Sass can replace JavaScript, at least when it comes to low-level logic and puzzle behavior. With nothing but maps, mixins, functions, and a whole lot of math, we managed to bring our Tangram puzzle to life, no JavaScript required.</p>\r\n\r\n\r\n\r\n<p>Let the (CSS-only) games begin! 🎉</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"the-game\">The game</h3>\r\n\r\n\r\n<p>The game consists of seven pieces: the classic Tangram set. Naturally, these pieces can be arranged into a perfect square (and many other shapes, too). But we need a bit more than just static pieces.</p>\r\n\r\n\r\n\r\n<p>So here’s what I am building:</p>\r\n\r\n\r\n\r\n<ul class=\"wp-block-list\">\r\n<li>A puzzle goal, which is the target shape the player has to recreate.</li>\r\n\r\n\r\n\r\n<li>A start button that shuffles all the pieces into a staging area.</li>\r\n\r\n\r\n\r\n<li>Each piece is clickable and interactive.</li>\r\n\r\n\r\n\r\n<li>The puzzle should let the user know when they get a piece wrong and also celebrate when they finish the puzzle.</li>\r\n</ul>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"step-1-html-structure\">The HTML structure</h3>\r\n\r\n\r\n<p>I started by setting up the HTML structure, which is no small task, considering the number of elements involved.</p>\r\n\r\n\r\n\r\n<ul class=\"wp-block-list\">\r\n<li>Each shape was given seven radio buttons. I chose radios over checkboxes to take advantage of their built-in exclusivity. Only one can be selected within the same group. This made it much easier to track which shape and state were currently active.</li>\r\n\r\n\r\n\r\n<li>The start button? Also a radio input. A checkbox could’ve worked too, but for the sake of consistency, I stuck with radios across the board.</li>\r\n\r\n\r\n\r\n<li>The puzzle map itself is just a plain old <code><div></code>, simple and effective.</li>\r\n\r\n\r\n\r\n<li>For rotation, we added eight radio buttons, each representing a 45-degree increment: 45°, 90°, 135°, all the way to 360°. These simulate rotation controls entirely in CSS.</li>\r\n\r\n\r\n\r\n<li>Every potential shadow position got its own radio button too. (Yes, it’s a lot, I know.)</li>\r\n\r\n\r\n\r\n<li>And to wrap it all up, I included a classic reset button inside a <code><form></code> using <code><button type=\"reset\"></code>, so players can easily start over at any point.</li>\r\n</ul>\r\n\r\n\r\n\r\n<p>Given the sheer number of elements required, I used Pug to generate the HTML more efficiently. It was purely a convenience choice. It doesn’t affect the logic or behavior of the puzzle in any way.</p>\r\n\r\n\r\n\r\n<p>Below is a sample of the compiled HTML. It might look overwhelming at first glance (and this is just a portion of it!), but it illustrates the structural complexity involved. This section is collapsed to not nuke your screen, but it can be expanded if you’d like to explore it.</p>\r\n\r\n\r\n\r\n<details >\r\n  <summary>\r\n          Open HTML Code      </summary>\r\n  \r\n\r\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\"><div class=\"wrapper\">\r\n  <div class=\"tanagram-box\"></div>\r\n  <div class=\"tanagram-box\"></div>\r\n  <form class=\"container\">\r\n    <input class=\"hide_input start\" type=\"checkbox\" id=\"start\" autofocus />\r\n    <button class=\"start-button\" type=\"reset\" id=\"restart\">Restart</button>\r\n    <label class=\"start-button\" for=\"start\">Start </label>\r\n    <div class=\"shadow\">\r\n      <input class=\"hide_input\" type=\"radio\" id=\"blueTriangle-tan\" name=\"tan-active\" />\r\n      <input class=\"hide_input\" type=\"radio\" id=\"yellowTriangle-tan\" name=\"tan-active\" />\r\n      <!-- Inputs for others tans -->\r\n      <input class=\"hide_input\" type=\"radio\" id=\"rotation-reset\" name=\"tan-active\" />\r\n      <input class=\"hide_input\" type=\"radio\" id=\"rotation-45\" name=\"tan-rotation\" />\r\n      <input class=\"hide_input\" type=\"radio\" id=\"rotation-90\" name=\"tan-rotation\" />\r\n      <!--radios for 90, 225, 315, 360 -->\r\n\r\n      <input class=\"hide_input\" type=\"checkbox\" id=\"yellowTriangle-tan-1-135\" name=\"tan-rotation\" />\r\n      <input class=\"hide_input\" type=\"checkbox\" id=\"yellowTriangle-tan-1-225\" name=\"tan-rotation\" />\r\n      <!-- radio for every possible shape shadows-->\r\n\r\n      <label class=\"rotation rot\" for=\"rotation-45\" id=\"rot45\">⟲</label>\r\n      <label class=\"rotation rot\" for=\"rotation-90\" id=\"rot90\">⟲</label>\r\n      <!--radios for 90, 225, 315, 360 -->\r\n      <label class=\"rotation\" for=\"rotation-reset\" id=\"rotReset\">✘</label>\r\n\r\n      <label class=\"blueTriangle tans\" for=\"blueTriangle-tan\" id=\"tanblueTrianglelab\"></label>\r\n      <div class=\"tans tan_blocked\" id=\"tanblueTrianglelabRes\"></div>\r\n      <!-- labels for every tan and disabled div -->\r\n\r\n      <label class=\"blueTriangle tans\" for=\"blueTriangle-tan-1-90\" id=\"tanblueTrianglelab-1-90\"></label>\r\n      <label class=\"blueTriangle tans\" for=\"blueTriangle-tan-1-225\" id=\"tanblueTrianglelab-1-225\"></label>\r\n      <!-- labels radio for every possible shape shadows-->\r\n      <div class=\"shape\"></div>\r\n    </div>\r\n  </form>\r\n  <div class=\"tanagram-box\"></div>\r\n  <div class=\"tanagram-box\"></div>\r\n  <div class=\"tanagram-box\"></div>\r\n  <div class=\"tanagram-box\"></div>\r\n  <div class=\"tanagram-box\"></div>\r\n</div></code></pre>\r\n\r\n\r\n</details>\r\n\r\n<h3 class=\"wp-block-heading\" id=\"step-2-creating-maps-for-shape-data\">Creating maps for shape data</h3>\r\n\r\n\r\n<p>Now that HTML skeleton is ready, it’s time to inject it with some real power. That’s where our <strong>Sass maps</strong> come in, and here’s where the puzzle logic starts to shine.</p>\r\n\r\n\r\n\r\n<p class=\"is-style-explanation\"><strong>Note:</strong> Maps in Sass hold pairs of keys and values, and make it easy to look up a value by its corresponding key. Like objects in JavaScript, dictionaries in Python and, well, maps in C++.</p>\r\n\r\n\r\n\r\n<p>I’m mapping out all the core data needed to control each tangram piece (tan): its color, shape, position, and even interaction logic. These maps contain:</p>\r\n\r\n\r\n\r\n<ul class=\"wp-block-list\">\r\n<li>the <code>background-color</code> for each tan,</li>\r\n\r\n\r\n\r\n<li>the <code>clip-path</code> coordinates that define their shapes,</li>\r\n\r\n\r\n\r\n<li>the initial position for each tan,</li>\r\n\r\n\r\n\r\n<li>the position of the blocking <code>div</code> (which disables interaction when a tan is selected),</li>\r\n\r\n\r\n\r\n<li>the shadow positions (coordinates for the tan’s silhouette displayed on the task board),</li>\r\n\r\n\r\n\r\n<li>the grid information, and</li>\r\n\r\n\r\n\r\n<li>the winning combinations — the exact target coordinates for each tan, marking the correct solution.</li>\r\n</ul>\r\n\r\n\r\n\r\n<pre rel=\"SCSS\" class=\"wp-block-csstricks-code-block language-scss\" data-line=\"\"><code markup=\"tt\">$colors: ( blue-color: #53a0e0, yellow-color: #f7db4f, /* Colors for each tan */ );\r\n$nth-child-grid: ( 1: (2, 3, 1, 2, ), 2: ( 3, 4, 1, 2, ), 4: ( 1, 2, 2, 3, ), /* More entries to be added */);\r\n$bluePosiblePositions: ( 45: none, 90: ( (6.7, 11.2), ), 135: none, 180: none, /* Positions defined up to 360 degrees */);\r\n/* Other tans */\r\n\r\n/* Data defined for each tan */\r\n$tansShapes: (\r\n  blueTriangle: (\r\n    color: map.get($colors, blue-color),\r\n    clip-path: ( 0 0, 50 50, 0 100, ),\r\n    rot-btn-position: ( -20, -25, ),\r\n    exit-mode-btn-position: ( -20, -33, ),\r\n    tan-position: ( -6, -37, ),\r\n    diable-lab-position: ( -12, -38, ),\r\n    poss-positions: $bluePosiblePositions,\r\n    correct-position: ((4.7, 13.5), (18.8, 13.3), ),\r\n    transform-origin: ( 4.17, 12.5,),\r\n  ),\r\n);\r\n\r\n/* Remaining 7 combinations */\r\n$winningCombinations: (\r\n  combo1: (\r\n    (blueTriangle, 1, 360),\r\n    (yellowTriangle, 1, 225),\r\n    (pinkTriangle, 1, 180),\r\n    (redTriangle, 4, 360),\r\n    (purpleTriangle, 2, 225),\r\n    (square, 1, 90),\r\n    (polygon, 4, 90),\r\n  ),\r\n);</code></pre>\r\n\r\n\r\n\r\n<p>You can see this in action on CodePen, where these maps drive the actual look and behavior of each puzzle piece. At this point, there’s no visible change in the preview. We’ve simply prepared and stored the data for later use.</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_YPPjowr\" src=\"//codepen.io/anon/embed/preview/YPPjowr?height=450&theme-id=1&slug-hash=YPPjowr&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed YPPjowr\" title=\"CodePen Embed YPPjowr\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"step-3-using-mixins-to-read-from-maps\">Using mixins to read from maps</h3>\r\n\r\n\r\n<p>The main idea is to create reusable mixins that will read data from the maps and apply it to the corresponding CSS rules when needed.</p>\r\n\r\n\r\n\r\n<p>But before that, we’ve elevated things to a higher level by making one key decision: We never hard-coded units directly inside the maps. Instead, we built a reusable utility function that dynamically adds the desired unit (e.g., <code>vmin</code>, <code>px</code>, etc.) to any numeric value when it’s being used. This way, when can use our maps however we please.</p>\r\n\r\n\r\n\r\n<pre rel=\"SCSS\" class=\"wp-block-csstricks-code-block language-scss\" data-line=\"\"><code markup=\"tt\">@function get-coordinates($data, $key, $separator, $unit) {\r\n  $coordinates: null;\r\n\r\n  // Check if the first argument is a map\r\n  @if meta.type-of($data) == \"map\" {\r\n    // If the map contains the specified key\r\n    @if map.has-key($data, $key) {\r\n      // Get the value associated with the key (expected to be a list of coordinates)\r\n      $coordinates: map.get($data, $key);\r\n    }\r\n\r\n  //  If the first argument is a list\r\n  } @else if meta.type-of($data) == \"list\" {\r\n    // Ensure the key is a valid index (1-based) within the list\r\n    @if meta.type-of($key) == \"number\" and $key > 0 and $key <= list.length($data) {\r\n      // Retrieve the item at the specified index\r\n      $coordinates: list.nth($data, $key);\r\n    }\r\n\r\n  //  If neither map nor list, throw an error\r\n  } @else {\r\n    @error \"Invalid input: First argument must be a map or a list.\";\r\n  }\r\n\r\n  // If no valid coordinates were found, return null\r\n  @if $coordinates == null {\r\n    @return null;\r\n  }\r\n\r\n  //  Extract x and y values from the list\r\n  $x: list.nth($coordinates, 1);\r\n  $y: list.nth($coordinates, -1); // -1 gets the last item (y)\r\n\r\n  //  Return the combined x and y values with units and separator\r\n  @return #{$x}#{$unit}#{$separator}#{$y}#{$unit};\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>Sure, nothing’s showing up in the preview yet, but the real magic starts now.</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_ByyPgMg\" src=\"//codepen.io/anon/embed/preview/ByyPgMg?height=450&theme-id=1&slug-hash=ByyPgMg&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed ByyPgMg\" title=\"CodePen Embed ByyPgMg\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>Now we move on to writing mixins. I’ll explain the approach in detail for the first mixin, and the rest will be described through comments.</p>\r\n\r\n\r\n\r\n<p>The first mixin dynamically applies <code>grid-column</code> and <code>grid-row</code> placement rules to child elements based on values stored in a map. Each entry in the map corresponds to an element index (1 through 8) and contains a list of four values: <code>[start-col, end-col, start-row, end-row]</code>.</p>\r\n\r\n\r\n\r\n<pre rel=\"SCSS\" class=\"wp-block-csstricks-code-block language-scss\" data-line=\"\"><code markup=\"tt\">@mixin tanagram-grid-positioning($nth-child-grid) {\r\n  // Loop through numbers 1 to 8, corresponding to the tanam pieces\r\n  @for $i from 1 through 8 {\r\n\r\n    // Check if the map contains a key for the current piece (1-8)\r\n    @if map.has-key($nth-child-grid, $i) {\r\n\r\n      // Get the grid values for this piece: [start-column, end-column, start-row, end-row]\r\n      $values: map.get($nth-child-grid, $i);\r\n\r\n      // Target the nth child (piece) and set its grid positions\r\n      &:nth-child(#{$i}) {\r\n        // Set grid-column: start and end values based on the first two items in the list\r\n        grid-column: #{list.nth($values, 1)} / #{list.nth($values, 2)};\r\n\r\n        // Set grid-row: start and end values based on the last two items in the list\r\n        grid-row: #{list.nth($values, 3)} / #{list.nth($values, 4)};\r\n      }\r\n    }\r\n  }\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>We can expect the following CSS to be generated:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.tanagram-box:nth-child(1) {\r\n  grid-column: 2 / 3;\r\n  grid-row: 1 / 2;\r\n}\r\n\r\n.tanagram-box:nth-child(2) {\r\n  grid-column: 3 / 4;\r\n  grid-row: 1 / 2;\r\n}</code></pre>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_xbbJoLq\" src=\"//codepen.io/anon/embed/preview/xbbJoLq?height=450&theme-id=1&slug-hash=xbbJoLq&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed xbbJoLq\" title=\"CodePen Embed xbbJoLq\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>In this mixin, my goal was actually to create all the shapes (tans). I am using <code>clip-path</code>. There were ideas to use fancy SVG images, but this test project is more about testing the logic rather than focusing on beautiful design. For this reason, the simplest solution was to cut the elements according to dimensions while they are still in the square (the initial position of all the tans).</p>\r\n\r\n\r\n\r\n<p>So, in this case, through a static calculation, the <code>$tansShapes</code> map was updated with the <code>clip-path</code> property:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">clip-path: (0 0, 50 50, 0 100);</code></pre>\r\n\r\n\r\n\r\n<p>This contains the clip points for all the tans. In essence, this mixin shapes and colors each tan accordingly.</p>\r\n\r\n\r\n\r\n<pre rel=\"SCSS\" class=\"wp-block-csstricks-code-block language-scss\" data-line=\"\"><code markup=\"tt\">@mixin set-tan-clip-path($tanName, $values) {\r\n  //  Initialize an empty list to hold the final clip-path points\r\n  $clip-path-points: ();\r\n\r\n  // Extract the 'clip-path' data from the map, which contains coordinate pairs\r\n  $clip-path-key: map.get($values, clip-path);\r\n\r\n  // Get the number of coordinate pairs to loop through\r\n  $count: list.length($clip-path-key);\r\n\r\n  //  Loop through each coordinate point\r\n  @for $i from 1 through $count {\r\n    //  Convert each pair of numbers into a formatted coordinate string with units\r\n    $current-point: get-coordinates($clip-path-key, $i, \" \", \"%\");\r\n\r\n    //  Add the formatted coordinate to the list, separating each point with a comma\r\n    $clip-path-points: list.append($clip-path-points, #{$current-point}, comma);\r\n  }\r\n\r\n  //  Style for the preview element (lab version), using the configured background color\r\n  #tan#{$tanName}lab {\r\n    background: map.get($values, color);\r\n    clip-path: polygon(#{$clip-path-points}); // Apply the full list of clip-path points\r\n  }\r\n\r\n  //  Apply the same clip-path to the actual tan element\r\n  .#{$tanName} {\r\n    clip-path: polygon(#{$clip-path-points});\r\n  }\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>and output in CSS should be:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.blueTriangle {\r\n  clip-path: polygon(0% 0%, 50% 50%, 0% 100%);\r\n}\r\n/* other tans */</code></pre>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_bNNxbbW\" src=\"//codepen.io/anon/embed/preview/bNNxbbW?height=450&theme-id=1&slug-hash=bNNxbbW&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed bNNxbbW\" title=\"CodePen Embed bNNxbbW\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"start-logic\">Start logic</h3>\r\n\r\n\r\n<p>Alright, now I’d like to clarify what should happen first when the game loads.</p>\r\n\r\n\r\n\r\n<p>First, with a click on the Start button, all the tans “go to their positions.” In reality, we assign them a <code>transform: translate()</code> with specific coordinates and a rotation.</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.start:checked ~ .shadow #tanblueTrianglelab {\r\n  transform-origin: 4.17vmin 12.5vmin;\r\n  transform: translate(-6vmin,-37vmin) rotate(360deg);\r\n  cursor: pointer;\r\n}</code></pre>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_LEEJYEx\" src=\"//codepen.io/anon/embed/preview/LEEJYEx?height=450&theme-id=1&slug-hash=LEEJYEx&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed LEEJYEx\" title=\"CodePen Embed LEEJYEx\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>So, we still maintain this pattern. We use transform and simply change the positions or angles (in the maps) of both the tans and their shadows on the task board.</p>\r\n\r\n\r\n\r\n<p>When any tan is clicked, the rotation button appears. By clicking on it, the tan should rotate around its center, and this continues with each subsequent click. There are actually eight radio buttons, and with each click, one disappears and the next one appears. When we reach the last one, clicking it makes it disappear and the first one reappears. This way, we get the impression of clicking the same button (they are, of course, styled the same) and being able to click (rotate the tan) infinitely. This is exactly what the following mixin enables.</p>\r\n\r\n\r\n\r\n<pre rel=\"SCSS\" class=\"wp-block-csstricks-code-block language-scss\" data-line=\"\"><code markup=\"tt\">@mixin set-tan-rotation-states($tanName, $values, $angles, $color) {\r\n  // This mixin dynamically applies rotation UI styles based on a tan's configuration.\r\n  // It controls the positioning and appearance of rotation buttons and visual feedback when a rotation state is active.\r\n  @each $angle in $angles{\r\n    & ~ #rot#{$angle}{ transform: translate(get-coordinates($values,rot-btn-position,',',vmin )); background: $color;}\r\n    & ~ #rotation-#{$angle}:checked{\r\n      @each $key in map.keys($tansShapes){\r\n        & ~ #tan#{$key}labRes{ visibility: visible; background:rgba(0,0,0,0.4); }\r\n        & ~ #tan#{$key}lab{ opacity:.3; }\r\n        & ~ #rotReset{ visibility: visible; }\r\n      } \r\n    }\r\n  }\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>And the generated CSS should be:</p>\r\n\r\n\r\n\r\n<pre rel=\"SCSS\" class=\"wp-block-csstricks-code-block language-scss\" data-line=\"\"><code markup=\"tt\">#blueTriangle-tan:checked ~ #rotation-45:checked ~ #tanblueTrianglelab {\r\n  transform: translate(-6vmin,-37vmin) rotate(45deg);\r\n}\r\n\r\n#blueTriangle-tan:checked ~ #rotation-45:checked ~ #tanblueTrianglelabRes {\r\n  visibility: hidden;\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>OK, the following mixins use the <code>set-clip-path</code> and <code>set-rotation</code> mixins. They contain all the information about the tans and their behavior in relation to which tan is clicked and which rotation is selected, as well as their positions (as defined in the second mixin).</p>\r\n\r\n\r\n\r\n<pre rel=\"SCSS\" class=\"wp-block-csstricks-code-block language-scss\" data-line=\"\"><code markup=\"tt\">@mixin generate-tan-shapes-and-interactions($tansShapes) {\r\n// Applies styling logic and UI interactions for each individual tan shape from the $tansShapes map.\r\n  @each $tanName, $values in $tansShapes{\r\n    $color: color.scale(map.get($values, color), $lightness: 10%); \r\n    $angles: (45, 90, 135, 180, 225, 270, 315, 360); \r\n    @include set-tan-clip-path($tanName, $values);\r\n\r\n    ##{$tanName}-tan:checked{\r\n      & ~ #tan#{$tanName}Res{ visibility:hidden; }\r\n      & ~ #tan#{$tanName}lab{opacity: 1 !important;background: #{$color};cursor:auto;}\r\n      @each $key in map.keys($tansShapes){\r\n          & ~ #tan#{$tanName}Res:checked ~ #tan#{$key}labRes{visibility: visible;}\r\n      }\r\n      & ~  #rot45{display: flex;visibility: visible;}\r\n      & ~ #rotReset{ transform: translate(get-coordinates($values, exit-mode-btn-position,',', vmin)); }\r\n      @include set-tan-rotation-states($tanName, $values, $angles, $color);\r\n    }  \r\n  }\r\n}</code></pre>\r\n\r\n\r\n\r\n<pre rel=\"SCSS\" class=\"wp-block-csstricks-code-block language-scss\" data-line=\"\"><code markup=\"tt\">@mixin set-initial-tan-position($tansShapes) {\r\n// This mixin sets the initial position and transformation for both the interactive (`lab`) and shadow (`labRes`) versions\r\n// of each tan shape, based on coordinates provided in the $tansShapes map.\r\n @each $tanName, $values in $tansShapes{\r\n    & ~ .shadow #tan#{$tanName}lab{\r\n      transform-origin: get-coordinates($values, transform-origin,' ' ,vmin);\r\n      transform: translate( get-coordinates($values,tan-position,',', vmin)) rotate(360deg) ;\r\n      cursor: pointer;\r\n    }\r\n    & ~ .shadow #tan#{$tanName}labRes{\r\n      visibility:hidden;\r\n      transform: translate(get-coordinates($values,diable-lab-position,',',vmin)); \r\n    }\r\n  }\r\n}</code></pre>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_NPPLqKg\" src=\"//codepen.io/anon/embed/preview/NPPLqKg?height=450&theme-id=1&slug-hash=NPPLqKg&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed NPPLqKg\" title=\"CodePen Embed NPPLqKg\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>As mentioned earlier, when a tan is clicked, one of the things that becomes visible is its shadow — a silhouette that appears on the task board.</p>\r\n\r\n\r\n\r\n<p>These shadow positions (coordinates) are currently defined statically. Each shadow has a specific place on the map, and a mixin reads this data and applies it to the shadow using <code>transform: translate()</code>.</p>\r\n\r\n\r\n\r\n<p>When the clicked tan is rotated, the number of visible shadows on the task board can change, as well as their angles, which is expected.</p>\r\n\r\n\r\n\r\n<p>Of course, special care was taken with naming conventions. Each shadow element gets a unique ID, made from the name (inherited from its parent tan) and a number that represents its sequence position for the given angle.</p>\r\n\r\n\r\n\r\n<p>Pretty cool, right? That way, we avoid complicated naming patterns entirely!</p>\r\n\r\n\r\n\r\n<pre rel=\"SCSS\" class=\"wp-block-csstricks-code-block language-scss\" data-line=\"\"><code markup=\"tt\">@mixin render-possible-tan-positions( $name, $angle, $possiblePositions, $visibility, $color, $id, $transformOrigin ) {\r\n    // This mixin generates styles for possible positions of a tan shape based on its name, rotation angle, and configuration map.\r\n    // It handles both squares and polygons, normalizing their rotation angles accordingly and applying transform styles if positions exist.}\r\n  @if $name == 'square' {\r\n    $angle: normalize-angle($angle); // Normalizujemo ugao ako je u pitanju square\r\n  } @else if $name == 'polygon'{\r\n    $angle: normalize-polygon-angle($angle);\r\n  }\r\n  @if map.has-key($possiblePositions, $angle) {\r\n    $values: map.get($possiblePositions, $angle);\r\n\r\n    @if $values != none {\r\n      $count: list.length($values);\r\n\r\n      @for $i from 1 through $count {\r\n        $position: get-coordinates($values, $i, ',', vmin);\r\n        & ~ #tan#{$name}lab-#{$i}-#{$angle} { \r\n          @if $visibility == visible {\r\n            visibility: visible;\r\n            background-color: $color;\r\n            opacity: .2;\r\n            z-index: 2;\r\n            transform-origin: #{$transformOrigin};\r\n            transform: translate(#{$position}) rotate(#{$angle}deg);\r\n          } @else if $visibility == hidden { visibility: hidden; }\r\n          &:hover{ opacity: 0.5; cursor: pointer; }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>The generated CSS:</p>\r\n\r\n\r\n\r\n<pre rel=\"SCSS\" class=\"wp-block-csstricks-code-block language-scss\" data-line=\"\"><code markup=\"tt\">#blueTriangle-tan:checked ~ #tanblueTrianglelab-1-360 {\r\n  visibility: visible;\r\n  background-color: #53a0e0;\r\n  opacity: 0.2;\r\n  z-index: 2;\r\n  transform-origin: 4.17vmin 12.5vmin;\r\n  transform: translate(4.7vmin,13.5vmin) rotate(360deg);\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>This next mixin is tied to the previous one and manages when and how the tan shadows appear while their parent tan is being rotated using the button. It listens for the current rotation angle and checks whether there are any shadow positions defined for that specific angle. If there are, it displays them; if not — no shadows!</p>\r\n\r\n\r\n\r\n<pre rel=\"SCSS\" class=\"wp-block-csstricks-code-block language-scss\" data-line=\"\"><code markup=\"tt\">@mixin render-possible-positions-by-rotation {\r\n   // This mixin applies rotation to each tan shape. It loops through each tan, calculates its possible positions for each angle, and handles visibility and transformation.\r\n   // It ensures that rotation is applied correctly, including handling the transitions between various tan positions and visibility states.\r\n @each $tanName, $values in $tansShapes{\r\n    $possiblePositions: map.get($values, poss-positions);\r\n    $possibleTansColor: map.get($values, color);\r\n    $validPosition: get-coordinates($values, correct-position,',' ,vmin);\r\n    $transformOrigin: get-coordinates($values,transform-origin,' ' ,vmin); \r\n    $rotResPosition: get-coordinates($values,exit-mode-btn-position ,',' ,vmin );\r\n    $angle: 0;\r\n    @for $i from 1 through 8{\r\n      $angle: $i * 45;\r\n      $nextAngle: if($angle + 45 > 360, 45, $angle + 45);\r\n      @include render-position-feedback-on-task($tanName,$angle, $possiblePositions,$possibleTansColor, #{$tanName}-tan, $validPosition,$transformOrigin, $rotResPosition);   \r\n        ##{$tanName}-tan{\r\n        @include render-possible-tan-positions($tanName,$angle, $possiblePositions,hidden, $possibleTansColor, #{$tanName}-tan,$transformOrigin)\r\n      }\r\n        ##{$tanName}-tan:checked{\r\n          @include render-possible-tan-positions($tanName,360, $possiblePositions,visible, $possibleTansColor, #{$tanName}-tan,$transformOrigin);\r\n          & ~ #rotation-#{$angle}:checked {\r\n            @include render-possible-tan-positions($tanName,360, $possiblePositions,hidden, $possibleTansColor, #{$tanName}-tan,$transformOrigin);\r\n            & ~ #tan#{$tanName}lab{transform:translate( get-coordinates($values,tan-position,',', vmin))  rotate(#{$angle}deg) ;}\r\n            & ~ #tan#{$tanName}labRes{ visibility: hidden; }\r\n            & ~ #rot#{$angle}{ visibility: hidden; }\r\n            & ~ #rot#{$nextAngle}{ visibility: visible } \r\n            @include render-possible-tan-positions($tanName,$angle, $possiblePositions,visible, $possibleTansColor, #{$tanName}-tan,$transformOrigin);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}</code></pre>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_KwwxVOy\" src=\"//codepen.io/anon/embed/preview/KwwxVOy?height=450&theme-id=1&slug-hash=KwwxVOy&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed KwwxVOy\" title=\"CodePen Embed KwwxVOy\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>When a tan’s shadow is clicked, the corresponding tan should move to that shadow’s position. The next mixin then checks whether this new position is the correct one for solving the puzzle. If it is correct, the tan gets a brief blinking effect and becomes unclickable, signaling it’s been placed correctly. If it’s not correct, the tan simply stays at the shadow’s location. There’s no effect and it remains draggable/clickable.</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_QwwVbqr\" src=\"//codepen.io/anon/embed/preview/QwwVbqr?height=450&theme-id=1&slug-hash=QwwVbqr&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed QwwVbqr\" title=\"CodePen Embed QwwVbqr\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>Of course, there’s a list of all the correct positions for each tan. Since some tans share the same size — and some can even combine to form larger, existing shapes — we have multiple valid combinations. For this Camel task, all of them were taken into account. A dedicated map with these combinations was created, along with a mixin that reads and applies them.</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_gbOBMqm\" src=\"//codepen.io/anon/embed/preview/gbOBMqm?height=450&theme-id=1&slug-hash=gbOBMqm&default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed gbOBMqm\" title=\"CodePen Embed gbOBMqm\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n\r\n<p>At the end of the game, when all tans are placed in their correct positions, we trigger a “merging” effect — and the silhouette of the camel turns yellow. At that point, the only remaining action is to click the Restart button.</p>\r\n\r\n\r\n\r\n<p>Well, that was long, but that’s what you get when you pick the fun (albeit hard and lengthy) path. All as an ode to CSS-only magic!</p>\r\n<hr />\r\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/breaking-boundaries-building-a-tangram-puzzle-with-scss/\">Breaking Boundaries: Building a Tangram Puzzle With (S)CSS</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&utm_source=css-tricks.com&utm_campaign=family_&utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
    "createdAt": "2025-06-12T13:58:38.000+00:00",
    "link": "https://css-tricks.com/breaking-boundaries-building-a-tangram-puzzle-with-scss/",
    "author": "",
    "site": {
      "id": "5",
      "url": "https://css-tricks.com/category/articles/feed",
      "name": "cssTrick"
    }
  },
  {
    "title": "[Korean FE Article] React와 Next.js를 위한 완벽한 Cursor AI 설정",
    "content": "<div class=\"captioned-image-container\"><figure><a class=\"image-link image2 is-viewable-img\" target=\"_blank\" href=\"https://substackcdn.com/image/fetch/$s_!6R0v!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe1c7d730-979a-4d3c-9709-17de6bc9a678_1920x1080.jpeg\" data-component-name=\"Image2ToDOM\"><div class=\"image2-inset\"><picture><source type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/$s_!6R0v!,w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe1c7d730-979a-4d3c-9709-17de6bc9a678_1920x1080.jpeg 424w, https://substackcdn.com/image/fetch/$s_!6R0v!,w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe1c7d730-979a-4d3c-9709-17de6bc9a678_1920x1080.jpeg 848w, https://substackcdn.com/image/fetch/$s_!6R0v!,w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe1c7d730-979a-4d3c-9709-17de6bc9a678_1920x1080.jpeg 1272w, https://substackcdn.com/image/fetch/$s_!6R0v!,w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe1c7d730-979a-4d3c-9709-17de6bc9a678_1920x1080.jpeg 1456w\" sizes=\"100vw\"><img src=\"https://substackcdn.com/image/fetch/$s_!6R0v!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe1c7d730-979a-4d3c-9709-17de6bc9a678_1920x1080.jpeg\" width=\"1456\" height=\"819\" data-attrs=\"{\"src\":\"https://substack-post-media.s3.amazonaws.com/public/images/e1c7d730-979a-4d3c-9709-17de6bc9a678_1920x1080.jpeg\",\"srcNoWatermark\":null,\"fullscreen\":null,\"imageSize\":null,\"height\":819,\"width\":1456,\"resizeWidth\":null,\"bytes\":79143,\"alt\":null,\"title\":null,\"type\":\"image/jpeg\",\"href\":null,\"belowTheFold\":false,\"topImage\":true,\"internalRedirect\":\"https://kofearticle.substack.com/i/165540687?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe1c7d730-979a-4d3c-9709-17de6bc9a678_1920x1080.jpeg\",\"isProcessing\":false,\"align\":null,\"offset\":false}\" class=\"sizing-normal\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/$s_!6R0v!,w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe1c7d730-979a-4d3c-9709-17de6bc9a678_1920x1080.jpeg 424w, https://substackcdn.com/image/fetch/$s_!6R0v!,w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe1c7d730-979a-4d3c-9709-17de6bc9a678_1920x1080.jpeg 848w, https://substackcdn.com/image/fetch/$s_!6R0v!,w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe1c7d730-979a-4d3c-9709-17de6bc9a678_1920x1080.jpeg 1272w, https://substackcdn.com/image/fetch/$s_!6R0v!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe1c7d730-979a-4d3c-9709-17de6bc9a678_1920x1080.jpeg 1456w\" sizes=\"100vw\" fetchpriority=\"high\"></picture><div class=\"image-link-expand\"><div class=\"pencraft pc-display-flex pc-gap-8 pc-reset\"><div class=\"pencraft pc-reset icon-container restack-image\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-refresh-cw\"><path d=\"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\"></path><path d=\"M21 3v5h-5\"></path><path d=\"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\"></path><path d=\"M8 16H3v5\"></path></svg></div><div class=\"pencraft pc-reset icon-container view-image\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-maximize2\"><polyline points=\"15 3 21 3 21 9\"></polyline><polyline points=\"9 21 3 21 3 15\"></polyline><line x1=\"21\" x2=\"14\" y1=\"3\" y2=\"10\"></line><line x1=\"3\" x2=\"10\" y1=\"21\" y2=\"14\"></line></svg></div></div></div></div></a></figure></div><blockquote><p>글 링크: <a href=\"https://velog.io/@eunbinn/cursor-ai-tips-react-nextjs\">https://velog.io/@eunbinn/cursor-ai-tips-react-nextjs</a></p></blockquote><h2>소개</h2><p><strong>여러분은 Cursor AI, 얼마나 제대로 활용하고 계신가요?</strong></p><p>이 글은 단순한 사용법 소개를 넘어서, React와 Next.js 개발에 최적화된 Cursor 환경을 처음부터 완벽하게 셋업하는 방법을 안내합니다. 단순한 코드 생성에 그치지 않고, 테스트 기반 개발, 린트 자동 수정, Figma 디자인을 코드로 전환하는 등 실제 개발 흐름 속에서 AI를 어떻게 실용적으로 활용할 수 있는지 다양한 예시와 함께 소개합니다.</p><p>Cursor를 단순한 보조 도구가 아닌 <strong>강력한 협업 파트너</strong>로 만들어보고 싶다면, 이 글을 한 번 읽어보시는 건 어떨까요?</p><h2>목차</h2><ul><li><p>Cursor AI 설정 조정하기</p></li><li><p>Cursor 코드 에디터에서의 핵심 기능 설정과 활용</p><ul><li><p>코드 에디터에서의 Cursor AI 'Tab' 기능</p></li><li><p>코드 생성을 위한 Cursor AI 'Chat' 기능</p></li><li><p>Cursor 규칙</p></li><li><p>Cursor의 ‘@docs’ 기능</p></li><li><p>Cursor AI의 '@web' 기능</p></li><li><p>Cursor AI의 'Notepads' 기능</p></li><li><p>Cursor AI의 자동 린트 수정 기능으로 코드 품질 향상하기</p></li><li><p>Cursor의 테스트 기반 코드 생성 루프 설정하기</p></li><li><p>Cursor에 MCP 추가하기</p></li></ul></li><li><p>결론</p></li></ul>",
    "createdAt": "2025-06-12T00:30:17.000+00:00",
    "link": "https://kofearticle.substack.com/p/korean-fe-article-react-nextjs-cursor",
    "author": "",
    "site": {
      "id": "3",
      "url": "https://kofearticle.substack.com/feed",
      "name": "kofearticle"
    }
  },
  {
    "title": "[Korean FE Article] 한 번의 왕복 요청으로 이루어지는 내비게이션",
    "content": "<div class=\"captioned-image-container\"><figure><a class=\"image-link image2 is-viewable-img\" target=\"_blank\" href=\"https://substackcdn.com/image/fetch/$s_!6QFY!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5d4912ec-b6d2-4462-a203-18187f13e7db_1200x630.png\" data-component-name=\"Image2ToDOM\"><div class=\"image2-inset\"><picture><source type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/$s_!6QFY!,w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5d4912ec-b6d2-4462-a203-18187f13e7db_1200x630.png 424w, https://substackcdn.com/image/fetch/$s_!6QFY!,w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5d4912ec-b6d2-4462-a203-18187f13e7db_1200x630.png 848w, https://substackcdn.com/image/fetch/$s_!6QFY!,w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5d4912ec-b6d2-4462-a203-18187f13e7db_1200x630.png 1272w, https://substackcdn.com/image/fetch/$s_!6QFY!,w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5d4912ec-b6d2-4462-a203-18187f13e7db_1200x630.png 1456w\" sizes=\"100vw\"><img src=\"https://substackcdn.com/image/fetch/$s_!6QFY!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5d4912ec-b6d2-4462-a203-18187f13e7db_1200x630.png\" width=\"1200\" height=\"630\" data-attrs=\"{\"src\":\"https://substack-post-media.s3.amazonaws.com/public/images/5d4912ec-b6d2-4462-a203-18187f13e7db_1200x630.png\",\"srcNoWatermark\":null,\"fullscreen\":null,\"imageSize\":null,\"height\":630,\"width\":1200,\"resizeWidth\":null,\"bytes\":null,\"alt\":null,\"title\":null,\"type\":null,\"href\":null,\"belowTheFold\":false,\"topImage\":true,\"internalRedirect\":null,\"isProcessing\":false,\"align\":null,\"offset\":false}\" class=\"sizing-normal\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/$s_!6QFY!,w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5d4912ec-b6d2-4462-a203-18187f13e7db_1200x630.png 424w, https://substackcdn.com/image/fetch/$s_!6QFY!,w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5d4912ec-b6d2-4462-a203-18187f13e7db_1200x630.png 848w, https://substackcdn.com/image/fetch/$s_!6QFY!,w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5d4912ec-b6d2-4462-a203-18187f13e7db_1200x630.png 1272w, https://substackcdn.com/image/fetch/$s_!6QFY!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5d4912ec-b6d2-4462-a203-18187f13e7db_1200x630.png 1456w\" sizes=\"100vw\" fetchpriority=\"high\"></picture><div class=\"image-link-expand\"><div class=\"pencraft pc-display-flex pc-gap-8 pc-reset\"><div class=\"pencraft pc-reset icon-container restack-image\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-refresh-cw\"><path d=\"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\"></path><path d=\"M21 3v5h-5\"></path><path d=\"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\"></path><path d=\"M8 16H3v5\"></path></svg></div><div class=\"pencraft pc-reset icon-container view-image\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-maximize2\"><polyline points=\"15 3 21 3 21 9\"></polyline><polyline points=\"9 21 3 21 3 15\"></polyline><line x1=\"21\" x2=\"14\" y1=\"3\" y2=\"10\"></line><line x1=\"3\" x2=\"10\" y1=\"21\" y2=\"14\"></line></svg></div></div></div></div></a></figure></div><blockquote><p>글 링크 : <a href=\"https://ykss.netlify.app/translation/one_roundtrip_per_navigation/\">https://ykss.netlify.app/translation/one_roundtrip_per_navigation/</a></p></blockquote><h2><strong>소개</strong></h2><p>이 글은 웹 애플리케이션에서 사용자가 페이지를 이동할 때, 데이터를 어떻게 효율적으로 가져올 수 있을지를 다룹니다. React Router와 Next.js, 그리고 서버 컴포넌트 등 최근 프론트엔드 기술들이 이 문제를 해결하기 위해 어떤 방식들을 제안하고 있는지 소개합니다. 특히 데이터를 ‘한 번의 왕복(one roundtrip)’으로 미리 받아오는 구조가 네비게이션을 단순하게 만들고, 전체적인 앱 성능을 높일 수 있다는 점을 강조합니다.</p><p>리액트 생태계가 앞으로 어떤 방향으로 나아갈지, 그리고 개발자가 데이터 페칭과 페이지 전환의 효율을 높이기 위해 어떤 고민과 선택을 해야 하는지 생각해볼 수 있는 좋은 기회가 될 것입니다. 웹 개발자라면 꼭 한 번 읽어볼 만한 글입니다. 😊</p><h2><strong>목차</strong></h2><ul><li><p>HTML</p></li><li><p>“REST”</p></li><li><p>컴포넌트</p></li><li><p>쿼리</p></li><li><p>클라이언트 로더</p></li><li><p>서버 로더</p></li><li><p>서버 함수</p></li><li><p>GraphQL 프래그먼트</p></li><li><p>RSC</p></li><li><p>그래서 무엇을 얻었는가?</p></li></ul>",
    "createdAt": "2025-06-10T00:30:21.000+00:00",
    "link": "https://kofearticle.substack.com/p/korean-fe-article-d5d",
    "author": "",
    "site": {
      "id": "3",
      "url": "https://kofearticle.substack.com/feed",
      "name": "kofearticle"
    }
  },
  {
    "title": "Creating an Auto-Closing Notification With an HTML Popover",
    "content": "<p>The <a href=\"https://css-tricks.com/poppin-in/\">HTML <code>popover</code> attribute</a> transforms elements into top-layer elements that can be opened and closed with a button or JavaScript. Most popovers can be light-dismissed, closing when the user clicks or taps outside the popup. Currently, HTML <code>popover</code> lacks built-in auto-close functionality, but it’s easy to add. Auto closing popups are useful for user interfaces like banner notifications — the new-message alerts in phones, for instance.</p>\r\n\r\n\r\n\r\n<span id=\"more-386694\"></span>\r\n\r\n\r\n\r\n<p>A <del>picture</del> demo, is worth a thousand words, right? Click on the “Add to my bookmarks” button in the following example. It triggers a notification that dismisses itself after a set amount of time.</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_yyyGJdr\" src=\"//codepen.io/anon/embed/preview/yyyGJdr?height=550&theme-id=1&slug-hash=yyyGJdr&default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed yyyGJdr\" title=\"CodePen Embed yyyGJdr\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"let-s-start-with-the-popover\">Let’s start with the popover</h3>\r\n\r\n\r\n<p>The HTML <code>popover</code> attribute is remarkably trivial to use. Slap it on a <code>div</code>, specify the type of popover you need, and you’re done.</p>\r\n\r\n\r\n\r\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\"><div popover=\"manual\" id=\"pop\">Bookmarked!</div></code></pre>\r\n\r\n\r\n\r\n<p>A <code>manual</code> popover simply means it cannot be light-dismissed by clicking outside the element. As a result, we have to hide, show, or toggle the popover’s visibility ourselves explicitly with either buttons or JavaScript. Let’s use a semantic HTML <code>button</code>.</p>\r\n\r\n\r\n\r\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\"><button popovertarget=\"pop\" popovertargetaction=\"show\">\r\n  Add to my bookmarks\r\n</button>\r\n<div popover=\"manual\" id=\"pop\">Bookmarked!</div></code></pre>\r\n\r\n\r\n\r\n<p>The <code>popovertarget</code> and <code>popovertargetaction</code> attributes are the final two ingredients, where <code>popovertarget</code> links the button to the <code>popover</code> element and <code>popovertargetaction</code> ensures that the <code>popover</code> is <code>show</code>-n when the button is clicked.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"hiding-the-popover-with-a-css-transition\">Hiding the popover with a CSS transition</h3>\r\n\r\n\r\n<p>OK, so the challenge is that we have a <code>popover</code> that is shown when a certain button is clicked, but it cannot be dismissed. The button is only wired up to <code>show</code> the <code>popover</code>, but it does not <code>hide</code> or <code>toggle</code> the <code>popover</code> (since we are not explicitly declaring it). We want the <code>popover</code> to <code>show</code> when the button is clicked, then dismiss itself after a certain amount of time.</p>\r\n\r\n\r\n\r\n<p>The HTML <code>popover</code> can’t be <em>closed</em> with CSS, but it can be <em>hidden</em> from the page. Adding animation to that creates a visual effect. In our example, we will hide the <code>popover</code> by eliminating its CSS <code>height</code> property. You’ll learn in a moment why we’re using <code>height</code>, and that there are other ways you can go about it.</p>\r\n\r\n\r\n\r\n<p>We can indeed select the <code>popover</code> attribute using an <a href=\"https://css-tricks.com/css-selectors/#aa-attribute-selectors\">attribute selector</a>:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">[popover] {\r\n  height: 0;\r\n  transition: height cubic-bezier(0.6, -0.28, 0.735, 0.045) .3s .6s;\r\n\r\n  @starting-style { \r\n    height: 1lh;\r\n  }\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>When the <code>popover</code> is triggered by the button, its <code>height</code> value is the one declared in the <code>@starting-style</code> ruleset (<code>1lh</code>). After the <code>transition-delay</code> (which is <code>.6s</code> in the example), the <code>height</code> goes from <code>1lh</code> to <code>0</code> in <code>.3s</code>, effectively hiding the <code>popover</code>.</p>\r\n\r\n\r\n\r\n<p>Once again, this is only <em>hiding</em> the popover, not <em>closing</em> it properly. That’s the next challenge and we’ll need JavaScript for that level of interaction.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"closing-the-popover-with-javascript\">Closing the popover with JavaScript</h3>\r\n\r\n\r\n<p>We can start by setting a variable that selects the <code>popover</code>:</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const POPOVER = document.querySelector('[popover]');</code></pre>\r\n\r\n\r\n\r\n<p>Next, we can establish a <code>ResizeObserver</code> that monitors the <code>popover</code>’s size:</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const POPOVER = document.querySelector('[popover]');\r\nconst OBSERVER = \r\n  new ResizeObserver((entries) => {\r\n    if(entries[0].contentBoxSize[0].blockSize == 0) \r\n      OBSERVER.unobserve((POPOVER.hidePopover(), POPOVER));\r\n  });</code></pre>\r\n\r\n\r\n\r\n<p>And we can fire that off starting when the button to show the <code>popover</code> is clicked:</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const POPOVER = document.querySelector('[popover]');\r\nconst OBSERVER = \r\n  new ResizeObserver((entries) => {\r\n    if(entries[0].contentBoxSize[0].blockSize == 0) \r\n      OBSERVER.unobserve((POPOVER.hidePopover(), POPOVER));\r\n  });\r\ndocument.querySelector('button').onclick = () => OBSERVER.observe(POPOVER);</code></pre>\r\n\r\n\r\n\r\n<p>The observer will know when the <code>popover</code>’s CSS <code>height</code> reaches zero at the end of the transition, and, at that point, the <code>popover</code> is closed with <code>hidePopover()</code>. From there, the observer is stopped with <code>unobserve()</code>.</p>\r\n\r\n\r\n\r\n<p>In our example, <code>height</code> and <code>ResizeObserver</code> are used to auto-close the notification. You can try any other CSS property and JavaScript observer combination that might work with your preference. Learning about <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver\" rel=\"noopener\"><code>ResizeObserver</code></a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver\" rel=\"noopener\"><code>MutationObserver</code></a> can help you find some options.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"setting-an-html-fallback\">Setting an HTML fallback</h3>\r\n\r\n\r\n<p>When JavaScript is disabled in the browser, if the <code>popover</code> type is set to any of the light-dismissible types, it acts as a fallback. Keep the <code>popover</code> visible by overriding the style rules that hide it. The user can dismiss it by clicking or tapping anywhere outside the element.</p>\r\n\r\n\r\n\r\n<p>If the <code>popover</code> needs to be light-dismissible <em>only</em> when JavaScript is disabled, then include that <code>popover</code> inside a <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/noscript\" rel=\"noopener\"><code><noscript></code></a> element before the <code>manual</code> popover. It’s the same process as before, where you override CSS styles as needed.</p>\r\n\r\n\r\n\r\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\"><noscript>\r\n  <div popover=\"auto\" id=\"pop\">Bookmarked!</div>\r\n</noscript>\r\n\r\n<div popover=\"manual\" id=\"pop\">Bookmarked!</div>\r\n\r\n<!-- goes where <head> element's descendants go -->\r\n<noscript>\r\n  <style>\r\n    [popover] {\r\n      transition: none;\r\n      height: 1lh;\r\n    }\r\n  </style>\r\n</noscript></code></pre>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"when-to-use-this-method-\">When to use this method?</h3>\r\n\r\n\r\n<p>Another way to implement all of this would be to use <code>setTimeout()</code> to create a delay before closing the popover in JavaScript when the button is clicked, then adding a class to the <code>popover</code> element to trigger the transition effect. That way, no observer is needed.</p>\r\n\r\n\r\n\r\n<p>With the method covered in this post, the delay can be set and triggered in CSS itself, thanks to <a href=\"https://css-tricks.com/almanac/rules/s/starting-style/\"><code>@starting-style</code></a> and <code>transition-delay</code> — no extra class required! If you prefer to implement the delay through CSS itself, then this method works best. The JavaScript will catch up to the change CSS makes at the time CSS defines, not the other way around.</p>\r\n<hr />\r\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/creating-an-auto-closing-notification-with-an-html-popover/\">Creating an Auto-Closing Notification With an HTML Popover</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&utm_source=css-tricks.com&utm_campaign=family_&utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
    "createdAt": "2025-06-09T12:58:37.000+00:00",
    "link": "https://css-tricks.com/creating-an-auto-closing-notification-with-an-html-popover/",
    "author": "",
    "site": {
      "id": "4",
      "url": "https://css-tricks.com/category/articles/feed",
      "name": "cssTrick"
    }
  },
  {
    "title": "Creating an Auto-Closing Notification With an HTML Popover",
    "content": "<p>The <a href=\"https://css-tricks.com/poppin-in/\">HTML <code>popover</code> attribute</a> transforms elements into top-layer elements that can be opened and closed with a button or JavaScript. Most popovers can be light-dismissed, closing when the user clicks or taps outside the popup. Currently, HTML <code>popover</code> lacks built-in auto-close functionality, but it’s easy to add. Auto closing popups are useful for user interfaces like banner notifications — the new-message alerts in phones, for instance.</p>\r\n\r\n\r\n\r\n<span id=\"more-386694\"></span>\r\n\r\n\r\n\r\n<p>A <del>picture</del> demo, is worth a thousand words, right? Click on the “Add to my bookmarks” button in the following example. It triggers a notification that dismisses itself after a set amount of time.</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_yyyGJdr\" src=\"//codepen.io/anon/embed/preview/yyyGJdr?height=550&theme-id=1&slug-hash=yyyGJdr&default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed yyyGJdr\" title=\"CodePen Embed yyyGJdr\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"let-s-start-with-the-popover\">Let’s start with the popover</h3>\r\n\r\n\r\n<p>The HTML <code>popover</code> attribute is remarkably trivial to use. Slap it on a <code>div</code>, specify the type of popover you need, and you’re done.</p>\r\n\r\n\r\n\r\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\"><div popover=\"manual\" id=\"pop\">Bookmarked!</div></code></pre>\r\n\r\n\r\n\r\n<p>A <code>manual</code> popover simply means it cannot be light-dismissed by clicking outside the element. As a result, we have to hide, show, or toggle the popover’s visibility ourselves explicitly with either buttons or JavaScript. Let’s use a semantic HTML <code>button</code>.</p>\r\n\r\n\r\n\r\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\"><button popovertarget=\"pop\" popovertargetaction=\"show\">\r\n  Add to my bookmarks\r\n</button>\r\n<div popover=\"manual\" id=\"pop\">Bookmarked!</div></code></pre>\r\n\r\n\r\n\r\n<p>The <code>popovertarget</code> and <code>popovertargetaction</code> attributes are the final two ingredients, where <code>popovertarget</code> links the button to the <code>popover</code> element and <code>popovertargetaction</code> ensures that the <code>popover</code> is <code>show</code>-n when the button is clicked.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"hiding-the-popover-with-a-css-transition\">Hiding the popover with a CSS transition</h3>\r\n\r\n\r\n<p>OK, so the challenge is that we have a <code>popover</code> that is shown when a certain button is clicked, but it cannot be dismissed. The button is only wired up to <code>show</code> the <code>popover</code>, but it does not <code>hide</code> or <code>toggle</code> the <code>popover</code> (since we are not explicitly declaring it). We want the <code>popover</code> to <code>show</code> when the button is clicked, then dismiss itself after a certain amount of time.</p>\r\n\r\n\r\n\r\n<p>The HTML <code>popover</code> can’t be <em>closed</em> with CSS, but it can be <em>hidden</em> from the page. Adding animation to that creates a visual effect. In our example, we will hide the <code>popover</code> by eliminating its CSS <code>height</code> property. You’ll learn in a moment why we’re using <code>height</code>, and that there are other ways you can go about it.</p>\r\n\r\n\r\n\r\n<p>We can indeed select the <code>popover</code> attribute using an <a href=\"https://css-tricks.com/css-selectors/#aa-attribute-selectors\">attribute selector</a>:</p>\r\n\r\n\r\n\r\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">[popover] {\r\n  height: 0;\r\n  transition: height cubic-bezier(0.6, -0.28, 0.735, 0.045) .3s .6s;\r\n\r\n  @starting-style { \r\n    height: 1lh;\r\n  }\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>When the <code>popover</code> is triggered by the button, its <code>height</code> value is the one declared in the <code>@starting-style</code> ruleset (<code>1lh</code>). After the <code>transition-delay</code> (which is <code>.6s</code> in the example), the <code>height</code> goes from <code>1lh</code> to <code>0</code> in <code>.3s</code>, effectively hiding the <code>popover</code>.</p>\r\n\r\n\r\n\r\n<p>Once again, this is only <em>hiding</em> the popover, not <em>closing</em> it properly. That’s the next challenge and we’ll need JavaScript for that level of interaction.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"closing-the-popover-with-javascript\">Closing the popover with JavaScript</h3>\r\n\r\n\r\n<p>We can start by setting a variable that selects the <code>popover</code>:</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const POPOVER = document.querySelector('[popover]');</code></pre>\r\n\r\n\r\n\r\n<p>Next, we can establish a <code>ResizeObserver</code> that monitors the <code>popover</code>’s size:</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const POPOVER = document.querySelector('[popover]');\r\nconst OBSERVER = \r\n  new ResizeObserver((entries) => {\r\n    if(entries[0].contentBoxSize[0].blockSize == 0) \r\n      OBSERVER.unobserve((POPOVER.hidePopover(), POPOVER));\r\n  });</code></pre>\r\n\r\n\r\n\r\n<p>And we can fire that off starting when the button to show the <code>popover</code> is clicked:</p>\r\n\r\n\r\n\r\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const POPOVER = document.querySelector('[popover]');\r\nconst OBSERVER = \r\n  new ResizeObserver((entries) => {\r\n    if(entries[0].contentBoxSize[0].blockSize == 0) \r\n      OBSERVER.unobserve((POPOVER.hidePopover(), POPOVER));\r\n  });\r\ndocument.querySelector('button').onclick = () => OBSERVER.observe(POPOVER);</code></pre>\r\n\r\n\r\n\r\n<p>The observer will know when the <code>popover</code>’s CSS <code>height</code> reaches zero at the end of the transition, and, at that point, the <code>popover</code> is closed with <code>hidePopover()</code>. From there, the observer is stopped with <code>unobserve()</code>.</p>\r\n\r\n\r\n\r\n<p>In our example, <code>height</code> and <code>ResizeObserver</code> are used to auto-close the notification. You can try any other CSS property and JavaScript observer combination that might work with your preference. Learning about <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver\" rel=\"noopener\"><code>ResizeObserver</code></a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver\" rel=\"noopener\"><code>MutationObserver</code></a> can help you find some options.</p>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"setting-an-html-fallback\">Setting an HTML fallback</h3>\r\n\r\n\r\n<p>When JavaScript is disabled in the browser, if the <code>popover</code> type is set to any of the light-dismissible types, it acts as a fallback. Keep the <code>popover</code> visible by overriding the style rules that hide it. The user can dismiss it by clicking or tapping anywhere outside the element.</p>\r\n\r\n\r\n\r\n<p>If the <code>popover</code> needs to be light-dismissible <em>only</em> when JavaScript is disabled, then include that <code>popover</code> inside a <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/noscript\" rel=\"noopener\"><code><noscript></code></a> element before the <code>manual</code> popover. It’s the same process as before, where you override CSS styles as needed.</p>\r\n\r\n\r\n\r\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\"><noscript>\r\n  <div popover=\"auto\" id=\"pop\">Bookmarked!</div>\r\n</noscript>\r\n\r\n<div popover=\"manual\" id=\"pop\">Bookmarked!</div>\r\n\r\n<!-- goes where <head> element's descendants go -->\r\n<noscript>\r\n  <style>\r\n    [popover] {\r\n      transition: none;\r\n      height: 1lh;\r\n    }\r\n  </style>\r\n</noscript></code></pre>\r\n\r\n\r\n<h3 class=\"wp-block-heading\" id=\"when-to-use-this-method-\">When to use this method?</h3>\r\n\r\n\r\n<p>Another way to implement all of this would be to use <code>setTimeout()</code> to create a delay before closing the popover in JavaScript when the button is clicked, then adding a class to the <code>popover</code> element to trigger the transition effect. That way, no observer is needed.</p>\r\n\r\n\r\n\r\n<p>With the method covered in this post, the delay can be set and triggered in CSS itself, thanks to <a href=\"https://css-tricks.com/almanac/rules/s/starting-style/\"><code>@starting-style</code></a> and <code>transition-delay</code> — no extra class required! If you prefer to implement the delay through CSS itself, then this method works best. The JavaScript will catch up to the change CSS makes at the time CSS defines, not the other way around.</p>\r\n<hr />\r\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/creating-an-auto-closing-notification-with-an-html-popover/\">Creating an Auto-Closing Notification With an HTML Popover</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&utm_source=css-tricks.com&utm_campaign=family_&utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
    "createdAt": "2025-06-09T12:58:37.000+00:00",
    "link": "https://css-tricks.com/creating-an-auto-closing-notification-with-an-html-popover/",
    "author": "",
    "site": {
      "id": "5",
      "url": "https://css-tricks.com/category/articles/feed",
      "name": "cssTrick"
    }
  },
  {
    "title": "[Korean FE Article] 모델 컨텍스트 프로토콜(MCP)이란 무엇인가요?",
    "content": "<div class=\"captioned-image-container\"><figure><a class=\"image-link image2 is-viewable-img\" target=\"_blank\" href=\"https://substackcdn.com/image/fetch/$s_!qkcH!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9a2863b3-602b-41e2-866f-68c9e8a8c1c2_1920x1080.webp\" data-component-name=\"Image2ToDOM\"><div class=\"image2-inset\"><picture><source type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/$s_!qkcH!,w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9a2863b3-602b-41e2-866f-68c9e8a8c1c2_1920x1080.webp 424w, https://substackcdn.com/image/fetch/$s_!qkcH!,w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9a2863b3-602b-41e2-866f-68c9e8a8c1c2_1920x1080.webp 848w, https://substackcdn.com/image/fetch/$s_!qkcH!,w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9a2863b3-602b-41e2-866f-68c9e8a8c1c2_1920x1080.webp 1272w, https://substackcdn.com/image/fetch/$s_!qkcH!,w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9a2863b3-602b-41e2-866f-68c9e8a8c1c2_1920x1080.webp 1456w\" sizes=\"100vw\"><img src=\"https://substackcdn.com/image/fetch/$s_!qkcH!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9a2863b3-602b-41e2-866f-68c9e8a8c1c2_1920x1080.webp\" width=\"1456\" height=\"819\" data-attrs=\"{\"src\":\"https://substack-post-media.s3.amazonaws.com/public/images/9a2863b3-602b-41e2-866f-68c9e8a8c1c2_1920x1080.webp\",\"srcNoWatermark\":null,\"fullscreen\":null,\"imageSize\":null,\"height\":819,\"width\":1456,\"resizeWidth\":null,\"bytes\":49578,\"alt\":null,\"title\":null,\"type\":\"image/webp\",\"href\":null,\"belowTheFold\":false,\"topImage\":true,\"internalRedirect\":\"https://kofearticle.substack.com/i/165205260?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9a2863b3-602b-41e2-866f-68c9e8a8c1c2_1920x1080.webp\",\"isProcessing\":false,\"align\":null,\"offset\":false}\" class=\"sizing-normal\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/$s_!qkcH!,w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9a2863b3-602b-41e2-866f-68c9e8a8c1c2_1920x1080.webp 424w, https://substackcdn.com/image/fetch/$s_!qkcH!,w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9a2863b3-602b-41e2-866f-68c9e8a8c1c2_1920x1080.webp 848w, https://substackcdn.com/image/fetch/$s_!qkcH!,w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9a2863b3-602b-41e2-866f-68c9e8a8c1c2_1920x1080.webp 1272w, https://substackcdn.com/image/fetch/$s_!qkcH!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9a2863b3-602b-41e2-866f-68c9e8a8c1c2_1920x1080.webp 1456w\" sizes=\"100vw\" fetchpriority=\"high\"></picture><div class=\"image-link-expand\"><div class=\"pencraft pc-display-flex pc-gap-8 pc-reset\"><div class=\"pencraft pc-reset icon-container restack-image\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-refresh-cw\"><path d=\"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\"></path><path d=\"M21 3v5h-5\"></path><path d=\"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\"></path><path d=\"M8 16H3v5\"></path></svg></div><div class=\"pencraft pc-reset icon-container view-image\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-maximize2\"><polyline points=\"15 3 21 3 21 9\"></polyline><polyline points=\"9 21 3 21 3 15\"></polyline><line x1=\"21\" x2=\"14\" y1=\"3\" y2=\"10\"></line><line x1=\"3\" x2=\"10\" y1=\"21\" y2=\"14\"></line></svg></div></div></div></div></a></figure></div><blockquote><p>글 링크 : <a href=\"https://velog.io/@surim014/model-context-protocol\">https://velog.io/@surim014/model-context-protocol</a></p></blockquote><h2><strong>소개</strong></h2><p><a href=\"https://kofearticle.substack.com/p/korean-fe-article-mcp\">지난 MCP 서버 글</a>, 재미있게 보셨나요?</p><p>지난 글에서 MCP 서버를 직접 구현해보며 감을 잡았다면, 이번 글에서는 MCP(Model Context Protocol) 개념 자체에 좀 더 집중합니다.</p><p>왜 이런 프로토콜이 필요하게 되었는지, 기존 방식은 어떤 한계를 가졌는지, 그리고 MCP가 제안하는 방식이 어떤 점에서 더 나은지 등을 알기 쉽게 설명하고 있어 MCP를 조금 더 자세하게 알아보고 싶은 분들께 추천 드립니다. :)</p><h2><strong>목차</strong></h2><ul><li><p>현재의 문제: AI 툴 = 통제가 매우 어렵고 불가능한 상황</p></li><li><p>MCP가 도구 호출 방식을 개선하는 방법</p></li><li><p>MCP가 내부적으로 작동하는 방식</p></li><li><p>MCP는 무엇을 바꿀 수 있을까요?</p></li><li><p>MCP 시작하기</p></li><li><p>MCP의 \"모든 것을 지배하는 하나의 프로토콜\"</p></li></ul>",
    "createdAt": "2025-06-09T00:30:31.000+00:00",
    "link": "https://kofearticle.substack.com/p/korean-fe-article-mcp-f52",
    "author": "",
    "site": {
      "id": "3",
      "url": "https://kofearticle.substack.com/feed",
      "name": "kofearticle"
    }
  },
  {
    "title": "[Korean FE Article] 의존성 분류하기",
    "content": "<div class=\"captioned-image-container\"><figure><a class=\"image-link image2 is-viewable-img\" target=\"_blank\" href=\"https://substackcdn.com/image/fetch/$s_!SQ1i!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0448087e-10c7-41fb-8d6c-fd862dfada13_1920x1080.png\" data-component-name=\"Image2ToDOM\"><div class=\"image2-inset\"><picture><source type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/$s_!SQ1i!,w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0448087e-10c7-41fb-8d6c-fd862dfada13_1920x1080.png 424w, https://substackcdn.com/image/fetch/$s_!SQ1i!,w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0448087e-10c7-41fb-8d6c-fd862dfada13_1920x1080.png 848w, https://substackcdn.com/image/fetch/$s_!SQ1i!,w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0448087e-10c7-41fb-8d6c-fd862dfada13_1920x1080.png 1272w, https://substackcdn.com/image/fetch/$s_!SQ1i!,w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0448087e-10c7-41fb-8d6c-fd862dfada13_1920x1080.png 1456w\" sizes=\"100vw\"><img src=\"https://substackcdn.com/image/fetch/$s_!SQ1i!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0448087e-10c7-41fb-8d6c-fd862dfada13_1920x1080.png\" width=\"1456\" height=\"819\" data-attrs=\"{\"src\":\"https://substack-post-media.s3.amazonaws.com/public/images/0448087e-10c7-41fb-8d6c-fd862dfada13_1920x1080.png\",\"srcNoWatermark\":null,\"fullscreen\":null,\"imageSize\":null,\"height\":819,\"width\":1456,\"resizeWidth\":null,\"bytes\":106597,\"alt\":null,\"title\":null,\"type\":\"image/png\",\"href\":null,\"belowTheFold\":false,\"topImage\":true,\"internalRedirect\":\"https://kofearticle.substack.com/i/164559117?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0448087e-10c7-41fb-8d6c-fd862dfada13_1920x1080.png\",\"isProcessing\":false,\"align\":null,\"offset\":false}\" class=\"sizing-normal\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/$s_!SQ1i!,w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0448087e-10c7-41fb-8d6c-fd862dfada13_1920x1080.png 424w, https://substackcdn.com/image/fetch/$s_!SQ1i!,w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0448087e-10c7-41fb-8d6c-fd862dfada13_1920x1080.png 848w, https://substackcdn.com/image/fetch/$s_!SQ1i!,w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0448087e-10c7-41fb-8d6c-fd862dfada13_1920x1080.png 1272w, https://substackcdn.com/image/fetch/$s_!SQ1i!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0448087e-10c7-41fb-8d6c-fd862dfada13_1920x1080.png 1456w\" sizes=\"100vw\" fetchpriority=\"high\"></picture><div class=\"image-link-expand\"><div class=\"pencraft pc-display-flex pc-gap-8 pc-reset\"><div class=\"pencraft pc-reset icon-container restack-image\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-refresh-cw\"><path d=\"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\"></path><path d=\"M21 3v5h-5\"></path><path d=\"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\"></path><path d=\"M8 16H3v5\"></path></svg></div><div class=\"pencraft pc-reset icon-container view-image\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-maximize2\"><polyline points=\"15 3 21 3 21 9\"></polyline><polyline points=\"9 21 3 21 3 15\"></polyline><line x1=\"21\" x2=\"14\" y1=\"3\" y2=\"10\"></line><line x1=\"3\" x2=\"10\" y1=\"21\" y2=\"14\"></line></svg></div></div></div></div></a></figure></div><blockquote><p>글 링크 : <a href=\"https://velog.io/@sehyunny/categorize-deps\">https://velog.io/@sehyunny/categorize-deps</a></p></blockquote><h2><strong>소개</strong></h2><p>프로젝트의 의존성을 용도와 목적에 따라 구분할 수 있다면 어떨까요? 이 글의 저자는 기존 의존성 관리 방식의 한계점을 언급하며, PNPM의 <strong>카탈로그(Catalogs)</strong> 기능을 통한 더 유연하고 명확한 의존성 관리 방식을 제안합니다. 카탈로그 기능을 활용하면 의존성을 보다 세밀하게 그룹화하고, 중앙 집중식으로 버전을 관리하며, 여러 도구와 통합을 통해 개발자 경험을 향상할 수 있습니다. 새로운 관점의 의존성 관리가 궁금하시다면 이 글을 한번 읽어보시면 어떨까요?</p><h2><strong>목차</strong></h2><ul><li><p>의존성 분류하기</p></li><li><p>PNPM 카탈로그(Catalogs)</p></li><li><p>도구 지원</p></li><li><p>앞으로의 전망</p></li></ul>",
    "createdAt": "2025-05-29T00:30:21.000+00:00",
    "link": "https://kofearticle.substack.com/p/korean-fe-article-fe0",
    "author": "",
    "site": {
      "id": "3",
      "url": "https://kofearticle.substack.com/feed",
      "name": "kofearticle"
    }
  }
]